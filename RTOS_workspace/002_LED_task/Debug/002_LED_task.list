
002_LED_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007644  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ac  080079ac  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080079ac  080079ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b4  080079b4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080079bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174a0  20000080  08007a3c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017520  08007a3c  00027520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001559c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315f  00000000  00000000  0003564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  000387b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  00039b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019637  00000000  00000000  0003ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c23  00000000  00000000  0005438f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b989  00000000  00000000  00069fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010593b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005594  00000000  00000000  0010598c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077cc 	.word	0x080077cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080077cc 	.word	0x080077cc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f3c 	.word	0x20012f3c
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 faeb 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f871 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8d7 	bl	80007e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(400000);
 8000636:	482d      	ldr	r0, [pc, #180]	; (80006ec <main+0xc8>)
 8000638:	f004 f9a0 	bl	800497c <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= (1<<0);
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <main+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <main+0xcc>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000648:	f003 ffc2 	bl	80045d0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler,"LED_Green_Task",200,NULL, 2,&task1_handle);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2302      	movs	r3, #2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	4926      	ldr	r1, [pc, #152]	; (80006f4 <main+0xd0>)
 800065c:	4826      	ldr	r0, [pc, #152]	; (80006f8 <main+0xd4>)
 800065e:	f002 f8c7 	bl	80027f0 <xTaskCreate>
 8000662:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d00a      	beq.n	8000680 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066e:	f383 8811 	msr	BASEPRI, r3
 8000672:	f3bf 8f6f 	isb	sy
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067c:	bf00      	nop
 800067e:	e7fe      	b.n	800067e <main+0x5a>

  status = xTaskCreate(task2_handler,"Task-2",200,"Hello world from Task-2", 2,&task2_handle);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <main+0xd8>)
 800068c:	22c8      	movs	r2, #200	; 0xc8
 800068e:	491c      	ldr	r1, [pc, #112]	; (8000700 <main+0xdc>)
 8000690:	481c      	ldr	r0, [pc, #112]	; (8000704 <main+0xe0>)
 8000692:	f002 f8ad 	bl	80027f0 <xTaskCreate>
 8000696:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d00a      	beq.n	80006b4 <main+0x90>
        __asm volatile
 800069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	617b      	str	r3, [r7, #20]
    }
 80006b0:	bf00      	nop
 80006b2:	e7fe      	b.n	80006b2 <main+0x8e>

  status = xTaskCreate(task3_handler,"Task-3",200,"Hello world from Task-3", 2,&task3_handle);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2302      	movs	r3, #2
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <main+0xe4>)
 80006be:	22c8      	movs	r2, #200	; 0xc8
 80006c0:	4912      	ldr	r1, [pc, #72]	; (800070c <main+0xe8>)
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <main+0xec>)
 80006c4:	f002 f894 	bl	80027f0 <xTaskCreate>
 80006c8:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d00a      	beq.n	80006e6 <main+0xc2>
        __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	613b      	str	r3, [r7, #16]
    }
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <main+0xc0>


  //starts the freeRtos scheduler
  vTaskStartScheduler();
 80006e6:	f002 fa0b 	bl	8002b00 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0xc6>
 80006ec:	00061a80 	.word	0x00061a80
 80006f0:	e0001000 	.word	0xe0001000
 80006f4:	080077e4 	.word	0x080077e4
 80006f8:	080008e1 	.word	0x080008e1
 80006fc:	080077f4 	.word	0x080077f4
 8000700:	0800780c 	.word	0x0800780c
 8000704:	08000909 	.word	0x08000909
 8000708:	08007814 	.word	0x08007814
 800070c:	0800782c 	.word	0x0800782c
 8000710:	08000939 	.word	0x08000939

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f006 fbd6 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <SystemClock_Config+0xc8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <SystemClock_Config+0xc8>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <SystemClock_Config+0xc8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <SystemClock_Config+0xcc>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <SystemClock_Config+0xcc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000788:	2354      	movs	r3, #84	; 0x54
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fd33 	bl	8001204 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 f8f2 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2102      	movs	r1, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ff95 	bl	80016f4 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d0:	f000 f8dc 	bl	800098c <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a2d      	ldr	r2, [pc, #180]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <MX_GPIO_Init+0xf0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_GPIO_Init+0xf0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	481a      	ldr	r0, [pc, #104]	; (80008d8 <MX_GPIO_Init+0xf4>)
 8000870:	f000 fc94 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4814      	ldr	r0, [pc, #80]	; (80008dc <MX_GPIO_Init+0xf8>)
 800088c:	f000 fb02 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000890:	230c      	movs	r3, #12
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a0:	2307      	movs	r3, #7
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0xf4>)
 80008ac:	f000 faf2 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0xf4>)
 80008c8:	f000 fae4 	bl	8000e94 <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <task1_handler+0x20>)
 80008ea:	f006 fa0d 	bl	8006d08 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LED_GRENN_PIN);
 80008ee:	2120      	movs	r1, #32
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <task1_handler+0x24>)
 80008f2:	f000 fc6c 	bl	80011ce <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fa:	f000 f9c5 	bl	8000c88 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008fe:	e7f3      	b.n	80008e8 <task1_handler+0x8>
 8000900:	08007834 	.word	0x08007834
 8000904:	40020000 	.word	0x40020000

08000908 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	; 0x70
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000910:	f107 000c 	add.w	r0, r7, #12
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <task2_handler+0x2c>)
 8000918:	2164      	movs	r1, #100	; 0x64
 800091a:	f006 fae3 	bl	8006ee4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4618      	mov	r0, r3
 8000924:	f006 f9f0 	bl	8006d08 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(800);
 8000928:	f44f 7048 	mov.w	r0, #800	; 0x320
 800092c:	f000 f9ac 	bl	8000c88 <HAL_Delay>
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000930:	e7ee      	b.n	8000910 <task2_handler+0x8>
 8000932:	bf00      	nop
 8000934:	08007848 	.word	0x08007848

08000938 <task3_handler>:
	}
}


static void task3_handler(void *parameters)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	; 0x70
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000940:	f107 000c 	add.w	r0, r7, #12
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <task3_handler+0x2c>)
 8000948:	2164      	movs	r1, #100	; 0x64
 800094a:	f006 facb 	bl	8006ee4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f006 f9d8 	bl	8006d08 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(600);
 8000958:	f44f 7016 	mov.w	r0, #600	; 0x258
 800095c:	f000 f994 	bl	8000c88 <HAL_Delay>
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000960:	e7ee      	b.n	8000940 <task3_handler+0x8>
 8000962:	bf00      	nop
 8000964:	08007848 	.word	0x08007848

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f965 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40000c00 	.word	0x40000c00

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009d6:	f003 fa77 	bl	8003ec8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b33      	ldr	r3, [pc, #204]	; (8000acc <HAL_InitTick+0xe4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a32      	ldr	r2, [pc, #200]	; (8000acc <HAL_InitTick+0xe4>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <HAL_InitTick+0xe4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f874 	bl	8001b0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a2e:	f001 f859 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8000a32:	6378      	str	r0, [r7, #52]	; 0x34
 8000a34:	e004      	b.n	8000a40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a36:	f001 f855 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <HAL_InitTick+0xe8>)
 8000a44:	fba2 2303 	umull	r2, r3, r2, r3
 8000a48:	0c9b      	lsrs	r3, r3, #18
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <HAL_InitTick+0xf0>)
 8000a52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a5a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a60:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a74:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a76:	f001 f87b 	bl	8001b70 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d11b      	bne.n	8000ac0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <HAL_InitTick+0xec>)
 8000a8a:	f001 f8cb 	bl	8001c24 <HAL_TIM_Base_Start_IT>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d111      	bne.n	8000ac0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a9c:	2032      	movs	r0, #50	; 0x32
 8000a9e:	f000 f9eb 	bl	8000e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d808      	bhi.n	8000aba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2032      	movs	r0, #50	; 0x32
 8000aae:	f000 f9c7 	bl	8000e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_InitTick+0xf4>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	e002      	b.n	8000ac0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3738      	adds	r7, #56	; 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	2000009c 	.word	0x2000009c
 8000ad8:	40000c00 	.word	0x40000c00
 8000adc:	20000004 	.word	0x20000004

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM5_IRQHandler+0x10>)
 8000b12:	f001 f8e9 	bl	8001ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000009c 	.word	0x2000009c

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f006 f978 	bl	8006e44 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20020000 	.word	0x20020000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200000e4 	.word	0x200000e4
 8000b88:	20017520 	.word	0x20017520

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f006 f937 	bl	8006e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd1f 	bl	8000624 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bf4:	080079bc 	.word	0x080079bc
  ldr r2, =_sbss
 8000bf8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bfc:	20017520 	.word	0x20017520

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f8fc 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fed8 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff feae 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	200000e8 	.word	0x200000e8

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200000e8 	.word	0x200000e8

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffde 	bl	8000c70 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e159      	b.n	8001164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8148 	bne.w	800115e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a2 	beq.w	800115e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a56      	ldr	r2, [pc, #344]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b54      	ldr	r3, [pc, #336]	; (800117c <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x202>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2f4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1fe>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a47      	ldr	r2, [pc, #284]	; (800118c <HAL_GPIO_Init+0x2f8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1fa>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a46      	ldr	r2, [pc, #280]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1f6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <HAL_GPIO_Init+0x300>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1f2>
 8001082:	2304      	movs	r3, #4
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001086:	2307      	movs	r3, #7
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x304>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f aea2 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	400b      	ands	r3, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e267      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d075      	beq.n	800130e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00c      	beq.n	8001248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122e:	4b85      	ldr	r3, [pc, #532]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4b82      	ldr	r3, [pc, #520]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001246:	d10b      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d05b      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d157      	bne.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e242      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x74>
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a75      	ldr	r2, [pc, #468]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6f      	ldr	r2, [pc, #444]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6c      	ldr	r2, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a68      	ldr	r2, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcd8 	bl	8000c70 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcd4 	bl	8000c70 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e207      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcc4 	bl	8000c70 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcc0 	bl	8000c70 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1f3      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1c7      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4937      	ldr	r1, [pc, #220]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_RCC_OscConfig+0x244>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fc79 	bl	8000c70 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fc75 	bl	8000c70 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1a8      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4925      	ldr	r1, [pc, #148]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_RCC_OscConfig+0x244>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc58 	bl	8000c70 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc54 	bl	8000c70 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e187      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d036      	beq.n	800145c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d016      	beq.n	8001424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x248>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff fc38 	bl	8000c70 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fc34 	bl	8000c70 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e167      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x240>)
 8001418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x200>
 8001422:	e01b      	b.n	800145c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x248>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fc21 	bl	8000c70 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e00e      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fc1d 	bl	8000c70 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d907      	bls.n	8001450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e150      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ea      	bne.n	8001432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8097 	beq.w	8001598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a7c      	ldr	r2, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b77      	ldr	r3, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b74      	ldr	r3, [pc, #464]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a73      	ldr	r2, [pc, #460]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbdd 	bl	8000c70 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff fbd9 	bl	8000c70 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e10c      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <HAL_RCC_OscConfig+0x474>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x2ea>
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a63      	ldr	r2, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x324>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x30c>
 80014f6:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a5e      	ldr	r2, [pc, #376]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a5b      	ldr	r2, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0x324>
 8001510:	4b58      	ldr	r3, [pc, #352]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a57      	ldr	r2, [pc, #348]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	4b55      	ldr	r3, [pc, #340]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a54      	ldr	r2, [pc, #336]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 0304 	bic.w	r3, r3, #4
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d015      	beq.n	800155c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fb9e 	bl	8000c70 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fb9a 	bl	8000c70 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0cb      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	4b49      	ldr	r3, [pc, #292]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0ee      	beq.n	8001538 <HAL_RCC_OscConfig+0x334>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fb88 	bl	8000c70 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fb84 	bl	8000c70 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0b5      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157a:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ee      	bne.n	8001564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a38      	ldr	r2, [pc, #224]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a1 	beq.w	80016e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d05c      	beq.n	8001668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d141      	bne.n	800163a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_RCC_OscConfig+0x478>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb58 	bl	8000c70 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fb54 	bl	8000c70 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e087      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	019b      	lsls	r3, r3, #6
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	3b01      	subs	r3, #1
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	491b      	ldr	r1, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x478>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fb2d 	bl	8000c70 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fb29 	bl	8000c70 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e05c      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x416>
 8001638:	e054      	b.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb16 	bl	8000c70 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb12 	bl	8000c70 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e045      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x444>
 8001666:	e03d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e038      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000
 800167c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d028      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d121      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d111      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa44 	bl	8000c70 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fa40 	bl	8000c70 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f8a4 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08007924 	.word	0x08007924
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c4:	b094      	sub	sp, #80	; 0x50
 80018c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
 80018cc:	2300      	movs	r3, #0
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d8:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d00d      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	f200 80e1 	bhi.w	8001aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3a>
 80018f2:	e0db      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018f8:	e0db      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018fe:	e0d8      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001900:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190a:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	2200      	movs	r2, #0
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
 800192e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001932:	4622      	mov	r2, r4
 8001934:	462b      	mov	r3, r5
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4621      	mov	r1, r4
 800194c:	1a51      	subs	r1, r2, r1
 800194e:	6139      	str	r1, [r7, #16]
 8001950:	4629      	mov	r1, r5
 8001952:	eb63 0301 	sbc.w	r3, r3, r1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001964:	4659      	mov	r1, fp
 8001966:	018b      	lsls	r3, r1, #6
 8001968:	4651      	mov	r1, sl
 800196a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196e:	4651      	mov	r1, sl
 8001970:	018a      	lsls	r2, r1, #6
 8001972:	4651      	mov	r1, sl
 8001974:	ebb2 0801 	subs.w	r8, r2, r1
 8001978:	4659      	mov	r1, fp
 800197a:	eb63 0901 	sbc.w	r9, r3, r1
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001992:	4690      	mov	r8, r2
 8001994:	4699      	mov	r9, r3
 8001996:	4623      	mov	r3, r4
 8001998:	eb18 0303 	adds.w	r3, r8, r3
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	462b      	mov	r3, r5
 80019a0:	eb49 0303 	adc.w	r3, r9, r3
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019b2:	4629      	mov	r1, r5
 80019b4:	024b      	lsls	r3, r1, #9
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019bc:	4621      	mov	r1, r4
 80019be:	024a      	lsls	r2, r1, #9
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d0:	f7fe fca6 	bl	8000320 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019dc:	e058      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	2200      	movs	r2, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	4611      	mov	r1, r2
 80019ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019f8:	4642      	mov	r2, r8
 80019fa:	464b      	mov	r3, r9
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	0159      	lsls	r1, r3, #5
 8001a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0a:	0150      	lsls	r0, r2, #5
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4641      	mov	r1, r8
 8001a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a16:	4649      	mov	r1, r9
 8001a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a30:	ebb2 040a 	subs.w	r4, r2, sl
 8001a34:	eb63 050b 	sbc.w	r5, r3, fp
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	00eb      	lsls	r3, r5, #3
 8001a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a46:	00e2      	lsls	r2, r4, #3
 8001a48:	4614      	mov	r4, r2
 8001a4a:	461d      	mov	r5, r3
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	18e3      	adds	r3, r4, r3
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	464b      	mov	r3, r9
 8001a54:	eb45 0303 	adc.w	r3, r5, r3
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a66:	4629      	mov	r1, r5
 8001a68:	028b      	lsls	r3, r1, #10
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a70:	4621      	mov	r1, r4
 8001a72:	028a      	lsls	r2, r1, #10
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	61fa      	str	r2, [r7, #28]
 8001a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a84:	f7fe fc4c 	bl	8000320 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3750      	adds	r7, #80	; 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	007a1200 	.word	0x007a1200

08001acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0a9b      	lsrs	r3, r3, #10
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08007934 	.word	0x08007934

08001b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	220f      	movs	r2, #15
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_RCC_GetClockConfig+0x60>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0207 	and.w	r2, r3, #7
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e041      	b.n	8001c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f839 	bl	8001c0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 f9ca 	bl	8001f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d001      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e044      	b.n	8001cc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c66:	d013      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_TIM_Base_Start_IT+0xb8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d010      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb2:	e007      	b.n	8001cc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40000c00 	.word	0x40000c00
 8001ce4:	40014000 	.word	0x40014000

08001ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0202 	mvn.w	r2, #2
 8001d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8ee 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8e0 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8f1 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0204 	mvn.w	r2, #4
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8c4 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8b6 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8c7 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0208 	mvn.w	r2, #8
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f89a 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f88c 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f89d 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d122      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d11b      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0210 	mvn.w	r2, #16
 8001e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2208      	movs	r2, #8
 8001e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f870 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f862 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f873 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0201 	mvn.w	r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fd7e 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b80      	cmp	r3, #128	; 0x80
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8e2 	bl	800205c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb0:	2b40      	cmp	r3, #64	; 0x40
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f838 	bl	8001f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0220 	mvn.w	r2, #32
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8ac 	bl	8002048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <TIM_Base_SetConfig+0xe4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00f      	beq.n	8001f80 <TIM_Base_SetConfig+0x38>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0x38>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a31      	ldr	r2, [pc, #196]	; (8002030 <TIM_Base_SetConfig+0xe8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0x38>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a30      	ldr	r2, [pc, #192]	; (8002034 <TIM_Base_SetConfig+0xec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0x38>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <TIM_Base_SetConfig+0xf0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a25      	ldr	r2, [pc, #148]	; (800202c <TIM_Base_SetConfig+0xe4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01b      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d017      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <TIM_Base_SetConfig+0xe8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <TIM_Base_SetConfig+0xec>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00f      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <TIM_Base_SetConfig+0xf0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00b      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <TIM_Base_SetConfig+0xf4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <TIM_Base_SetConfig+0xf8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_Base_SetConfig+0x8a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <TIM_Base_SetConfig+0xfc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d108      	bne.n	8001fe4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <TIM_Base_SetConfig+0xe4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d103      	bne.n	8002018 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	615a      	str	r2, [r3, #20]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000
 8002030:	40000400 	.word	0x40000400
 8002034:	40000800 	.word	0x40000800
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40014000 	.word	0x40014000
 8002040:	40014400 	.word	0x40014400
 8002044:	40014800 	.word	0x40014800

08002048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0208 	add.w	r2, r3, #8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d103      	bne.n	80020ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e00c      	b.n	8002104 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3308      	adds	r3, #8
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e002      	b.n	80020f8 <vListInsert+0x2e>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	d2f6      	bcs.n	80020f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	601a      	str	r2, [r3, #0]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6892      	ldr	r2, [r2, #8]
 8002152:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6852      	ldr	r2, [r2, #4]
 800215c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d103      	bne.n	8002170 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	1e5a      	subs	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <xQueueGenericReset+0x2e>
        __asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	60fb      	str	r3, [r7, #12]
    }
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d05d      	beq.n	8002280 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d059      	beq.n	8002280 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	2100      	movs	r1, #0
 80021d6:	fba3 2302 	umull	r2, r3, r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d000      	beq.n	80021e0 <xQueueGenericReset+0x50>
 80021de:	2101      	movs	r1, #1
 80021e0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d14c      	bne.n	8002280 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80021e6:	f001 feed 	bl	8003fc4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	6939      	ldr	r1, [r7, #16]
 80021f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	441a      	add	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2200      	movs	r2, #0
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	3b01      	subs	r3, #1
 8002218:	6939      	ldr	r1, [r7, #16]
 800221a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	441a      	add	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d114      	bne.n	8002266 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01a      	beq.n	800227a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3310      	adds	r3, #16
 8002248:	4618      	mov	r0, r3
 800224a:	f000 ffdb 	bl	8003204 <xTaskRemoveFromEventList>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d012      	beq.n	800227a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <xQueueGenericReset+0x11c>)
 8002256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	e009      	b.n	800227a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	3310      	adds	r3, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff00 	bl	8002070 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3324      	adds	r3, #36	; 0x24
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fefb 	bl	8002070 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800227a:	f001 fed3 	bl	8004024 <vPortExitCritical>
 800227e:	e001      	b.n	8002284 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <xQueueGenericReset+0x110>
        __asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	60bb      	str	r3, [r7, #8]
    }
 800229c:	bf00      	nop
 800229e:	e7fe      	b.n	800229e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022a0:	697b      	ldr	r3, [r7, #20]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02e      	beq.n	8002326 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022c8:	2100      	movs	r1, #0
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	fba3 2302 	umull	r2, r3, r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d000      	beq.n	80022d8 <xQueueGenericCreate+0x28>
 80022d6:	2101      	movs	r1, #1
 80022d8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d123      	bne.n	8002326 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022e6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022ea:	d81c      	bhi.n	8002326 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3350      	adds	r3, #80	; 0x50
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 ff8e 	bl	800421c <pvPortMalloc>
 8002300:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002312:	79fa      	ldrb	r2, [r7, #7]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f814 	bl	800234c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002324:	e00d      	b.n	8002342 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <xQueueGenericCreate+0x92>
        __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	613b      	str	r3, [r7, #16]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002342:	69fb      	ldr	r3, [r7, #28]
    }
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d103      	bne.n	8002368 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e002      	b.n	800236e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800237a:	2101      	movs	r1, #1
 800237c:	69b8      	ldr	r0, [r7, #24]
 800237e:	f7ff ff07 	bl	8002190 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	2073      	movs	r0, #115	; 0x73
 8002392:	f003 fe9f 	bl	80060d4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b08f      	sub	sp, #60	; 0x3c
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <xQueueReceive+0x30>
        __asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	623b      	str	r3, [r7, #32]
    }
 80023cc:	bf00      	nop
 80023ce:	e7fe      	b.n	80023ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <xQueueReceive+0x3e>
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <xQueueReceive+0x42>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <xQueueReceive+0x44>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueReceive+0x5e>
        __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	61fb      	str	r3, [r7, #28]
    }
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023fe:	f001 f913 	bl	8003628 <xTaskGetSchedulerState>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <xQueueReceive+0x6e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <xQueueReceive+0x72>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <xQueueReceive+0x74>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueReceive+0x8e>
        __asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	61bb      	str	r3, [r7, #24]
    }
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800242e:	f001 fdc9 	bl	8003fc4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02f      	beq.n	800249e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002442:	f000 f8bd 	bl	80025c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	4618      	mov	r0, r3
 800244a:	f004 fb71 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 800244e:	4604      	mov	r4, r0
 8002450:	2000      	movs	r0, #0
 8002452:	f004 fb6d 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2101      	movs	r1, #1
 800245c:	9100      	str	r1, [sp, #0]
 800245e:	4621      	mov	r1, r4
 8002460:	205c      	movs	r0, #92	; 0x5c
 8002462:	f003 fead 	bl	80061c0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00f      	beq.n	8002496 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	3310      	adds	r3, #16
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fec2 	bl	8003204 <xTaskRemoveFromEventList>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <xQueueReceive+0x21c>)
 8002488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002496:	f001 fdc5 	bl	8004024 <vPortExitCritical>
                return pdPASS;
 800249a:	2301      	movs	r3, #1
 800249c:	e08a      	b.n	80025b4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024a4:	f001 fdbe 	bl	8004024 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 fb40 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 80024b0:	4604      	mov	r4, r0
 80024b2:	2000      	movs	r0, #0
 80024b4:	f004 fb3c 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2101      	movs	r1, #1
 80024be:	9100      	str	r1, [sp, #0]
 80024c0:	4621      	mov	r1, r4
 80024c2:	205c      	movs	r0, #92	; 0x5c
 80024c4:	f003 fe7c 	bl	80061c0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e073      	b.n	80025b4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 ff6c 	bl	80033b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024dc:	2301      	movs	r3, #1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024e0:	f001 fda0 	bl	8004024 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024e4:	f000 fb6e 	bl	8002bc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024e8:	f001 fd6c 	bl	8003fc4 <vPortEnterCritical>
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d103      	bne.n	8002502 <xQueueReceive+0x162>
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002508:	b25b      	sxtb	r3, r3
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d103      	bne.n	8002518 <xQueueReceive+0x178>
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002518:	f001 fd84 	bl	8004024 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800251c:	1d3a      	adds	r2, r7, #4
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f000 ff5b 	bl	80033e0 <xTaskCheckForTimeOut>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d124      	bne.n	800257a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002532:	f000 f8bd 	bl	80026b0 <prvIsQueueEmpty>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fdf1 	bl	800312c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800254a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800254c:	f000 f85e 	bl	800260c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002550:	f000 fb46 	bl	8002be0 <xTaskResumeAll>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	f47f af69 	bne.w	800242e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <xQueueReceive+0x21c>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	e75f      	b.n	800242e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800256e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002570:	f000 f84c 	bl	800260c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002574:	f000 fb34 	bl	8002be0 <xTaskResumeAll>
 8002578:	e759      	b.n	800242e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800257a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257c:	f000 f846 	bl	800260c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002580:	f000 fb2e 	bl	8002be0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002586:	f000 f893 	bl	80026b0 <prvIsQueueEmpty>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f43f af4e 	beq.w	800242e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	4618      	mov	r0, r3
 8002596:	f004 facb 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 800259a:	4604      	mov	r4, r0
 800259c:	2000      	movs	r0, #0
 800259e:	f004 fac7 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2101      	movs	r1, #1
 80025a8:	9100      	str	r1, [sp, #0]
 80025aa:	4621      	mov	r1, r4
 80025ac:	205c      	movs	r0, #92	; 0x5c
 80025ae:	f003 fe07 	bl	80061c0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025b2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3734      	adds	r7, #52	; 0x34
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd90      	pop	{r4, r7, pc}
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d018      	beq.n	8002604 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	441a      	add	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d303      	bcc.n	80025f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68d9      	ldr	r1, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	461a      	mov	r2, r3
 80025fe:	6838      	ldr	r0, [r7, #0]
 8002600:	f004 fc5a 	bl	8006eb8 <memcpy>
    }
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002614:	f001 fcd6 	bl	8003fc4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800261e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002620:	e011      	b.n	8002646 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d012      	beq.n	8002650 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3324      	adds	r3, #36	; 0x24
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fde8 	bl	8003204 <xTaskRemoveFromEventList>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800263a:	f000 ff37 	bl	80034ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	3b01      	subs	r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	dce9      	bgt.n	8002622 <prvUnlockQueue+0x16>
 800264e:	e000      	b.n	8002652 <prvUnlockQueue+0x46>
                    break;
 8002650:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800265a:	f001 fce3 	bl	8004024 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800265e:	f001 fcb1 	bl	8003fc4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002668:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800266a:	e011      	b.n	8002690 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3310      	adds	r3, #16
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fdc3 	bl	8003204 <xTaskRemoveFromEventList>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002684:	f000 ff12 	bl	80034ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	3b01      	subs	r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002694:	2b00      	cmp	r3, #0
 8002696:	dce9      	bgt.n	800266c <prvUnlockQueue+0x60>
 8002698:	e000      	b.n	800269c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800269a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	22ff      	movs	r2, #255	; 0xff
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026a4:	f001 fcbe 	bl	8004024 <vPortExitCritical>
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026b8:	f001 fc84 	bl	8003fc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e001      	b.n	80026ce <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026ce:	f001 fca9 	bl	8004024 <vPortExitCritical>

    return xReturn;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	60fb      	str	r3, [r7, #12]
    }
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d024      	beq.n	8002756 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e01e      	b.n	8002750 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <vQueueAddToRegistry+0xa8>)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	d105      	bne.n	800272e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4a17      	ldr	r2, [pc, #92]	; (8002784 <vQueueAddToRegistry+0xa8>)
 8002728:	4413      	add	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
                    break;
 800272c:	e013      	b.n	8002756 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <vQueueAddToRegistry+0x6e>
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <vQueueAddToRegistry+0xa8>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <vQueueAddToRegistry+0xa8>)
 8002746:	4413      	add	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b07      	cmp	r3, #7
 8002754:	d9dd      	bls.n	8002712 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00f      	beq.n	800277c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 f9e0 	bl	8006b30 <SEGGER_SYSVIEW_ShrinkId>
 8002770:	4601      	mov	r1, r0
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	2071      	movs	r0, #113	; 0x71
 8002778:	f003 fc52 	bl	8006020 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800277c:	bf00      	nop
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200000ec 	.word	0x200000ec

08002788 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002798:	f001 fc14 	bl	8003fc4 <vPortEnterCritical>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d103      	bne.n	80027b2 <vQueueWaitForMessageRestricted+0x2a>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d103      	bne.n	80027c8 <vQueueWaitForMessageRestricted+0x40>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c8:	f001 fc2c 	bl	8004024 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3324      	adds	r3, #36	; 0x24
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fcc9 	bl	8003174 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff12 	bl	800260c <prvUnlockQueue>
    }
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af04      	add	r7, sp, #16
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fd09 	bl	800421c <pvPortMalloc>
 800280a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d013      	beq.n	800283a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002812:	2058      	movs	r0, #88	; 0x58
 8002814:	f001 fd02 	bl	800421c <pvPortMalloc>
 8002818:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002820:	2258      	movs	r2, #88	; 0x58
 8002822:	2100      	movs	r1, #0
 8002824:	69f8      	ldr	r0, [r7, #28]
 8002826:	f004 fb55 	bl	8006ed4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
 8002830:	e005      	b.n	800283e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f001 fdac 	bl	8004390 <vPortFree>
 8002838:	e001      	b.n	800283e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	2300      	movs	r3, #0
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f80e 	bl	800287c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002860:	69f8      	ldr	r0, [r7, #28]
 8002862:	f000 f899 	bl	8002998 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002866:	2301      	movs	r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e002      	b.n	8002872 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002872:	69bb      	ldr	r3, [r7, #24]
    }
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	461a      	mov	r2, r3
 8002894:	21a5      	movs	r1, #165	; 0xa5
 8002896:	f004 fb1d 	bl	8006ed4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a4:	3b01      	subs	r3, #1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f023 0307 	bic.w	r3, r3, #7
 80028b2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	617b      	str	r3, [r7, #20]
    }
 80028d0:	bf00      	nop
 80028d2:	e7fe      	b.n	80028d2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01e      	beq.n	8002918 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e012      	b.n	8002906 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	7819      	ldrb	r1, [r3, #0]
 80028e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	3334      	adds	r3, #52	; 0x34
 80028f0:	460a      	mov	r2, r1
 80028f2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3301      	adds	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d9e9      	bls.n	80028e0 <prvInitialiseNewTask+0x64>
 800290c:	e000      	b.n	8002910 <prvInitialiseNewTask+0x94>
            {
                break;
 800290e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	2b04      	cmp	r3, #4
 800291c:	d90a      	bls.n	8002934 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	613b      	str	r3, [r7, #16]
    }
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	2b04      	cmp	r3, #4
 8002938:	d901      	bls.n	800293e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800293a:	2304      	movs	r3, #4
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002948:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	3304      	adds	r3, #4
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fbae 	bl	80020b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	3318      	adds	r3, #24
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fba9 	bl	80020b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002962:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	f1c3 0205 	rsb	r2, r3, #5
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	68f9      	ldr	r1, [r7, #12]
 8002978:	69b8      	ldr	r0, [r7, #24]
 800297a:	f001 f977 	bl	8003c6c <pxPortInitialiseStack>
 800297e:	4602      	mov	r2, r0
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029a0:	f001 fb10 	bl	8003fc4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <prvAddNewTaskToReadyList+0x14c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <prvAddNewTaskToReadyList+0x14c>)
 80029ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029b6:	4a4c      	ldr	r2, [pc, #304]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029bc:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <prvAddNewTaskToReadyList+0x14c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d110      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029c4:	f000 fd96 	bl	80034f4 <prvInitialiseTaskLists>
 80029c8:	e00d      	b.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029ca:	4b48      	ldr	r3, [pc, #288]	; (8002aec <prvAddNewTaskToReadyList+0x154>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d802      	bhi.n	80029e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029e0:	4a41      	ldr	r2, [pc, #260]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <prvAddNewTaskToReadyList+0x158>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <prvAddNewTaskToReadyList+0x158>)
 80029ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <prvAddNewTaskToReadyList+0x158>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <prvAddNewTaskToReadyList+0x94>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 ffcf 	bl	80069a4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	461d      	mov	r5, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	1ae3      	subs	r3, r4, r3
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	462b      	mov	r3, r5
 8002a28:	f001 fe74 	bl	8004714 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f83c 	bl	8006aac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <prvAddNewTaskToReadyList+0x15c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <prvAddNewTaskToReadyList+0x15c>)
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4a:	492b      	ldr	r1, [pc, #172]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	3204      	adds	r2, #4
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	615a      	str	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	4918      	ldr	r1, [pc, #96]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <prvAddNewTaskToReadyList+0x160>)
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ab2:	f001 fab7 	bl	8004024 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <prvAddNewTaskToReadyList+0x154>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <prvAddNewTaskToReadyList+0x150>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <prvAddNewTaskToReadyList+0x164>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae4:	20000204 	.word	0x20000204
 8002ae8:	2000012c 	.word	0x2000012c
 8002aec:	20000210 	.word	0x20000210
 8002af0:	20000220 	.word	0x20000220
 8002af4:	2000020c 	.word	0x2000020c
 8002af8:	20000130 	.word	0x20000130
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <vTaskStartScheduler+0xa4>)
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2282      	movs	r2, #130	; 0x82
 8002b12:	4925      	ldr	r1, [pc, #148]	; (8002ba8 <vTaskStartScheduler+0xa8>)
 8002b14:	4825      	ldr	r0, [pc, #148]	; (8002bac <vTaskStartScheduler+0xac>)
 8002b16:	f7ff fe6b 	bl	80027f0 <xTaskCreate>
 8002b1a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002b22:	f000 fe1f 	bl	8003764 <xTimerCreateTimerTask>
 8002b26:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d124      	bne.n	8002b78 <vTaskStartScheduler+0x78>
        __asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	60bb      	str	r3, [r7, #8]
    }
 8002b40:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <vTaskStartScheduler+0xb0>)
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <vTaskStartScheduler+0xb4>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <vTaskStartScheduler+0xb8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <vTaskStartScheduler+0xbc>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <vTaskStartScheduler+0xa4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d102      	bne.n	8002b68 <vTaskStartScheduler+0x68>
 8002b62:	f003 ff03 	bl	800696c <SEGGER_SYSVIEW_OnIdle>
 8002b66:	e004      	b.n	8002b72 <vTaskStartScheduler+0x72>
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <vTaskStartScheduler+0xbc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 ff5b 	bl	8006a28 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002b72:	f001 f907 	bl	8003d84 <xPortStartScheduler>
 8002b76:	e00e      	b.n	8002b96 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d10a      	bne.n	8002b96 <vTaskStartScheduler+0x96>
        __asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	607b      	str	r3, [r7, #4]
    }
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <vTaskStartScheduler+0xc0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000228 	.word	0x20000228
 8002ba8:	0800784c 	.word	0x0800784c
 8002bac:	080034c5 	.word	0x080034c5
 8002bb0:	20000224 	.word	0x20000224
 8002bb4:	20000210 	.word	0x20000210
 8002bb8:	20000208 	.word	0x20000208
 8002bbc:	2000012c 	.word	0x2000012c
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <vTaskSuspendAll+0x18>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <vTaskSuspendAll+0x18>)
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	2000022c 	.word	0x2000022c

08002be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <xTaskResumeAll+0x1dc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <xTaskResumeAll+0x2c>
        __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	607b      	str	r3, [r7, #4]
    }
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c0c:	f001 f9da 	bl	8003fc4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <xTaskResumeAll+0x1dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <xTaskResumeAll+0x1dc>)
 8002c18:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c1a:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <xTaskResumeAll+0x1dc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 80c4 	bne.w	8002dac <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <xTaskResumeAll+0x1e0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80bf 	beq.w	8002dac <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2e:	e08e      	b.n	8002d4e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <xTaskResumeAll+0x1e4>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	6a12      	ldr	r2, [r2, #32]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	69d2      	ldr	r2, [r2, #28]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3318      	adds	r3, #24
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d103      	bne.n	8002c66 <xTaskResumeAll+0x86>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	6a1a      	ldr	r2, [r3, #32]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	68d2      	ldr	r2, [r2, #12]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	6892      	ldr	r2, [r2, #8]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3304      	adds	r3, #4
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d103      	bne.n	8002ca4 <xTaskResumeAll+0xc4>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	615a      	str	r2, [r3, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fef8 	bl	8006aac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <xTaskResumeAll+0x1e8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <xTaskResumeAll+0x1e8>)
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	493e      	ldr	r1, [pc, #248]	; (8002dcc <xTaskResumeAll+0x1ec>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3304      	adds	r3, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	3204      	adds	r2, #4
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <xTaskResumeAll+0x1ec>)
 8002d12:	441a      	add	r2, r3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	615a      	str	r2, [r3, #20]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	492b      	ldr	r1, [pc, #172]	; (8002dcc <xTaskResumeAll+0x1ec>)
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	4827      	ldr	r0, [pc, #156]	; (8002dcc <xTaskResumeAll+0x1ec>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4403      	add	r3, r0
 8002d38:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <xTaskResumeAll+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <xTaskResumeAll+0x1f4>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <xTaskResumeAll+0x1e4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f47f af6c 	bne.w	8002c30 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d5e:	f000 fc47 	bl	80035f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <xTaskResumeAll+0x1f8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d010      	beq.n	8002d90 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d6e:	f000 f859 	bl	8002e24 <xTaskIncrementTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <xTaskResumeAll+0x1f4>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f1      	bne.n	8002d6e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <xTaskResumeAll+0x1f8>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <xTaskResumeAll+0x1f4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <xTaskResumeAll+0x1fc>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002dac:	f001 f93a 	bl	8004024 <vPortExitCritical>

    return xAlreadyYielded;
 8002db0:	69bb      	ldr	r3, [r7, #24]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000022c 	.word	0x2000022c
 8002dc0:	20000204 	.word	0x20000204
 8002dc4:	200001c4 	.word	0x200001c4
 8002dc8:	2000020c 	.word	0x2000020c
 8002dcc:	20000130 	.word	0x20000130
 8002dd0:	2000012c 	.word	0x2000012c
 8002dd4:	20000218 	.word	0x20000218
 8002dd8:	20000214 	.word	0x20000214
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <xTaskGetTickCount+0x1c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002dec:	687b      	ldr	r3, [r7, #4]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000208 	.word	0x20000208

08002e00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e06:	f001 f9c9 	bl	800419c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <xTaskGetTickCountFromISR+0x20>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e14:	683b      	ldr	r3, [r7, #0]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000208 	.word	0x20000208

08002e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	; (800302c <xTaskIncrementTick+0x208>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 80f0 	bne.w	8003018 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e38:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <xTaskIncrementTick+0x20c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e40:	4a7b      	ldr	r2, [pc, #492]	; (8003030 <xTaskIncrementTick+0x20c>)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d120      	bne.n	8002e8e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e4c:	4b79      	ldr	r3, [pc, #484]	; (8003034 <xTaskIncrementTick+0x210>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <xTaskIncrementTick+0x48>
        __asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	607b      	str	r3, [r7, #4]
    }
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xTaskIncrementTick+0x46>
 8002e6c:	4b71      	ldr	r3, [pc, #452]	; (8003034 <xTaskIncrementTick+0x210>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	4b71      	ldr	r3, [pc, #452]	; (8003038 <xTaskIncrementTick+0x214>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6f      	ldr	r2, [pc, #444]	; (8003034 <xTaskIncrementTick+0x210>)
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <xTaskIncrementTick+0x214>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b6e      	ldr	r3, [pc, #440]	; (800303c <xTaskIncrementTick+0x218>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	4a6d      	ldr	r2, [pc, #436]	; (800303c <xTaskIncrementTick+0x218>)
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	f000 fbb1 	bl	80035f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e8e:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <xTaskIncrementTick+0x21c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f0c0 80aa 	bcc.w	8002fee <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e9a:	4b66      	ldr	r3, [pc, #408]	; (8003034 <xTaskIncrementTick+0x210>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea4:	4b66      	ldr	r3, [pc, #408]	; (8003040 <xTaskIncrementTick+0x21c>)
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eaa:	601a      	str	r2, [r3, #0]
                    break;
 8002eac:	e09f      	b.n	8002fee <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eae:	4b61      	ldr	r3, [pc, #388]	; (8003034 <xTaskIncrementTick+0x210>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ebe:	6a3a      	ldr	r2, [r7, #32]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d203      	bcs.n	8002ece <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ec6:	4a5e      	ldr	r2, [pc, #376]	; (8003040 <xTaskIncrementTick+0x21c>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002ecc:	e08f      	b.n	8002fee <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	68d2      	ldr	r2, [r2, #12]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	6892      	ldr	r2, [r2, #8]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d103      	bne.n	8002efc <xTaskIncrementTick+0xd8>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2200      	movs	r2, #0
 8002f00:	615a      	str	r2, [r3, #20]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	1e5a      	subs	r2, r3, #1
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01e      	beq.n	8002f52 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	6a12      	ldr	r2, [r2, #32]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	69d2      	ldr	r2, [r2, #28]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3318      	adds	r3, #24
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d103      	bne.n	8002f42 <xTaskIncrementTick+0x11e>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2200      	movs	r2, #0
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1e5a      	subs	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fda9 	bl	8006aac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	4b38      	ldr	r3, [pc, #224]	; (8003044 <xTaskIncrementTick+0x220>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	4a36      	ldr	r2, [pc, #216]	; (8003044 <xTaskIncrementTick+0x220>)
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	4935      	ldr	r1, [pc, #212]	; (8003048 <xTaskIncrementTick+0x224>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	3204      	adds	r2, #4
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	1d1a      	adds	r2, r3, #4
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4a26      	ldr	r2, [pc, #152]	; (8003048 <xTaskIncrementTick+0x224>)
 8002fb0:	441a      	add	r2, r3
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fba:	4923      	ldr	r1, [pc, #140]	; (8003048 <xTaskIncrementTick+0x224>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	1c59      	adds	r1, r3, #1
 8002fca:	481f      	ldr	r0, [pc, #124]	; (8003048 <xTaskIncrementTick+0x224>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4403      	add	r3, r0
 8002fd6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <xTaskIncrementTick+0x228>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f67f af59 	bls.w	8002e9a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fec:	e755      	b.n	8002e9a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <xTaskIncrementTick+0x228>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	4914      	ldr	r1, [pc, #80]	; (8003048 <xTaskIncrementTick+0x224>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d901      	bls.n	800300a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003006:	2301      	movs	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <xTaskIncrementTick+0x22c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003012:	2301      	movs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e004      	b.n	8003022 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <xTaskIncrementTick+0x230>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <xTaskIncrementTick+0x230>)
 8003020:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003024:	4618      	mov	r0, r3
 8003026:	3728      	adds	r7, #40	; 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	2000022c 	.word	0x2000022c
 8003030:	20000208 	.word	0x20000208
 8003034:	200001bc 	.word	0x200001bc
 8003038:	200001c0 	.word	0x200001c0
 800303c:	2000021c 	.word	0x2000021c
 8003040:	20000224 	.word	0x20000224
 8003044:	2000020c 	.word	0x2000020c
 8003048:	20000130 	.word	0x20000130
 800304c:	2000012c 	.word	0x2000012c
 8003050:	20000218 	.word	0x20000218
 8003054:	20000214 	.word	0x20000214

08003058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <vTaskSwitchContext+0xbc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <vTaskSwitchContext+0xc0>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800306c:	e04d      	b.n	800310a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <vTaskSwitchContext+0xc0>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <vTaskSwitchContext+0xc4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	f1c3 031f 	rsb	r3, r3, #31
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4925      	ldr	r1, [pc, #148]	; (8003120 <vTaskSwitchContext+0xc8>)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	607b      	str	r3, [r7, #4]
    }
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <vTaskSwitchContext+0x5a>
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <vTaskSwitchContext+0xc8>)
 80030c0:	4413      	add	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3308      	adds	r3, #8
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d104      	bne.n	80030e4 <vTaskSwitchContext+0x8c>
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4a0e      	ldr	r2, [pc, #56]	; (8003124 <vTaskSwitchContext+0xcc>)
 80030ec:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <vTaskSwitchContext+0xcc>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <vTaskSwitchContext+0xd0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d102      	bne.n	8003100 <vTaskSwitchContext+0xa8>
 80030fa:	f003 fc37 	bl	800696c <SEGGER_SYSVIEW_OnIdle>
}
 80030fe:	e004      	b.n	800310a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <vTaskSwitchContext+0xcc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f003 fc8f 	bl	8006a28 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000022c 	.word	0x2000022c
 8003118:	20000218 	.word	0x20000218
 800311c:	2000020c 	.word	0x2000020c
 8003120:	20000130 	.word	0x20000130
 8003124:	2000012c 	.word	0x2000012c
 8003128:	20000228 	.word	0x20000228

0800312c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60fb      	str	r3, [r7, #12]
    }
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <vTaskPlaceOnEventList+0x44>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3318      	adds	r3, #24
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe ffb5 	bl	80020ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003160:	2101      	movs	r1, #1
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	f000 fa7e 	bl	8003664 <prvAddCurrentTaskToDelayedList>
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000012c 	.word	0x2000012c

08003174 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	613b      	str	r3, [r7, #16]
    }
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	61da      	str	r2, [r3, #28]
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6892      	ldr	r2, [r2, #8]
 80031b2:	621a      	str	r2, [r3, #32]
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	3218      	adds	r2, #24
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f103 0218 	add.w	r2, r3, #24
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80031ea:	2024      	movs	r0, #36	; 0x24
 80031ec:	f002 febe 	bl	8005f6c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	68b8      	ldr	r0, [r7, #8]
 80031f4:	f000 fa36 	bl	8003664 <prvAddCurrentTaskToDelayedList>
    }
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	2000012c 	.word	0x2000012c

08003204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60fb      	str	r3, [r7, #12]
    }
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	6a12      	ldr	r2, [r2, #32]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	69d2      	ldr	r2, [r2, #28]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	3318      	adds	r3, #24
 8003252:	429a      	cmp	r2, r3
 8003254:	d103      	bne.n	800325e <xTaskRemoveFromEventList+0x5a>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2200      	movs	r2, #0
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <xTaskRemoveFromEventList+0x198>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d162      	bne.n	800333c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	68d2      	ldr	r2, [r2, #12]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	6892      	ldr	r2, [r2, #8]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	3304      	adds	r3, #4
 8003298:	429a      	cmp	r2, r3
 800329a:	d103      	bne.n	80032a4 <xTaskRemoveFromEventList+0xa0>
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2200      	movs	r2, #0
 80032a8:	615a      	str	r2, [r3, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1e5a      	subs	r2, r3, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fbf8 	bl	8006aac <SEGGER_SYSVIEW_OnTaskStartReady>
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <xTaskRemoveFromEventList+0x19c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	4a35      	ldr	r2, [pc, #212]	; (80033a0 <xTaskRemoveFromEventList+0x19c>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4934      	ldr	r1, [pc, #208]	; (80033a4 <xTaskRemoveFromEventList+0x1a0>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3304      	adds	r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	3204      	adds	r2, #4
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <xTaskRemoveFromEventList+0x1a0>)
 8003312:	441a      	add	r2, r3
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	615a      	str	r2, [r3, #20]
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	4921      	ldr	r1, [pc, #132]	; (80033a4 <xTaskRemoveFromEventList+0x1a0>)
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1c59      	adds	r1, r3, #1
 800332c:	481d      	ldr	r0, [pc, #116]	; (80033a4 <xTaskRemoveFromEventList+0x1a0>)
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4403      	add	r3, r0
 8003338:	6019      	str	r1, [r3, #0]
 800333a:	e01b      	b.n	8003374 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	61da      	str	r2, [r3, #28]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	621a      	str	r2, [r3, #32]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	3218      	adds	r2, #24
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f103 0218 	add.w	r2, r3, #24
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 8003372:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <xTaskRemoveFromEventList+0x1a8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d905      	bls.n	800338e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <xTaskRemoveFromEventList+0x1ac>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e001      	b.n	8003392 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	; 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000022c 	.word	0x2000022c
 80033a0:	2000020c 	.word	0x2000020c
 80033a4:	20000130 	.word	0x20000130
 80033a8:	200001c4 	.word	0x200001c4
 80033ac:	2000012c 	.word	0x2000012c
 80033b0:	20000218 	.word	0x20000218

080033b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <vTaskInternalSetTimeOutState+0x24>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <vTaskInternalSetTimeOutState+0x28>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	605a      	str	r2, [r3, #4]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	2000021c 	.word	0x2000021c
 80033dc:	20000208 	.word	0x20000208

080033e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	613b      	str	r3, [r7, #16]
    }
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
    }
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003422:	f000 fdcf 	bl	8003fc4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003426:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <xTaskCheckForTimeOut+0xc4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d102      	bne.n	8003446 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e026      	b.n	8003494 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <xTaskCheckForTimeOut+0xc8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d00a      	beq.n	8003468 <xTaskCheckForTimeOut+0x88>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	429a      	cmp	r2, r3
 800345a:	d305      	bcc.n	8003468 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e015      	b.n	8003494 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20b      	bcs.n	800348a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	1ad2      	subs	r2, r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ff98 	bl	80033b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e004      	b.n	8003494 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003494:	f000 fdc6 	bl	8004024 <vPortExitCritical>

    return xReturn;
 8003498:	69fb      	ldr	r3, [r7, #28]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000208 	.word	0x20000208
 80034a8:	2000021c 	.word	0x2000021c

080034ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <vTaskMissedYield+0x14>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000218 	.word	0x20000218

080034c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034cc:	f000 f852 	bl	8003574 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <prvIdleTask+0x28>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d9f9      	bls.n	80034cc <prvIdleTask+0x8>
            {
                taskYIELD();
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <prvIdleTask+0x2c>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80034e8:	e7f0      	b.n	80034cc <prvIdleTask+0x8>
 80034ea:	bf00      	nop
 80034ec:	20000130 	.word	0x20000130
 80034f0:	e000ed04 	.word	0xe000ed04

080034f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	e00c      	b.n	800351a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <prvInitialiseTaskLists+0x60>)
 800350c:	4413      	add	r3, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fdae 	bl	8002070 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d9ef      	bls.n	8003500 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003520:	480d      	ldr	r0, [pc, #52]	; (8003558 <prvInitialiseTaskLists+0x64>)
 8003522:	f7fe fda5 	bl	8002070 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003526:	480d      	ldr	r0, [pc, #52]	; (800355c <prvInitialiseTaskLists+0x68>)
 8003528:	f7fe fda2 	bl	8002070 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800352c:	480c      	ldr	r0, [pc, #48]	; (8003560 <prvInitialiseTaskLists+0x6c>)
 800352e:	f7fe fd9f 	bl	8002070 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003532:	480c      	ldr	r0, [pc, #48]	; (8003564 <prvInitialiseTaskLists+0x70>)
 8003534:	f7fe fd9c 	bl	8002070 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <prvInitialiseTaskLists+0x74>)
 800353a:	f7fe fd99 	bl	8002070 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <prvInitialiseTaskLists+0x78>)
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <prvInitialiseTaskLists+0x64>)
 8003542:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <prvInitialiseTaskLists+0x7c>)
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <prvInitialiseTaskLists+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000130 	.word	0x20000130
 8003558:	20000194 	.word	0x20000194
 800355c:	200001a8 	.word	0x200001a8
 8003560:	200001c4 	.word	0x200001c4
 8003564:	200001d8 	.word	0x200001d8
 8003568:	200001f0 	.word	0x200001f0
 800356c:	200001bc 	.word	0x200001bc
 8003570:	200001c0 	.word	0x200001c0

08003574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800357a:	e019      	b.n	80035b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800357c:	f000 fd22 	bl	8003fc4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <prvCheckTasksWaitingTermination+0x50>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fdd5 	bl	800213c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <prvCheckTasksWaitingTermination+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <prvCheckTasksWaitingTermination+0x54>)
 800359a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 80035a4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80035a6:	f000 fd3d 	bl	8004024 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f810 	bl	80035d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e1      	bne.n	800357c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200001d8 	.word	0x200001d8
 80035c8:	20000204 	.word	0x20000204
 80035cc:	200001ec 	.word	0x200001ec

080035d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fed7 	bl	8004390 <vPortFree>
            vPortFree( pxTCB );
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fed4 	bl	8004390 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <prvResetNextTaskUnblockTime+0x30>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <prvResetNextTaskUnblockTime+0x34>)
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003606:	e005      	b.n	8003614 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <prvResetNextTaskUnblockTime+0x30>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <prvResetNextTaskUnblockTime+0x34>)
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	200001bc 	.word	0x200001bc
 8003624:	20000224 	.word	0x20000224

08003628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <xTaskGetSchedulerState+0x34>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003636:	2301      	movs	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e008      	b.n	800364e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <xTaskGetSchedulerState+0x38>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003644:	2302      	movs	r3, #2
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	e001      	b.n	800364e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800364e:	687b      	ldr	r3, [r7, #4]
    }
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	20000210 	.word	0x20000210
 8003660:	2000022c 	.word	0x2000022c

08003664 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003674:	4b35      	ldr	r3, [pc, #212]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3304      	adds	r3, #4
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fd5e 	bl	800213c <uxListRemove>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003686:	4b31      	ldr	r3, [pc, #196]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	2201      	movs	r2, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <prvAddCurrentTaskToDelayedList+0xec>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4013      	ands	r3, r2
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <prvAddCurrentTaskToDelayedList+0xec>)
 800369c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d124      	bne.n	80036f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d021      	beq.n	80036f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ac:	4b29      	ldr	r3, [pc, #164]	; (8003754 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	4b21      	ldr	r3, [pc, #132]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	3204      	adds	r2, #4
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1d1a      	adds	r2, r3, #4
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036e0:	615a      	str	r2, [r3, #20]
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80036ee:	e026      	b.n	800373e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	d209      	bcs.n	800371c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <prvAddCurrentTaskToDelayedList+0xf4>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f7fe fcd8 	bl	80020ca <vListInsert>
}
 800371a:	e010      	b.n	800373e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <prvAddCurrentTaskToDelayedList+0xf8>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe fcce 	bl	80020ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d202      	bcs.n	800373e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <prvAddCurrentTaskToDelayedList+0xfc>)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6013      	str	r3, [r2, #0]
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000208 	.word	0x20000208
 800374c:	2000012c 	.word	0x2000012c
 8003750:	2000020c 	.word	0x2000020c
 8003754:	200001f0 	.word	0x200001f0
 8003758:	200001c0 	.word	0x200001c0
 800375c:	200001bc 	.word	0x200001bc
 8003760:	20000224 	.word	0x20000224

08003764 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800376e:	f000 fa47 	bl	8003c00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <xTimerCreateTimerTask+0x54>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <xTimerCreateTimerTask+0x58>)
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2302      	movs	r3, #2
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003788:	490d      	ldr	r1, [pc, #52]	; (80037c0 <xTimerCreateTimerTask+0x5c>)
 800378a:	480e      	ldr	r0, [pc, #56]	; (80037c4 <xTimerCreateTimerTask+0x60>)
 800378c:	f7ff f830 	bl	80027f0 <xTaskCreate>
 8003790:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	603b      	str	r3, [r7, #0]
    }
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xTimerCreateTimerTask+0x48>
        return xReturn;
 80037ae:	687b      	ldr	r3, [r7, #4]
    }
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000260 	.word	0x20000260
 80037bc:	20000264 	.word	0x20000264
 80037c0:	08007854 	.word	0x08007854
 80037c4:	0800386d 	.word	0x0800386d

080037c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80037d4:	e008      	b.n	80037e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	18d1      	adds	r1, r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f8dd 	bl	80039b4 <prvInsertTimerInActiveList>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ea      	bne.n	80037d6 <prvReloadTimer+0xe>
        }
    }
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <prvProcessExpiredTimer+0x5c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3304      	adds	r3, #4
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fc89 	bl	800213c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff ffc3 	bl	80037c8 <prvReloadTimer>
 8003842:	e008      	b.n	8003856 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	4798      	blx	r3
    }
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000258 	.word	0x20000258

0800386c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003874:	f107 0308 	add.w	r3, r7, #8
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f857 	bl	800392c <prvGetNextExpireTime>
 800387e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4619      	mov	r1, r3
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f803 	bl	8003890 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800388a:	f000 f8d5 	bl	8003a38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800388e:	e7f1      	b.n	8003874 <prvTimerTask+0x8>

08003890 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800389a:	f7ff f993 	bl	8002bc4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f866 	bl	8003974 <prvSampleTimeNow>
 80038a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d130      	bne.n	8003912 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <prvProcessTimerOrBlockTask+0x3c>
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d806      	bhi.n	80038cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80038be:	f7ff f98f 	bl	8002be0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffa1 	bl	800380c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038ca:	e024      	b.n	8003916 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <prvProcessTimerOrBlockTask+0x90>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <prvProcessTimerOrBlockTask+0x50>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <prvProcessTimerOrBlockTask+0x52>
 80038e0:	2300      	movs	r3, #0
 80038e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <prvProcessTimerOrBlockTask+0x94>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	f7fe ff49 	bl	8002788 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80038f6:	f7ff f973 	bl	8002be0 <xTaskResumeAll>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <prvProcessTimerOrBlockTask+0x98>)
 8003902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	f3bf 8f6f 	isb	sy
    }
 8003910:	e001      	b.n	8003916 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003912:	f7ff f965 	bl	8002be0 <xTaskResumeAll>
    }
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	2000025c 	.word	0x2000025c
 8003924:	20000260 	.word	0x20000260
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <prvGetNextExpireTime+0x44>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <prvGetNextExpireTime+0x16>
 800393e:	2201      	movs	r2, #1
 8003940:	e000      	b.n	8003944 <prvGetNextExpireTime+0x18>
 8003942:	2200      	movs	r2, #0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <prvGetNextExpireTime+0x44>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e001      	b.n	8003960 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003960:	68fb      	ldr	r3, [r7, #12]
    }
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000258 	.word	0x20000258

08003974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800397c:	f7ff fa30 	bl	8002de0 <xTaskGetTickCount>
 8003980:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <prvSampleTimeNow+0x3c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d205      	bcs.n	8003998 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800398c:	f000 f912 	bl	8003bb4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e002      	b.n	800399e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <prvSampleTimeNow+0x3c>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039a4:	68fb      	ldr	r3, [r7, #12]
    }
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000268 	.word	0x20000268

080039b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d812      	bhi.n	8003a00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e01b      	b.n	8003a26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <prvInsertTimerInActiveList+0x7c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7fe fb66 	bl	80020ca <vListInsert>
 80039fe:	e012      	b.n	8003a26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d206      	bcs.n	8003a16 <prvInsertTimerInActiveList+0x62>
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e007      	b.n	8003a26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a16:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <prvInsertTimerInActiveList+0x80>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7fe fb52 	bl	80020ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a26:	697b      	ldr	r3, [r7, #20]
    }
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000025c 	.word	0x2000025c
 8003a34:	20000258 	.word	0x20000258

08003a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a3e:	e0a6      	b.n	8003b8e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f2c0 80a2 	blt.w	8003b8c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fb6f 	bl	800213c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff87 	bl	8003974 <prvSampleTimeNow>
 8003a66:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 808e 	bhi.w	8003b8e <prvProcessReceivedCommands+0x156>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <prvProcessReceivedCommands+0x40>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003a9d 	.word	0x08003a9d
 8003a80:	08003b05 	.word	0x08003b05
 8003a84:	08003b19 	.word	0x08003b19
 8003a88:	08003b63 	.word	0x08003b63
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003a9d 	.word	0x08003a9d
 8003a94:	08003b05 	.word	0x08003b05
 8003a98:	08003b19 	.word	0x08003b19
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	18d1      	adds	r1, r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	69f8      	ldr	r0, [r7, #28]
 8003abc:	f7ff ff7a 	bl	80039b4 <prvInsertTimerInActiveList>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d063      	beq.n	8003b8e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	4413      	add	r3, r2
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	69f8      	ldr	r0, [r7, #28]
 8003ae2:	f7ff fe71 	bl	80037c8 <prvReloadTimer>
 8003ae6:	e008      	b.n	8003afa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	69f8      	ldr	r0, [r7, #28]
 8003b00:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b02:	e044      	b.n	8003b8e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b16:	e03a      	b.n	8003b8e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	617b      	str	r3, [r7, #20]
    }
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	18d1      	adds	r1, r2, r3
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	69f8      	ldr	r0, [r7, #28]
 8003b5c:	f7ff ff2a 	bl	80039b4 <prvInsertTimerInActiveList>
                        break;
 8003b60:	e015      	b.n	8003b8e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003b70:	69f8      	ldr	r0, [r7, #28]
 8003b72:	f000 fc0d 	bl	8004390 <vPortFree>
 8003b76:	e00a      	b.n	8003b8e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b8a:	e000      	b.n	8003b8e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003b8c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <prvProcessReceivedCommands+0x178>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f107 0108 	add.w	r1, r7, #8
 8003b96:	2200      	movs	r2, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fc01 	bl	80023a0 <xQueueReceive>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f af4d 	bne.w	8003a40 <prvProcessReceivedCommands+0x8>
        }
    }
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000260 	.word	0x20000260

08003bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bba:	e009      	b.n	8003bd0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <prvSwitchTimerLists+0x44>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f7ff fe1e 	bl	800380c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <prvSwitchTimerLists+0x44>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <prvSwitchTimerLists+0x44>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <prvSwitchTimerLists+0x48>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <prvSwitchTimerLists+0x44>)
 8003be6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <prvSwitchTimerLists+0x48>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
    }
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000258 	.word	0x20000258
 8003bfc:	2000025c 	.word	0x2000025c

08003c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c04:	f000 f9de 	bl	8003fc4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <prvCheckForValidListAndQueue+0x54>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11d      	bne.n	8003c4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c10:	4811      	ldr	r0, [pc, #68]	; (8003c58 <prvCheckForValidListAndQueue+0x58>)
 8003c12:	f7fe fa2d 	bl	8002070 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c16:	4811      	ldr	r0, [pc, #68]	; (8003c5c <prvCheckForValidListAndQueue+0x5c>)
 8003c18:	f7fe fa2a 	bl	8002070 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <prvCheckForValidListAndQueue+0x60>)
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <prvCheckForValidListAndQueue+0x58>)
 8003c20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <prvCheckForValidListAndQueue+0x64>)
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <prvCheckForValidListAndQueue+0x5c>)
 8003c26:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c28:	2200      	movs	r2, #0
 8003c2a:	210c      	movs	r1, #12
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	f7fe fb3f 	bl	80022b0 <xQueueGenericCreate>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <prvCheckForValidListAndQueue+0x54>)
 8003c36:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <prvCheckForValidListAndQueue+0x54>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <prvCheckForValidListAndQueue+0x54>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4908      	ldr	r1, [pc, #32]	; (8003c68 <prvCheckForValidListAndQueue+0x68>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fd48 	bl	80026dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c4c:	f000 f9ea 	bl	8004024 <vPortExitCritical>
    }
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000260 	.word	0x20000260
 8003c58:	20000230 	.word	0x20000230
 8003c5c:	20000244 	.word	0x20000244
 8003c60:	20000258 	.word	0x20000258
 8003c64:	2000025c 	.word	0x2000025c
 8003c68:	0800785c 	.word	0x0800785c

08003c6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b04      	subs	r3, #4
 8003c8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f023 0201 	bic.w	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3b04      	subs	r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <pxPortInitialiseStack+0x64>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3b14      	subs	r3, #20
 8003ca6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b04      	subs	r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f06f 0202 	mvn.w	r2, #2
 8003cba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3b20      	subs	r3, #32
 8003cc0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	08003cd5 	.word	0x08003cd5

08003cd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <prvTaskExitError+0x54>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d00a      	beq.n	8003cfe <prvTaskExitError+0x2a>
        __asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	60fb      	str	r3, [r7, #12]
    }
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <prvTaskExitError+0x28>
        __asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	60bb      	str	r3, [r7, #8]
    }
 8003d10:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d12:	bf00      	nop
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0fc      	beq.n	8003d14 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	20000010 	.word	0x20000010
 8003d2c:	00000000 	.word	0x00000000

08003d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <pxCurrentTCBConst2>)
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	6808      	ldr	r0, [r1, #0]
 8003d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3a:	f380 8809 	msr	PSP, r0
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f380 8811 	msr	BASEPRI, r0
 8003d4a:	4770      	bx	lr
 8003d4c:	f3af 8000 	nop.w

08003d50 <pxCurrentTCBConst2>:
 8003d50:	2000012c 	.word	0x2000012c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop

08003d58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d58:	4808      	ldr	r0, [pc, #32]	; (8003d7c <prvPortStartFirstTask+0x24>)
 8003d5a:	6800      	ldr	r0, [r0, #0]
 8003d5c:	6800      	ldr	r0, [r0, #0]
 8003d5e:	f380 8808 	msr	MSP, r0
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f380 8814 	msr	CONTROL, r0
 8003d6a:	b662      	cpsie	i
 8003d6c:	b661      	cpsie	f
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	df00      	svc	0
 8003d78:	bf00      	nop
 8003d7a:	0000      	.short	0x0000
 8003d7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop

08003d84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d8a:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <xPortStartScheduler+0x120>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a46      	ldr	r2, [pc, #280]	; (8003ea8 <xPortStartScheduler+0x124>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10a      	bne.n	8003daa <xPortStartScheduler+0x26>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	613b      	str	r3, [r7, #16]
    }
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <xPortStartScheduler+0x120>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a3f      	ldr	r2, [pc, #252]	; (8003eac <xPortStartScheduler+0x128>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10a      	bne.n	8003dca <xPortStartScheduler+0x46>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60fb      	str	r3, [r7, #12]
    }
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <xPortStartScheduler+0x12c>)
 8003dcc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	22ff      	movs	r2, #255	; 0xff
 8003dda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <xPortStartScheduler+0x130>)
 8003df0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003df8:	e009      	b.n	8003e0e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003e02:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d0ef      	beq.n	8003dfa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1c3 0307 	rsb	r3, r3, #7
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d00a      	beq.n	8003e3c <xPortStartScheduler+0xb8>
        __asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60bb      	str	r3, [r7, #8]
    }
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003e44:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <xPortStartScheduler+0x134>)
 8003e50:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <xPortStartScheduler+0x138>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <xPortStartScheduler+0x138>)
 8003e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <xPortStartScheduler+0x138>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <xPortStartScheduler+0x138>)
 8003e6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e72:	f000 f963 	bl	800413c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <xPortStartScheduler+0x13c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e7c:	f000 f982 	bl	8004184 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <xPortStartScheduler+0x140>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <xPortStartScheduler+0x140>)
 8003e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e8c:	f7ff ff64 	bl	8003d58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e90:	f7ff f8e2 	bl	8003058 <vTaskSwitchContext>
    prvTaskExitError();
 8003e94:	f7ff ff1e 	bl	8003cd4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000ed00 	.word	0xe000ed00
 8003ea8:	410fc271 	.word	0x410fc271
 8003eac:	410fc270 	.word	0x410fc270
 8003eb0:	e000e400 	.word	0xe000e400
 8003eb4:	2000026c 	.word	0x2000026c
 8003eb8:	20000270 	.word	0x20000270
 8003ebc:	e000ed20 	.word	0xe000ed20
 8003ec0:	20000010 	.word	0x20000010
 8003ec4:	e000ef34 	.word	0xe000ef34

08003ec8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ece:	4b37      	ldr	r3, [pc, #220]	; (8003fac <vInitPrioGroupValue+0xe4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a37      	ldr	r2, [pc, #220]	; (8003fb0 <vInitPrioGroupValue+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10a      	bne.n	8003eee <vInitPrioGroupValue+0x26>
        __asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	613b      	str	r3, [r7, #16]
    }
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <vInitPrioGroupValue+0xe4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a30      	ldr	r2, [pc, #192]	; (8003fb4 <vInitPrioGroupValue+0xec>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10a      	bne.n	8003f0e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60fb      	str	r3, [r7, #12]
    }
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <vInitPrioGroupValue+0xf0>)
 8003f10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <vInitPrioGroupValue+0xf4>)
 8003f34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f36:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f3c:	e009      	b.n	8003f52 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d0ef      	beq.n	8003f3e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1c3 0307 	rsb	r3, r3, #7
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d00a      	beq.n	8003f80 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
    }
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f80:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f88:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f92:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <vInitPrioGroupValue+0xf8>)
 8003f94:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000ed00 	.word	0xe000ed00
 8003fb0:	410fc271 	.word	0x410fc271
 8003fb4:	410fc270 	.word	0x410fc270
 8003fb8:	e000e400 	.word	0xe000e400
 8003fbc:	2000026c 	.word	0x2000026c
 8003fc0:	20000270 	.word	0x20000270

08003fc4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
        __asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	607b      	str	r3, [r7, #4]
    }
 8003fdc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <vPortEnterCritical+0x58>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <vPortEnterCritical+0x58>)
 8003fe6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <vPortEnterCritical+0x58>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10f      	bne.n	8004010 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <vPortEnterCritical+0x5c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <vPortEnterCritical+0x4c>
        __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	603b      	str	r3, [r7, #0]
    }
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <vPortEnterCritical+0x4a>
    }
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	20000010 	.word	0x20000010
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <vPortExitCritical+0x50>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <vPortExitCritical+0x24>
        __asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	607b      	str	r3, [r7, #4]
    }
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <vPortExitCritical+0x50>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <vPortExitCritical+0x50>)
 8004050:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <vPortExitCritical+0x50>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <vPortExitCritical+0x42>
 800405a:	2300      	movs	r3, #0
 800405c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004064:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000010 	.word	0x20000010
	...

08004080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f01e 0f10 	tst.w	lr, #16
 8004090:	bf08      	it	eq
 8004092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040a4:	f380 8811 	msr	BASEPRI, r0
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f7fe ffd2 	bl	8003058 <vTaskSwitchContext>
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f380 8811 	msr	BASEPRI, r0
 80040bc:	bc09      	pop	{r0, r3}
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c6:	f01e 0f10 	tst.w	lr, #16
 80040ca:	bf08      	it	eq
 80040cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040d0:	f380 8809 	msr	PSP, r0
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst>:
 80040e0:	2000012c 	.word	0x2000012c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
        __asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
    }
 8004100:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004102:	f002 fbb9 	bl	8006878 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004106:	f7fe fe8d 	bl	8002e24 <xTaskIncrementTick>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004110:	f002 fc10 	bl	8006934 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <SysTick_Handler+0x50>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e001      	b.n	8004122 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800411e:	f002 fbed 	bl	80068fc <SEGGER_SYSVIEW_RecordExitISR>
 8004122:	2300      	movs	r3, #0
 8004124:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f383 8811 	msr	BASEPRI, r3
    }
 800412c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <vPortSetupTimerInterrupt+0x34>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <vPortSetupTimerInterrupt+0x38>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <vPortSetupTimerInterrupt+0x3c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <vPortSetupTimerInterrupt+0x40>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	099b      	lsrs	r3, r3, #6
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <vPortSetupTimerInterrupt+0x44>)
 800415a:	3b01      	subs	r3, #1
 800415c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <vPortSetupTimerInterrupt+0x34>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000e010 	.word	0xe000e010
 8004174:	e000e018 	.word	0xe000e018
 8004178:	20000000 	.word	0x20000000
 800417c:	10624dd3 	.word	0x10624dd3
 8004180:	e000e014 	.word	0xe000e014

08004184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004194 <vPortEnableVFP+0x10>
 8004188:	6801      	ldr	r1, [r0, #0]
 800418a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800418e:	6001      	str	r1, [r0, #0]
 8004190:	4770      	bx	lr
 8004192:	0000      	.short	0x0000
 8004194:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop

0800419c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80041a2:	f3ef 8305 	mrs	r3, IPSR
 80041a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b0f      	cmp	r3, #15
 80041ac:	d914      	bls.n	80041d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <vPortValidateInterruptPriority+0x70>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <vPortValidateInterruptPriority+0x74>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	7afa      	ldrb	r2, [r7, #11]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d20a      	bcs.n	80041d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
    }
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <vPortValidateInterruptPriority+0x78>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <vPortValidateInterruptPriority+0x7c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d90a      	bls.n	80041fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	603b      	str	r3, [r7, #0]
    }
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <vPortValidateInterruptPriority+0x60>
    }
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000e3f0 	.word	0xe000e3f0
 8004210:	2000026c 	.word	0x2000026c
 8004214:	e000ed0c 	.word	0xe000ed0c
 8004218:	20000270 	.word	0x20000270

0800421c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004228:	f7fe fccc 	bl	8002bc4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <pvPortMalloc+0x160>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004234:	f000 f908 	bl	8004448 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d012      	beq.n	8004264 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800423e:	2208      	movs	r2, #8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	3308      	adds	r3, #8
 800424a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	43db      	mvns	r3, r3
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d804      	bhi.n	8004260 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e001      	b.n	8004264 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	db70      	blt.n	800434c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d06d      	beq.n	800434c <pvPortMalloc+0x130>
 8004270:	4b43      	ldr	r3, [pc, #268]	; (8004380 <pvPortMalloc+0x164>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d868      	bhi.n	800434c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <pvPortMalloc+0x168>)
 800427c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800427e:	4b41      	ldr	r3, [pc, #260]	; (8004384 <pvPortMalloc+0x168>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004284:	e004      	b.n	8004290 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d903      	bls.n	80042a2 <pvPortMalloc+0x86>
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f1      	bne.n	8004286 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <pvPortMalloc+0x160>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d04f      	beq.n	800434c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2208      	movs	r2, #8
 80042b2:	4413      	add	r3, r2
 80042b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1ad2      	subs	r2, r2, r3
 80042c6:	2308      	movs	r3, #8
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d91f      	bls.n	800430e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <pvPortMalloc+0xda>
        __asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	613b      	str	r3, [r7, #16]
    }
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	1ad2      	subs	r2, r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004308:	6978      	ldr	r0, [r7, #20]
 800430a:	f000 f8f9 	bl	8004500 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <pvPortMalloc+0x164>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <pvPortMalloc+0x164>)
 800431a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <pvPortMalloc+0x164>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <pvPortMalloc+0x16c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d203      	bcs.n	8004330 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <pvPortMalloc+0x164>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <pvPortMalloc+0x16c>)
 800432e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <pvPortMalloc+0x170>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a10      	ldr	r2, [pc, #64]	; (800438c <pvPortMalloc+0x170>)
 800434a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800434c:	f7fe fc48 	bl	8002be0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <pvPortMalloc+0x154>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60fb      	str	r3, [r7, #12]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <pvPortMalloc+0x152>
    return pvReturn;
 8004370:	69fb      	ldr	r3, [r7, #28]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3728      	adds	r7, #40	; 0x28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20012e7c 	.word	0x20012e7c
 8004380:	20012e80 	.word	0x20012e80
 8004384:	20012e74 	.word	0x20012e74
 8004388:	20012e84 	.word	0x20012e84
 800438c:	20012e88 	.word	0x20012e88

08004390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d049      	beq.n	8004436 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043a2:	2308      	movs	r3, #8
 80043a4:	425b      	negs	r3, r3
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4413      	add	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	db0a      	blt.n	80043ce <vPortFree+0x3e>
        __asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60fb      	str	r3, [r7, #12]
    }
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <vPortFree+0x5c>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60bb      	str	r3, [r7, #8]
    }
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0fdb      	lsrs	r3, r3, #31
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01c      	beq.n	8004436 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d118      	bne.n	8004436 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004410:	f7fe fbd8 	bl	8002bc4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <vPortFree+0xb0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4413      	add	r3, r2
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <vPortFree+0xb0>)
 8004420:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004422:	6938      	ldr	r0, [r7, #16]
 8004424:	f000 f86c 	bl	8004500 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <vPortFree+0xb4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a05      	ldr	r2, [pc, #20]	; (8004444 <vPortFree+0xb4>)
 8004430:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004432:	f7fe fbd5 	bl	8002be0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004436:	bf00      	nop
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20012e80 	.word	0x20012e80
 8004444:	20012e8c 	.word	0x20012e8c

08004448 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800444e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004452:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <prvHeapInit+0xa4>)
 8004456:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <prvHeapInit+0xa4>)
 8004478:	4413      	add	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004480:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <prvHeapInit+0xa8>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <prvHeapInit+0xa8>)
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004494:	2208      	movs	r2, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <prvHeapInit+0xac>)
 80044a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <prvHeapInit+0xac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <prvHeapInit+0xac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <prvHeapInit+0xac>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <prvHeapInit+0xb0>)
 80044d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a07      	ldr	r2, [pc, #28]	; (80044fc <prvHeapInit+0xb4>)
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	20000274 	.word	0x20000274
 80044f0:	20012e74 	.word	0x20012e74
 80044f4:	20012e7c 	.word	0x20012e7c
 80044f8:	20012e84 	.word	0x20012e84
 80044fc:	20012e80 	.word	0x20012e80

08004500 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004508:	4b28      	ldr	r3, [pc, #160]	; (80045ac <prvInsertBlockIntoFreeList+0xac>)
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e002      	b.n	8004514 <prvInsertBlockIntoFreeList+0x14>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d8f7      	bhi.n	800450e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4413      	add	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d108      	bne.n	8004542 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	441a      	add	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d118      	bne.n	8004588 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <prvInsertBlockIntoFreeList+0xb0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d00d      	beq.n	800457e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	441a      	add	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e008      	b.n	8004590 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e003      	b.n	8004590 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d002      	beq.n	800459e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20012e74 	.word	0x20012e74
 80045b0:	20012e7c 	.word	0x20012e7c

080045b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <_cbSendSystemDesc+0x14>)
 80045ba:	f002 f907 	bl	80067cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80045be:	4803      	ldr	r0, [pc, #12]	; (80045cc <_cbSendSystemDesc+0x18>)
 80045c0:	f002 f904 	bl	80067cc <SEGGER_SYSVIEW_SendSysDesc>
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	08007864 	.word	0x08007864
 80045cc:	080078a8 	.word	0x080078a8

080045d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80045de:	4a06      	ldr	r2, [pc, #24]	; (80045f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80045e0:	f001 fc70 	bl	8005ec4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80045e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80045e8:	f001 fcb0 	bl	8005f4c <SEGGER_SYSVIEW_SetRAMBase>
}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000000 	.word	0x20000000
 80045f4:	080045b5 	.word	0x080045b5
 80045f8:	0800793c 	.word	0x0800793c

080045fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	b085      	sub	sp, #20
 8004600:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e033      	b.n	8004670 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004608:	491e      	ldr	r1, [pc, #120]	; (8004684 <_cbSendTaskList+0x88>)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	491a      	ldr	r1, [pc, #104]	; (8004684 <_cbSendTaskList+0x88>)
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3304      	adds	r3, #4
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	4c16      	ldr	r4, [pc, #88]	; (8004684 <_cbSendTaskList+0x88>)
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4423      	add	r3, r4
 8004638:	3308      	adds	r3, #8
 800463a:	681c      	ldr	r4, [r3, #0]
 800463c:	4d11      	ldr	r5, [pc, #68]	; (8004684 <_cbSendTaskList+0x88>)
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	442b      	add	r3, r5
 800464a:	330c      	adds	r3, #12
 800464c:	681d      	ldr	r5, [r3, #0]
 800464e:	4e0d      	ldr	r6, [pc, #52]	; (8004684 <_cbSendTaskList+0x88>)
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4433      	add	r3, r6
 800465c:	3310      	adds	r3, #16
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	462b      	mov	r3, r5
 8004664:	4622      	mov	r2, r4
 8004666:	f000 f8bd 	bl	80047e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3301      	adds	r3, #1
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <_cbSendTaskList+0x8c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d3c6      	bcc.n	8004608 <_cbSendTaskList+0xc>
  }
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004684:	20012e90 	.word	0x20012e90
 8004688:	20012f30 	.word	0x20012f30

0800468c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800468c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004694:	f7fe fbb4 	bl	8002e00 <xTaskGetTickCountFromISR>
 8004698:	4603      	mov	r3, r0
 800469a:	2200      	movs	r2, #0
 800469c:	469a      	mov	sl, r3
 800469e:	4693      	mov	fp, r2
 80046a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80046a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	f04f 0a00 	mov.w	sl, #0
 80046b0:	f04f 0b00 	mov.w	fp, #0
 80046b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80046b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80046bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80046c0:	4652      	mov	r2, sl
 80046c2:	465b      	mov	r3, fp
 80046c4:	1a14      	subs	r4, r2, r0
 80046c6:	eb63 0501 	sbc.w	r5, r3, r1
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	00ab      	lsls	r3, r5, #2
 80046d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80046d8:	00a2      	lsls	r2, r4, #2
 80046da:	4614      	mov	r4, r2
 80046dc:	461d      	mov	r5, r3
 80046de:	eb14 0800 	adds.w	r8, r4, r0
 80046e2:	eb45 0901 	adc.w	r9, r5, r1
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046fa:	4690      	mov	r8, r2
 80046fc:	4699      	mov	r9, r3
 80046fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004702:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004714 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004722:	2205      	movs	r2, #5
 8004724:	492b      	ldr	r1, [pc, #172]	; (80047d4 <SYSVIEW_AddTask+0xc0>)
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f002 fbb6 	bl	8006e98 <memcmp>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d04b      	beq.n	80047ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b07      	cmp	r3, #7
 8004738:	d903      	bls.n	8004742 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800473a:	4828      	ldr	r0, [pc, #160]	; (80047dc <SYSVIEW_AddTask+0xc8>)
 800473c:	f002 faf8 	bl	8006d30 <SEGGER_SYSVIEW_Warn>
    return;
 8004740:	e044      	b.n	80047cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004742:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4926      	ldr	r1, [pc, #152]	; (80047e0 <SYSVIEW_AddTask+0xcc>)
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004756:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4921      	ldr	r1, [pc, #132]	; (80047e0 <SYSVIEW_AddTask+0xcc>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3304      	adds	r3, #4
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800476c:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	491b      	ldr	r1, [pc, #108]	; (80047e0 <SYSVIEW_AddTask+0xcc>)
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3308      	adds	r3, #8
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4916      	ldr	r1, [pc, #88]	; (80047e0 <SYSVIEW_AddTask+0xcc>)
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	330c      	adds	r3, #12
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4910      	ldr	r1, [pc, #64]	; (80047e0 <SYSVIEW_AddTask+0xcc>)
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3310      	adds	r3, #16
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <SYSVIEW_AddTask+0xc4>)
 80047b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f80e 	bl	80047e4 <SYSVIEW_SendTaskInfo>
 80047c8:	e000      	b.n	80047cc <SYSVIEW_AddTask+0xb8>
    return;
 80047ca:	bf00      	nop

}
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	080078b8 	.word	0x080078b8
 80047d8:	20012f30 	.word	0x20012f30
 80047dc:	080078c0 	.word	0x080078c0
 80047e0:	20012e90 	.word	0x20012e90

080047e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80047f2:	f107 0314 	add.w	r3, r7, #20
 80047f6:	2214      	movs	r2, #20
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f002 fb6a 	bl	8006ed4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4618      	mov	r0, r3
 800481a:	f001 fedf 	bl	80065dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800481e:	bf00      	nop
 8004820:	3728      	adds	r7, #40	; 0x28
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <__NVIC_EnableIRQ>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db0b      	blt.n	8004852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	4907      	ldr	r1, [pc, #28]	; (8004860 <__NVIC_EnableIRQ+0x38>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2001      	movs	r0, #1
 800484a:	fa00 f202 	lsl.w	r2, r0, r2
 800484e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e100 	.word	0xe000e100

08004864 <__NVIC_SetPriority>:
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	db0a      	blt.n	800488e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	490c      	ldr	r1, [pc, #48]	; (80048b0 <__NVIC_SetPriority+0x4c>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	440b      	add	r3, r1
 8004888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800488c:	e00a      	b.n	80048a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4908      	ldr	r1, [pc, #32]	; (80048b4 <__NVIC_SetPriority+0x50>)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	3b04      	subs	r3, #4
 800489c:	0112      	lsls	r2, r2, #4
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	440b      	add	r3, r1
 80048a2:	761a      	strb	r2, [r3, #24]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000e100 	.word	0xe000e100
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80048be:	f002 fa93 	bl	8006de8 <SEGGER_SYSVIEW_IsStarted>
 80048c2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80048ca:	f001 fd0b 	bl	80062e4 <SEGGER_SYSVIEW_Start>
  }
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <_cbOnUARTRx+0x3c>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d806      	bhi.n	80048f8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <_cbOnUARTRx+0x3c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <_cbOnUARTRx+0x3c>)
 80048f4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80048f6:	e009      	b.n	800490c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80048f8:	f7ff ffde 	bl	80048b8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <_cbOnUARTRx+0x3c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	2201      	movs	r2, #1
 8004906:	4619      	mov	r1, r3
 8004908:	f000 fb9c 	bl	8005044 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800490c:	bf00      	nop
}
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000014 	.word	0x20000014

08004918 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <_cbOnUARTTx+0x5c>)
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d80f      	bhi.n	8004948 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <_cbOnUARTTx+0x5c>)
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	461a      	mov	r2, r3
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <_cbOnUARTTx+0x60>)
 8004930:	5c9a      	ldrb	r2, [r3, r2]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <_cbOnUARTTx+0x5c>)
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	3301      	adds	r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <_cbOnUARTTx+0x5c>)
 8004940:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004946:	e00f      	b.n	8004968 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <_cbOnUARTTx+0x5c>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fa1b 	bl	8004d8c <SEGGER_RTT_ReadUpBufferNoLock>
 8004956:	4603      	mov	r3, r0
 8004958:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da02      	bge.n	8004966 <_cbOnUARTTx+0x4e>
    r = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e000      	b.n	8004968 <_cbOnUARTTx+0x50>
  }
Done:
 8004966:	bf00      	nop
  return r;
 8004968:	68fb      	ldr	r3, [r7, #12]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000014 	.word	0x20000014
 8004978:	08007944 	.word	0x08007944

0800497c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004984:	4a04      	ldr	r2, [pc, #16]	; (8004998 <SEGGER_UART_init+0x1c>)
 8004986:	4905      	ldr	r1, [pc, #20]	; (800499c <SEGGER_UART_init+0x20>)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f863 	bl	8004a54 <HIF_UART_Init>
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	080048d9 	.word	0x080048d9
 800499c:	08004919 	.word	0x08004919

080049a0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <USART2_IRQHandler+0x80>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d011      	beq.n	80049da <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <USART2_IRQHandler+0x84>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 030b 	and.w	r3, r3, #11
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d108      	bne.n	80049da <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <USART2_IRQHandler+0x88>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <USART2_IRQHandler+0x88>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	79fa      	ldrb	r2, [r7, #7]
 80049d6:	4610      	mov	r0, r2
 80049d8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01a      	beq.n	8004a1a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <USART2_IRQHandler+0x8c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <USART2_IRQHandler+0x8c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	1dfa      	adds	r2, r7, #7
 80049f2:	4610      	mov	r0, r2
 80049f4:	4798      	blx	r3
 80049f6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <USART2_IRQHandler+0x90>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <USART2_IRQHandler+0x90>)
 8004a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e006      	b.n	8004a1a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <USART2_IRQHandler+0x80>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004a10:	79fa      	ldrb	r2, [r7, #7]
 8004a12:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <USART2_IRQHandler+0x84>)
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e000      	b.n	8004a1a <USART2_IRQHandler+0x7a>
      return;
 8004a18:	bf00      	nop
    }
  }
}
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40004400 	.word	0x40004400
 8004a24:	40004404 	.word	0x40004404
 8004a28:	20012f34 	.word	0x20012f34
 8004a2c:	20012f38 	.word	0x20012f38
 8004a30:	4000440c 	.word	0x4000440c

08004a34 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	4000440c 	.word	0x4000440c

08004a54 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004a60:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <HIF_UART_Init+0xc8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HIF_UART_Init+0xc8>)
 8004a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HIF_UART_Init+0xcc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HIF_UART_Init+0xcc>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HIF_UART_Init+0xd0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a84:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004a8c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004a8e:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HIF_UART_Init+0xd0>)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004a94:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <HIF_UART_Init+0xd4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004aa8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <HIF_UART_Init+0xd4>)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HIF_UART_Init+0xd8>)
 8004ab2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004ab6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HIF_UART_Init+0xdc>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HIF_UART_Init+0xe0>)
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004aca:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <HIF_UART_Init+0xe4>)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	d302      	bcc.n	8004aea <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004ae4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004ae8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <HIF_UART_Init+0xe8>)
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004afa:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <HIF_UART_Init+0xec>)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004b00:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <HIF_UART_Init+0xf0>)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004b06:	2106      	movs	r1, #6
 8004b08:	2026      	movs	r0, #38	; 0x26
 8004b0a:	f7ff feab 	bl	8004864 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004b0e:	2026      	movs	r0, #38	; 0x26
 8004b10:	f7ff fe8a 	bl	8004828 <__NVIC_EnableIRQ>
}
 8004b14:	bf00      	nop
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023840 	.word	0x40023840
 8004b20:	40023830 	.word	0x40023830
 8004b24:	40020020 	.word	0x40020020
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	4000440c 	.word	0x4000440c
 8004b30:	40004410 	.word	0x40004410
 8004b34:	40004414 	.word	0x40004414
 8004b38:	0501bd00 	.word	0x0501bd00
 8004b3c:	40004408 	.word	0x40004408
 8004b40:	20012f34 	.word	0x20012f34
 8004b44:	20012f38 	.word	0x20012f38

08004b48 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <_DoInit+0xa0>)
 8004b50:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004b52:	22a8      	movs	r2, #168	; 0xa8
 8004b54:	2100      	movs	r1, #0
 8004b56:	6838      	ldr	r0, [r7, #0]
 8004b58:	f002 f9bc 	bl	8006ed4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2203      	movs	r2, #3
 8004b66:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	4a20      	ldr	r2, [pc, #128]	; (8004bec <_DoInit+0xa4>)
 8004b6c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <_DoInit+0xa8>)
 8004b72:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b7a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2200      	movs	r2, #0
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <_DoInit+0xa4>)
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <_DoInit+0xac>)
 8004b98:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004bb2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	e00c      	b.n	8004bd6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f1c3 030f 	rsb	r3, r3, #15
 8004bc2:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <_DoInit+0xb0>)
 8004bc4:	5cd1      	ldrb	r1, [r2, r3]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	460a      	mov	r2, r1
 8004bce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b0f      	cmp	r3, #15
 8004bda:	d9ef      	bls.n	8004bbc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004bdc:	f3bf 8f5f 	dmb	sy
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20012f3c 	.word	0x20012f3c
 8004bec:	08007910 	.word	0x08007910
 8004bf0:	20012fe4 	.word	0x20012fe4
 8004bf4:	200133e4 	.word	0x200133e4
 8004bf8:	08007948 	.word	0x08007948

08004bfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d905      	bls.n	8004c2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e007      	b.n	8004c3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	1acb      	subs	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf28      	it	cs
 8004c4a:	4613      	movcs	r3, r2
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bf28      	it	cs
 8004c56:	4613      	movcs	r3, r2
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f002 f925 	bl	8006eb8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	4413      	add	r3, r2
 8004c74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	4413      	add	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	4413      	add	r3, r2
 8004c8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d101      	bne.n	8004c9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1b2      	bne.n	8004c12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d911      	bls.n	8004cfe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6938      	ldr	r0, [r7, #16]
 8004cea:	f002 f8e5 	bl	8006eb8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004cfc:	e01f      	b.n	8004d3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	6938      	ldr	r0, [r7, #16]
 8004d12:	f002 f8d1 	bl	8006eb8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4413      	add	r3, r2
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6938      	ldr	r0, [r7, #16]
 8004d30:	f002 f8c2 	bl	8006eb8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	60da      	str	r2, [r3, #12]
}
 8004d3e:	bf00      	nop
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d808      	bhi.n	8004d74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad2      	subs	r2, r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e004      	b.n	8004d7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d7e:	697b      	ldr	r3, [r7, #20]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	; 0x30
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004d98:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004da6:	f7ff fecf 	bl	8004b48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4a37      	ldr	r2, [pc, #220]	; (8004e94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004db8:	4413      	add	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d92b      	bls.n	8004e30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bf28      	it	cs
 8004dea:	4613      	movcs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	4413      	add	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dfe:	f002 f85b 	bl	8006eb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	4413      	add	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d101      	bne.n	8004e30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	bf28      	it	cs
 8004e40:	4613      	movcs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d019      	beq.n	8004e7e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	4413      	add	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e5a:	f002 f82d 	bl	8006eb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3730      	adds	r7, #48	; 0x30
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20012f3c 	.word	0x20012f3c

08004e98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ea6:	623b      	str	r3, [r7, #32]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004eb2:	f7ff fe49 	bl	8004b48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3360      	adds	r3, #96	; 0x60
 8004ec2:	4a37      	ldr	r2, [pc, #220]	; (8004fa0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d92b      	bls.n	8004f3c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	bf28      	it	cs
 8004ef6:	4613      	movcs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	4413      	add	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0a:	f001 ffd5 	bl	8006eb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d101      	bne.n	8004f3c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bf28      	it	cs
 8004f4c:	4613      	movcs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d019      	beq.n	8004f8a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	4413      	add	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	6939      	ldr	r1, [r7, #16]
 8004f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f66:	f001 ffa7 	bl	8006eb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4413      	add	r3, r2
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3730      	adds	r7, #48	; 0x30
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20012f3c 	.word	0x20012f3c

08004fa4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	3360      	adds	r3, #96	; 0x60
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004fc2:	4413      	add	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d029      	beq.n	8005022 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d82e      	bhi.n	8005030 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d013      	beq.n	8005002 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004fda:	e029      	b.n	8005030 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fdc:	6978      	ldr	r0, [r7, #20]
 8004fde:	f7ff feb2 	bl	8004d46 <_GetAvailWriteSpace>
 8004fe2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d202      	bcs.n	8004ff2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004ff0:	e021      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff fe5b 	bl	8004cb6 <_WriteNoCheck>
    break;
 8005000:	e019      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff fe9f 	bl	8004d46 <_GetAvailWriteSpace>
 8005008:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4293      	cmp	r3, r2
 8005010:	bf28      	it	cs
 8005012:	4613      	movcs	r3, r2
 8005014:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	69b9      	ldr	r1, [r7, #24]
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff fe4b 	bl	8004cb6 <_WriteNoCheck>
    break;
 8005020:	e009      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7ff fde8 	bl	8004bfc <_WriteBlocking>
 800502c:	61f8      	str	r0, [r7, #28]
    break;
 800502e:	e002      	b.n	8005036 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
    break;
 8005034:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20012f3c 	.word	0x20012f3c

08005044 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800505e:	f7ff fd73 	bl	8004b48 <_DoInit>
  SEGGER_RTT_LOCK();
 8005062:	f3ef 8311 	mrs	r3, BASEPRI
 8005066:	f04f 0120 	mov.w	r1, #32
 800506a:	f381 8811 	msr	BASEPRI, r1
 800506e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ff95 	bl	8004fa4 <SEGGER_RTT_WriteDownBufferNoLock>
 800507a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20012f3c 	.word	0x20012f3c

08005090 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800509e:	4b3d      	ldr	r3, [pc, #244]	; (8005194 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80050ac:	f7ff fd4c 	bl	8004b48 <_DoInit>
  SEGGER_RTT_LOCK();
 80050b0:	f3ef 8311 	mrs	r3, BASEPRI
 80050b4:	f04f 0120 	mov.w	r1, #32
 80050b8:	f381 8811 	msr	BASEPRI, r1
 80050bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050be:	4b35      	ldr	r3, [pc, #212]	; (8005194 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	3304      	adds	r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	dbeb      	blt.n	80050c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80050ee:	e000      	b.n	80050f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80050f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	da3f      	bge.n	800517c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050fc:	6939      	ldr	r1, [r7, #16]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005110:	6939      	ldr	r1, [r7, #16]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	3304      	adds	r3, #4
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	3320      	adds	r3, #32
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	3328      	adds	r3, #40	; 0x28
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	332c      	adds	r3, #44	; 0x2c
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005176:	f3bf 8f5f 	dmb	sy
 800517a:	e002      	b.n	8005182 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005188:	69fb      	ldr	r3, [r7, #28]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20012f3c 	.word	0x20012f3c

08005198 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80051a6:	4b21      	ldr	r3, [pc, #132]	; (800522c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051b4:	f7ff fcc8 	bl	8004b48 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051b8:	4b1c      	ldr	r3, [pc, #112]	; (800522c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d82c      	bhi.n	800521c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80051c2:	f3ef 8311 	mrs	r3, BASEPRI
 80051c6:	f04f 0120 	mov.w	r1, #32
 80051ca:	f381 8811 	msr	BASEPRI, r1
 80051ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	3360      	adds	r3, #96	; 0x60
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00e      	beq.n	8005206 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2200      	movs	r2, #0
 8005204:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800520c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e002      	b.n	8005222 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800521c:	f04f 33ff 	mov.w	r3, #4294967295
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005224:	4618      	mov	r0, r3
 8005226:	3728      	adds	r7, #40	; 0x28
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20012f3c 	.word	0x20012f3c

08005230 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00f      	beq.n	8005266 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005246:	e002      	b.n	800524e <_EncodeStr+0x1e>
      Len++;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3301      	adds	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f6      	bne.n	8005248 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d901      	bls.n	8005266 <_EncodeStr+0x36>
      Len = Limit;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2bfe      	cmp	r3, #254	; 0xfe
 800526a:	d806      	bhi.n	800527a <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	60fa      	str	r2, [r7, #12]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e011      	b.n	800529e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	60fa      	str	r2, [r7, #12]
 8005280:	22ff      	movs	r2, #255	; 0xff
 8005282:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	60fa      	str	r2, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	0a19      	lsrs	r1, r3, #8
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	60fa      	str	r2, [r7, #12]
 800529a:	b2ca      	uxtb	r2, r1
 800529c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052a2:	e00a      	b.n	80052ba <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	1c53      	adds	r3, r2, #1
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	60f9      	str	r1, [r7, #12]
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
    n++;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3301      	adds	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d3f0      	bcc.n	80052a4 <_EncodeStr+0x74>
  }
  return pPayload;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3307      	adds	r3, #7
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052ee:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <_HandleIncomingPacket+0xdc>)
 80052f0:	7e1b      	ldrb	r3, [r3, #24]
 80052f2:	4618      	mov	r0, r3
 80052f4:	1cfb      	adds	r3, r7, #3
 80052f6:	2201      	movs	r2, #1
 80052f8:	4619      	mov	r1, r3
 80052fa:	f7ff fdcd 	bl	8004e98 <SEGGER_RTT_ReadNoLock>
 80052fe:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d052      	beq.n	80053ac <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	2b80      	cmp	r3, #128	; 0x80
 800530a:	d031      	beq.n	8005370 <_HandleIncomingPacket+0x88>
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	dc40      	bgt.n	8005392 <_HandleIncomingPacket+0xaa>
 8005310:	2b07      	cmp	r3, #7
 8005312:	dc15      	bgt.n	8005340 <_HandleIncomingPacket+0x58>
 8005314:	2b00      	cmp	r3, #0
 8005316:	dd3c      	ble.n	8005392 <_HandleIncomingPacket+0xaa>
 8005318:	3b01      	subs	r3, #1
 800531a:	2b06      	cmp	r3, #6
 800531c:	d839      	bhi.n	8005392 <_HandleIncomingPacket+0xaa>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <_HandleIncomingPacket+0x3c>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005347 	.word	0x08005347
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005353 	.word	0x08005353
 8005330:	08005359 	.word	0x08005359
 8005334:	0800535f 	.word	0x0800535f
 8005338:	08005365 	.word	0x08005365
 800533c:	0800536b 	.word	0x0800536b
 8005340:	2b7f      	cmp	r3, #127	; 0x7f
 8005342:	d035      	beq.n	80053b0 <_HandleIncomingPacket+0xc8>
 8005344:	e025      	b.n	8005392 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005346:	f000 ffcd 	bl	80062e4 <SEGGER_SYSVIEW_Start>
      break;
 800534a:	e036      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800534c:	f001 f886 	bl	800645c <SEGGER_SYSVIEW_Stop>
      break;
 8005350:	e033      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005352:	f001 fa5f 	bl	8006814 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005356:	e030      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005358:	f001 fa24 	bl	80067a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800535c:	e02d      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800535e:	f001 f8a3 	bl	80064a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005362:	e02a      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005364:	f001 fc92 	bl	8006c8c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005368:	e027      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800536a:	f001 fc71 	bl	8006c50 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800536e:	e024      	b.n	80053ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005370:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <_HandleIncomingPacket+0xdc>)
 8005372:	7e1b      	ldrb	r3, [r3, #24]
 8005374:	4618      	mov	r0, r3
 8005376:	1cfb      	adds	r3, r7, #3
 8005378:	2201      	movs	r2, #1
 800537a:	4619      	mov	r1, r3
 800537c:	f7ff fd8c 	bl	8004e98 <SEGGER_RTT_ReadNoLock>
 8005380:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	4618      	mov	r0, r3
 800538c:	f001 fbe0 	bl	8006b50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005390:	e010      	b.n	80053b4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	b25b      	sxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	da0e      	bge.n	80053b8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <_HandleIncomingPacket+0xdc>)
 800539c:	7e1b      	ldrb	r3, [r3, #24]
 800539e:	4618      	mov	r0, r3
 80053a0:	1cfb      	adds	r3, r7, #3
 80053a2:	2201      	movs	r2, #1
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7ff fd77 	bl	8004e98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053aa:	e005      	b.n	80053b8 <_HandleIncomingPacket+0xd0>
    }
  }
 80053ac:	bf00      	nop
 80053ae:	e004      	b.n	80053ba <_HandleIncomingPacket+0xd2>
      break;
 80053b0:	bf00      	nop
 80053b2:	e002      	b.n	80053ba <_HandleIncomingPacket+0xd2>
      break;
 80053b4:	bf00      	nop
 80053b6:	e000      	b.n	80053ba <_HandleIncomingPacket+0xd2>
      break;
 80053b8:	bf00      	nop
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200173fc 	.word	0x200173fc

080053c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ce:	2301      	movs	r3, #1
 80053d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	e00b      	b.n	80053fc <_TrySendOverflowPacket+0x34>
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	09db      	lsrs	r3, r3, #7
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005400:	d8f0      	bhi.n	80053e4 <_TrySendOverflowPacket+0x1c>
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005412:	4b26      	ldr	r3, [pc, #152]	; (80054ac <_TrySendOverflowPacket+0xe4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005418:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	e00b      	b.n	8005444 <_TrySendOverflowPacket+0x7c>
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	6279      	str	r1, [r7, #36]	; 0x24
 8005436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b7f      	cmp	r3, #127	; 0x7f
 8005448:	d8f0      	bhi.n	800542c <_TrySendOverflowPacket+0x64>
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	627a      	str	r2, [r7, #36]	; 0x24
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	4618      	mov	r0, r3
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	461a      	mov	r2, r3
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	4619      	mov	r1, r3
 800546c:	f7fa feb8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005470:	4603      	mov	r3, r0
 8005472:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005474:	f7ff fade 	bl	8004a34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800547e:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	3b01      	subs	r3, #1
 800548a:	b2da      	uxtb	r2, r3
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	e004      	b.n	800549c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	3301      	adds	r3, #1
 8005498:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <_TrySendOverflowPacket+0xe0>)
 800549a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800549c:	693b      	ldr	r3, [r7, #16]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3730      	adds	r7, #48	; 0x30
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200173fc 	.word	0x200173fc
 80054ac:	e0001004 	.word	0xe0001004

080054b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054bc:	4b96      	ldr	r3, [pc, #600]	; (8005718 <_SendPacket+0x268>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d010      	beq.n	80054e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054c4:	4b94      	ldr	r3, [pc, #592]	; (8005718 <_SendPacket+0x268>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8130 	beq.w	800572e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054ce:	4b92      	ldr	r3, [pc, #584]	; (8005718 <_SendPacket+0x268>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d109      	bne.n	80054ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054d6:	f7ff ff77 	bl	80053c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054da:	4b8f      	ldr	r3, [pc, #572]	; (8005718 <_SendPacket+0x268>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	f040 8127 	bne.w	8005732 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80054e4:	e001      	b.n	80054ea <_SendPacket+0x3a>
    goto Send;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <_SendPacket+0x3c>
Send:
 80054ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b1f      	cmp	r3, #31
 80054f0:	d809      	bhi.n	8005506 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80054f2:	4b89      	ldr	r3, [pc, #548]	; (8005718 <_SendPacket+0x268>)
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	f040 8118 	bne.w	8005736 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b17      	cmp	r3, #23
 800550a:	d807      	bhi.n	800551c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b01      	subs	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	e0c4      	b.n	80056a6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b7f      	cmp	r3, #127	; 0x7f
 8005528:	d912      	bls.n	8005550 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	09da      	lsrs	r2, r3, #7
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3b01      	subs	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	3a01      	subs	r2, #1
 8005542:	60fa      	str	r2, [r7, #12]
 8005544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e006      	b.n	800555e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b01      	subs	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b7e      	cmp	r3, #126	; 0x7e
 8005562:	d807      	bhi.n	8005574 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b01      	subs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e098      	b.n	80056a6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800557a:	d212      	bcs.n	80055a2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	09da      	lsrs	r2, r3, #7
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	3a01      	subs	r2, #1
 8005594:	60fa      	str	r2, [r7, #12]
 8005596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800559a:	b2da      	uxtb	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e081      	b.n	80056a6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a8:	d21d      	bcs.n	80055e6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	0b9a      	lsrs	r2, r3, #14
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	09db      	lsrs	r3, r3, #7
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	3a01      	subs	r2, #1
 80055c4:	60fa      	str	r2, [r7, #12]
 80055c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	3a01      	subs	r2, #1
 80055d8:	60fa      	str	r2, [r7, #12]
 80055da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e05f      	b.n	80056a6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ec:	d228      	bcs.n	8005640 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0d5a      	lsrs	r2, r3, #21
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0b9b      	lsrs	r3, r3, #14
 8005602:	b2db      	uxtb	r3, r3
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	3a01      	subs	r2, #1
 8005608:	60fa      	str	r2, [r7, #12]
 800560a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800560e:	b2da      	uxtb	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	b2db      	uxtb	r3, r3
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	3a01      	subs	r2, #1
 800561e:	60fa      	str	r2, [r7, #12]
 8005620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	3a01      	subs	r2, #1
 8005632:	60fa      	str	r2, [r7, #12]
 8005634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e032      	b.n	80056a6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	0f1a      	lsrs	r2, r3, #28
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0d5b      	lsrs	r3, r3, #21
 8005654:	b2db      	uxtb	r3, r3
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	3a01      	subs	r2, #1
 800565a:	60fa      	str	r2, [r7, #12]
 800565c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0b9b      	lsrs	r3, r3, #14
 800566a:	b2db      	uxtb	r3, r3
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	3a01      	subs	r2, #1
 8005670:	60fa      	str	r2, [r7, #12]
 8005672:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	b2db      	uxtb	r3, r3
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	3a01      	subs	r2, #1
 8005686:	60fa      	str	r2, [r7, #12]
 8005688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	3a01      	subs	r2, #1
 800569a:	60fa      	str	r2, [r7, #12]
 800569c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056a6:	4b1d      	ldr	r3, [pc, #116]	; (800571c <_SendPacket+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <_SendPacket+0x268>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	e00b      	b.n	80056d8 <_SendPacket+0x228>
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	6279      	str	r1, [r7, #36]	; 0x24
 80056ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	09db      	lsrs	r3, r3, #7
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b7f      	cmp	r3, #127	; 0x7f
 80056dc:	d8f0      	bhi.n	80056c0 <_SendPacket+0x210>
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	627a      	str	r2, [r7, #36]	; 0x24
 80056e4:	6a3a      	ldr	r2, [r7, #32]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <_SendPacket+0x268>)
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	4618      	mov	r0, r3
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	f7fa fd6f 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005702:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005704:	f7ff f996 	bl	8004a34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800570e:	4a02      	ldr	r2, [pc, #8]	; (8005718 <_SendPacket+0x268>)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	60d3      	str	r3, [r2, #12]
 8005714:	e010      	b.n	8005738 <_SendPacket+0x288>
 8005716:	bf00      	nop
 8005718:	200173fc 	.word	0x200173fc
 800571c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <_SendPacket+0x2d8>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	b2da      	uxtb	r2, r3
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <_SendPacket+0x2d8>)
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e004      	b.n	8005738 <_SendPacket+0x288>
    goto SendDone;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <_SendPacket+0x288>
      goto SendDone;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <_SendPacket+0x288>
      goto SendDone;
 8005736:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005738:	4b13      	ldr	r3, [pc, #76]	; (8005788 <_SendPacket+0x2d8>)
 800573a:	7e1b      	ldrb	r3, [r3, #24]
 800573c:	4619      	mov	r1, r3
 800573e:	4a13      	ldr	r2, [pc, #76]	; (800578c <_SendPacket+0x2dc>)
 8005740:	460b      	mov	r3, r1
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	440b      	add	r3, r1
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	336c      	adds	r3, #108	; 0x6c
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <_SendPacket+0x2d8>)
 8005750:	7e1b      	ldrb	r3, [r3, #24]
 8005752:	4618      	mov	r0, r3
 8005754:	490d      	ldr	r1, [pc, #52]	; (800578c <_SendPacket+0x2dc>)
 8005756:	4603      	mov	r3, r0
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4403      	add	r3, r0
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	440b      	add	r3, r1
 8005760:	3370      	adds	r3, #112	; 0x70
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d00b      	beq.n	8005780 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <_SendPacket+0x2d8>)
 800576a:	789b      	ldrb	r3, [r3, #2]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <_SendPacket+0x2d8>)
 8005772:	2201      	movs	r2, #1
 8005774:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005776:	f7ff fdb7 	bl	80052e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <_SendPacket+0x2d8>)
 800577c:	2200      	movs	r2, #0
 800577e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005780:	bf00      	nop
 8005782:	3728      	adds	r7, #40	; 0x28
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200173fc 	.word	0x200173fc
 800578c:	20012f3c 	.word	0x20012f3c

08005790 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3301      	adds	r3, #1
 80057a6:	2b80      	cmp	r3, #128	; 0x80
 80057a8:	d80a      	bhi.n	80057c0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6051      	str	r1, [r2, #4]
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d15a      	bne.n	800587e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	623b      	str	r3, [r7, #32]
 80057e8:	e00b      	b.n	8005802 <_StoreChar+0x72>
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	6279      	str	r1, [r7, #36]	; 0x24
 80057f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b7f      	cmp	r3, #127	; 0x7f
 8005806:	d8f0      	bhi.n	80057ea <_StoreChar+0x5a>
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	627a      	str	r2, [r7, #36]	; 0x24
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	e00b      	b.n	800583a <_StoreChar+0xaa>
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	1c59      	adds	r1, r3, #1
 800582a:	61f9      	str	r1, [r7, #28]
 800582c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	09db      	lsrs	r3, r3, #7
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b7f      	cmp	r3, #127	; 0x7f
 800583e:	d8f0      	bhi.n	8005822 <_StoreChar+0x92>
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	61fa      	str	r2, [r7, #28]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	221a      	movs	r2, #26
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fe29 	bl	80054b0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fd34 	bl	80052d0 <_PreparePacket>
 8005868:	4602      	mov	r2, r0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]
  }
}
 800587e:	bf00      	nop
 8005880:	3728      	adds	r7, #40	; 0x28
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800589a:	2301      	movs	r3, #1
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800589e:	2301      	movs	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058a2:	e007      	b.n	80058b4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	623b      	str	r3, [r7, #32]
    Width++;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3301      	adds	r3, #1
 80058b2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d2f3      	bcs.n	80058a4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d901      	bls.n	80058c8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11f      	bne.n	8005912 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01c      	beq.n	8005912 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <_PrintUnsigned+0x66>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <_PrintUnsigned+0x66>
        c = '0';
 80058e8:	2330      	movs	r3, #48	; 0x30
 80058ea:	76fb      	strb	r3, [r7, #27]
 80058ec:	e001      	b.n	80058f2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80058ee:	2320      	movs	r3, #32
 80058f0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058f2:	e007      	b.n	8005904 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	3b01      	subs	r3, #1
 80058f8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80058fa:	7efb      	ldrb	r3, [r7, #27]
 80058fc:	4619      	mov	r1, r3
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff ff46 	bl	8005790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <_PrintUnsigned+0x8a>
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	429a      	cmp	r2, r3
 8005910:	d3f0      	bcc.n	80058f4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d903      	bls.n	8005920 <_PrintUnsigned+0x98>
      NumDigits--;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	e009      	b.n	8005934 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	429a      	cmp	r2, r3
 8005930:	d200      	bcs.n	8005934 <_PrintUnsigned+0xac>
        break;
 8005932:	e005      	b.n	8005940 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800593e:	e7e8      	b.n	8005912 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <_PrintUnsigned+0x128>)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4619      	mov	r1, r3
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff ff14 	bl	8005790 <_StoreChar>
    Digit /= Base;
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e3      	bne.n	8005940 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005988:	e006      	b.n	8005998 <_PrintUnsigned+0x110>
        FieldWidth--;
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	3b01      	subs	r3, #1
 800598e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005990:	2120      	movs	r1, #32
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff fefc 	bl	8005790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <_PrintUnsigned+0x11e>
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d3f1      	bcc.n	800598a <_PrintUnsigned+0x102>
      }
    }
  }
}
 80059a6:	bf00      	nop
 80059a8:	3728      	adds	r7, #40	; 0x28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	08007968 	.word	0x08007968

080059b4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bfb8      	it	lt
 80059c8:	425b      	neglt	r3, r3
 80059ca:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059cc:	2301      	movs	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059d0:	e007      	b.n	80059e2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80059da:	613b      	str	r3, [r7, #16]
    Width++;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	3301      	adds	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	daf3      	bge.n	80059d2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d901      	bls.n	80059f6 <_PrintInt+0x42>
    Width = NumDigits;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <_PrintInt+0x5e>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db04      	blt.n	8005a0c <_PrintInt+0x58>
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <_PrintInt+0x5e>
    FieldWidth--;
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <_PrintInt+0x6e>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d016      	beq.n	8005a50 <_PrintInt+0x9c>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d111      	bne.n	8005a50 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a32:	e006      	b.n	8005a42 <_PrintInt+0x8e>
        FieldWidth--;
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a3a:	2120      	movs	r1, #32
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fea7 	bl	8005790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <_PrintInt+0x9c>
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3f1      	bcc.n	8005a34 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da07      	bge.n	8005a66 <_PrintInt+0xb2>
    v = -v;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	425b      	negs	r3, r3
 8005a5a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a5c:	212d      	movs	r1, #45	; 0x2d
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff fe96 	bl	8005790 <_StoreChar>
 8005a64:	e008      	b.n	8005a78 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a70:	212b      	movs	r1, #43	; 0x2b
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fe8c 	bl	8005790 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d019      	beq.n	8005ab6 <_PrintInt+0x102>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d114      	bne.n	8005ab6 <_PrintInt+0x102>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d111      	bne.n	8005ab6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00e      	beq.n	8005ab6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a98:	e006      	b.n	8005aa8 <_PrintInt+0xf4>
        FieldWidth--;
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005aa0:	2130      	movs	r1, #48	; 0x30
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff fe74 	bl	8005790 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <_PrintInt+0x102>
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d3f1      	bcc.n	8005a9a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff fedf 	bl	8005888 <_PrintUnsigned>
}
 8005aca:	bf00      	nop
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b098      	sub	sp, #96	; 0x60
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae4:	f04f 0120 	mov.w	r1, #32
 8005ae8:	f381 8811 	msr	BASEPRI, r1
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
 8005aee:	48b7      	ldr	r0, [pc, #732]	; (8005dcc <_VPrintTarget+0x2f8>)
 8005af0:	f7ff fbee 	bl	80052d0 <_PreparePacket>
 8005af4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005af6:	4bb5      	ldr	r3, [pc, #724]	; (8005dcc <_VPrintTarget+0x2f8>)
 8005af8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8183 	beq.w	8005e2a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b28:	2b25      	cmp	r3, #37	; 0x25
 8005b2a:	f040 8170 	bne.w	8005e0e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b42:	3b23      	subs	r3, #35	; 0x23
 8005b44:	2b0d      	cmp	r3, #13
 8005b46:	d83f      	bhi.n	8005bc8 <_VPrintTarget+0xf4>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <_VPrintTarget+0x7c>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005bb9 	.word	0x08005bb9
 8005b54:	08005bc9 	.word	0x08005bc9
 8005b58:	08005bc9 	.word	0x08005bc9
 8005b5c:	08005bc9 	.word	0x08005bc9
 8005b60:	08005bc9 	.word	0x08005bc9
 8005b64:	08005bc9 	.word	0x08005bc9
 8005b68:	08005bc9 	.word	0x08005bc9
 8005b6c:	08005bc9 	.word	0x08005bc9
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005bc9 	.word	0x08005bc9
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005bc9 	.word	0x08005bc9
 8005b80:	08005bc9 	.word	0x08005bc9
 8005b84:	08005b99 	.word	0x08005b99
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e01a      	b.n	8005bce <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9a:	f043 0302 	orr.w	r3, r3, #2
 8005b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e012      	b.n	8005bce <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e00a      	b.n	8005bce <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bba:	f043 0308 	orr.w	r3, r3, #8
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e002      	b.n	8005bce <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
 8005bcc:	bf00      	nop
        }
      } while (v);
 8005bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1b0      	bne.n	8005b36 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005be4:	2b2f      	cmp	r3, #47	; 0x2f
 8005be6:	d912      	bls.n	8005c0e <_VPrintTarget+0x13a>
 8005be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bec:	2b39      	cmp	r3, #57	; 0x39
 8005bee:	d80e      	bhi.n	8005c0e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	461a      	mov	r2, r3
 8005c02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c06:	4413      	add	r3, r2
 8005c08:	3b30      	subs	r3, #48	; 0x30
 8005c0a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c0c:	e7e4      	b.n	8005bd8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c20:	d11d      	bne.n	8005c5e <_VPrintTarget+0x18a>
        sFormat++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c34:	2b2f      	cmp	r3, #47	; 0x2f
 8005c36:	d912      	bls.n	8005c5e <_VPrintTarget+0x18a>
 8005c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c3c:	2b39      	cmp	r3, #57	; 0x39
 8005c3e:	d80e      	bhi.n	8005c5e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	461a      	mov	r2, r3
 8005c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c56:	4413      	add	r3, r2
 8005c58:	3b30      	subs	r3, #48	; 0x30
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005c5c:	e7e4      	b.n	8005c28 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c6a:	2b6c      	cmp	r3, #108	; 0x6c
 8005c6c:	d003      	beq.n	8005c76 <_VPrintTarget+0x1a2>
 8005c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c72:	2b68      	cmp	r3, #104	; 0x68
 8005c74:	d107      	bne.n	8005c86 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c84:	e7ef      	b.n	8005c66 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c8a:	2b25      	cmp	r3, #37	; 0x25
 8005c8c:	f000 80b3 	beq.w	8005df6 <_VPrintTarget+0x322>
 8005c90:	2b25      	cmp	r3, #37	; 0x25
 8005c92:	f2c0 80b7 	blt.w	8005e04 <_VPrintTarget+0x330>
 8005c96:	2b78      	cmp	r3, #120	; 0x78
 8005c98:	f300 80b4 	bgt.w	8005e04 <_VPrintTarget+0x330>
 8005c9c:	2b58      	cmp	r3, #88	; 0x58
 8005c9e:	f2c0 80b1 	blt.w	8005e04 <_VPrintTarget+0x330>
 8005ca2:	3b58      	subs	r3, #88	; 0x58
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	f200 80ad 	bhi.w	8005e04 <_VPrintTarget+0x330>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <_VPrintTarget+0x1dc>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005da7 	.word	0x08005da7
 8005cb4:	08005e05 	.word	0x08005e05
 8005cb8:	08005e05 	.word	0x08005e05
 8005cbc:	08005e05 	.word	0x08005e05
 8005cc0:	08005e05 	.word	0x08005e05
 8005cc4:	08005e05 	.word	0x08005e05
 8005cc8:	08005e05 	.word	0x08005e05
 8005ccc:	08005e05 	.word	0x08005e05
 8005cd0:	08005e05 	.word	0x08005e05
 8005cd4:	08005e05 	.word	0x08005e05
 8005cd8:	08005e05 	.word	0x08005e05
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d5b 	.word	0x08005d5b
 8005ce4:	08005e05 	.word	0x08005e05
 8005ce8:	08005e05 	.word	0x08005e05
 8005cec:	08005e05 	.word	0x08005e05
 8005cf0:	08005e05 	.word	0x08005e05
 8005cf4:	08005e05 	.word	0x08005e05
 8005cf8:	08005e05 	.word	0x08005e05
 8005cfc:	08005e05 	.word	0x08005e05
 8005d00:	08005e05 	.word	0x08005e05
 8005d04:	08005e05 	.word	0x08005e05
 8005d08:	08005e05 	.word	0x08005e05
 8005d0c:	08005e05 	.word	0x08005e05
 8005d10:	08005dd1 	.word	0x08005dd1
 8005d14:	08005e05 	.word	0x08005e05
 8005d18:	08005e05 	.word	0x08005e05
 8005d1c:	08005e05 	.word	0x08005e05
 8005d20:	08005e05 	.word	0x08005e05
 8005d24:	08005d81 	.word	0x08005d81
 8005d28:	08005e05 	.word	0x08005e05
 8005d2c:	08005e05 	.word	0x08005e05
 8005d30:	08005da7 	.word	0x08005da7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	1d19      	adds	r1, r3, #4
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6011      	str	r1, [r2, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d48:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fd1c 	bl	8005790 <_StoreChar>
        break;
 8005d58:	e055      	b.n	8005e06 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	1d19      	adds	r1, r3, #4
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d68:	f107 0014 	add.w	r0, r7, #20
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d76:	220a      	movs	r2, #10
 8005d78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d7a:	f7ff fe1b 	bl	80059b4 <_PrintInt>
        break;
 8005d7e:	e042      	b.n	8005e06 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	1d19      	adds	r1, r3, #4
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d90:	f107 0014 	add.w	r0, r7, #20
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9e:	220a      	movs	r2, #10
 8005da0:	f7ff fd72 	bl	8005888 <_PrintUnsigned>
        break;
 8005da4:	e02f      	b.n	8005e06 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1d19      	adds	r1, r3, #4
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6011      	str	r1, [r2, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005db6:	f107 0014 	add.w	r0, r7, #20
 8005dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	f7ff fd5f 	bl	8005888 <_PrintUnsigned>
        break;
 8005dca:	e01c      	b.n	8005e06 <_VPrintTarget+0x332>
 8005dcc:	2001742c 	.word	0x2001742c
      case 'p':
        v = va_arg(*pParamList, int);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de0:	f107 0014 	add.w	r0, r7, #20
 8005de4:	2300      	movs	r3, #0
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	2308      	movs	r3, #8
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2308      	movs	r3, #8
 8005dee:	2210      	movs	r2, #16
 8005df0:	f7ff fd4a 	bl	8005888 <_PrintUnsigned>
        break;
 8005df4:	e007      	b.n	8005e06 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005df6:	f107 0314 	add.w	r3, r7, #20
 8005dfa:	2125      	movs	r1, #37	; 0x25
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fcc7 	bl	8005790 <_StoreChar>
        break;
 8005e02:	e000      	b.n	8005e06 <_VPrintTarget+0x332>
      default:
        break;
 8005e04:	bf00      	nop
      }
      sFormat++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e007      	b.n	8005e1e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e12:	f107 0314 	add.w	r3, r7, #20
 8005e16:	4611      	mov	r1, r2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fcb9 	bl	8005790 <_StoreChar>
    }
  } while (*sFormat);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f47f ae72 	bne.w	8005b0c <_VPrintTarget+0x38>
 8005e28:	e000      	b.n	8005e2c <_VPrintTarget+0x358>
      break;
 8005e2a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d041      	beq.n	8005eb6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e42:	e00b      	b.n	8005e5c <_VPrintTarget+0x388>
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	6439      	str	r1, [r7, #64]	; 0x40
 8005e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	09db      	lsrs	r3, r3, #7
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e60:	d8f0      	bhi.n	8005e44 <_VPrintTarget+0x370>
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	643a      	str	r2, [r7, #64]	; 0x40
 8005e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e70:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e76:	2300      	movs	r3, #0
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7a:	e00b      	b.n	8005e94 <_VPrintTarget+0x3c0>
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	2b7f      	cmp	r3, #127	; 0x7f
 8005e98:	d8f0      	bhi.n	8005e7c <_VPrintTarget+0x3a8>
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	69b9      	ldr	r1, [r7, #24]
 8005eae:	221a      	movs	r2, #26
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fafd 	bl	80054b0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005ebc:	bf00      	nop
 8005ebe:	3758      	adds	r7, #88	; 0x58
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ed8:	4917      	ldr	r1, [pc, #92]	; (8005f38 <SEGGER_SYSVIEW_Init+0x74>)
 8005eda:	4818      	ldr	r0, [pc, #96]	; (8005f3c <SEGGER_SYSVIEW_Init+0x78>)
 8005edc:	f7ff f8d8 	bl	8005090 <SEGGER_RTT_AllocUpBuffer>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ee6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eea:	785a      	ldrb	r2, [r3, #1]
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eee:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ef2:	7e1b      	ldrb	r3, [r3, #24]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2308      	movs	r3, #8
 8005efc:	4a11      	ldr	r2, [pc, #68]	; (8005f44 <SEGGER_SYSVIEW_Init+0x80>)
 8005efe:	490f      	ldr	r1, [pc, #60]	; (8005f3c <SEGGER_SYSVIEW_Init+0x78>)
 8005f00:	f7ff f94a 	bl	8005198 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <SEGGER_SYSVIEW_Init+0x84>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f10:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f12:	4a0b      	ldr	r2, [pc, #44]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f1e:	4a08      	ldr	r2, [pc, #32]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f24:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	200133f4 	.word	0x200133f4
 8005f3c:	0800791c 	.word	0x0800791c
 8005f40:	200173fc 	.word	0x200173fc
 8005f44:	200173f4 	.word	0x200173f4
 8005f48:	e0001004 	.word	0xe0001004

08005f4c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6113      	str	r3, [r2, #16]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	200173fc 	.word	0x200173fc

08005f6c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f74:	f3ef 8311 	mrs	r3, BASEPRI
 8005f78:	f04f 0120 	mov.w	r1, #32
 8005f7c:	f381 8811 	msr	BASEPRI, r1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	4808      	ldr	r0, [pc, #32]	; (8005fa4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f84:	f7ff f9a4 	bl	80052d0 <_PreparePacket>
 8005f88:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68b8      	ldr	r0, [r7, #8]
 8005f90:	f7ff fa8e 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f383 8811 	msr	BASEPRI, r3
}
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2001742c 	.word	0x2001742c

08005fa8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb6:	f04f 0120 	mov.w	r1, #32
 8005fba:	f381 8811 	msr	BASEPRI, r1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	4816      	ldr	r0, [pc, #88]	; (800601c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fc2:	f7ff f985 	bl	80052d0 <_PreparePacket>
 8005fc6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	e00b      	b.n	8005fee <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	1c59      	adds	r1, r3, #1
 8005fde:	61f9      	str	r1, [r7, #28]
 8005fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	09db      	lsrs	r3, r3, #7
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff2:	d8f0      	bhi.n	8005fd6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	61fa      	str	r2, [r7, #28]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	6938      	ldr	r0, [r7, #16]
 800600a:	f7ff fa51 	bl	80054b0 <_SendPacket>
  RECORD_END();
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f383 8811 	msr	BASEPRI, r3
}
 8006014:	bf00      	nop
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	2001742c 	.word	0x2001742c

08006020 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800602c:	f3ef 8311 	mrs	r3, BASEPRI
 8006030:	f04f 0120 	mov.w	r1, #32
 8006034:	f381 8811 	msr	BASEPRI, r1
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	4825      	ldr	r0, [pc, #148]	; (80060d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800603c:	f7ff f948 	bl	80052d0 <_PreparePacket>
 8006040:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
 800604e:	e00b      	b.n	8006068 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	b2da      	uxtb	r2, r3
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	1c59      	adds	r1, r3, #1
 8006058:	62f9      	str	r1, [r7, #44]	; 0x2c
 800605a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	09db      	lsrs	r3, r3, #7
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	2b7f      	cmp	r3, #127	; 0x7f
 800606c:	d8f0      	bhi.n	8006050 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	e00b      	b.n	80060a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	6279      	str	r1, [r7, #36]	; 0x24
 8006092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	09db      	lsrs	r3, r3, #7
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b7f      	cmp	r3, #127	; 0x7f
 80060a4:	d8f0      	bhi.n	8006088 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	627a      	str	r2, [r7, #36]	; 0x24
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	6979      	ldr	r1, [r7, #20]
 80060ba:	69b8      	ldr	r0, [r7, #24]
 80060bc:	f7ff f9f8 	bl	80054b0 <_SendPacket>
  RECORD_END();
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f383 8811 	msr	BASEPRI, r3
}
 80060c6:	bf00      	nop
 80060c8:	3730      	adds	r7, #48	; 0x30
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2001742c 	.word	0x2001742c

080060d4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08e      	sub	sp, #56	; 0x38
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060e2:	f3ef 8311 	mrs	r3, BASEPRI
 80060e6:	f04f 0120 	mov.w	r1, #32
 80060ea:	f381 8811 	msr	BASEPRI, r1
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	4832      	ldr	r0, [pc, #200]	; (80061bc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80060f2:	f7ff f8ed 	bl	80052d0 <_PreparePacket>
 80060f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
 8006104:	e00b      	b.n	800611e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	b2da      	uxtb	r2, r3
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	6379      	str	r1, [r7, #52]	; 0x34
 8006110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	09db      	lsrs	r3, r3, #7
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b7f      	cmp	r3, #127	; 0x7f
 8006122:	d8f0      	bhi.n	8006106 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	637a      	str	r2, [r7, #52]	; 0x34
 800612a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
 800613c:	e00b      	b.n	8006156 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	b2da      	uxtb	r2, r3
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	1c59      	adds	r1, r3, #1
 8006146:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	09db      	lsrs	r3, r3, #7
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2b7f      	cmp	r3, #127	; 0x7f
 800615a:	d8f0      	bhi.n	800613e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	e00b      	b.n	800618e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	b2da      	uxtb	r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	6279      	str	r1, [r7, #36]	; 0x24
 8006180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	2b7f      	cmp	r3, #127	; 0x7f
 8006192:	d8f0      	bhi.n	8006176 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	627a      	str	r2, [r7, #36]	; 0x24
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	6979      	ldr	r1, [r7, #20]
 80061a8:	69b8      	ldr	r0, [r7, #24]
 80061aa:	f7ff f981 	bl	80054b0 <_SendPacket>
  RECORD_END();
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f383 8811 	msr	BASEPRI, r3
}
 80061b4:	bf00      	nop
 80061b6:	3738      	adds	r7, #56	; 0x38
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	2001742c 	.word	0x2001742c

080061c0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b090      	sub	sp, #64	; 0x40
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ce:	f3ef 8311 	mrs	r3, BASEPRI
 80061d2:	f04f 0120 	mov.w	r1, #32
 80061d6:	f381 8811 	msr	BASEPRI, r1
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	4840      	ldr	r0, [pc, #256]	; (80062e0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061de:	f7ff f877 	bl	80052d0 <_PreparePacket>
 80061e2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80061f0:	e00b      	b.n	800620a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	63bb      	str	r3, [r7, #56]	; 0x38
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	2b7f      	cmp	r3, #127	; 0x7f
 800620e:	d8f0      	bhi.n	80061f2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
 8006228:	e00b      	b.n	8006242 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	b2da      	uxtb	r2, r3
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	6379      	str	r1, [r7, #52]	; 0x34
 8006234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	09db      	lsrs	r3, r3, #7
 8006240:	633b      	str	r3, [r7, #48]	; 0x30
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2b7f      	cmp	r3, #127	; 0x7f
 8006246:	d8f0      	bhi.n	800622a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	637a      	str	r2, [r7, #52]	; 0x34
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	e00b      	b.n	800627a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2b7f      	cmp	r3, #127	; 0x7f
 800627e:	d8f0      	bhi.n	8006262 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	e00b      	b.n	80062b2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	6279      	str	r1, [r7, #36]	; 0x24
 80062a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	09db      	lsrs	r3, r3, #7
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b7f      	cmp	r3, #127	; 0x7f
 80062b6:	d8f0      	bhi.n	800629a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	627a      	str	r2, [r7, #36]	; 0x24
 80062be:	6a3a      	ldr	r2, [r7, #32]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	69b8      	ldr	r0, [r7, #24]
 80062ce:	f7ff f8ef 	bl	80054b0 <_SendPacket>
  RECORD_END();
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f383 8811 	msr	BASEPRI, r3
}
 80062d8:	bf00      	nop
 80062da:	3740      	adds	r7, #64	; 0x40
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	2001742c 	.word	0x2001742c

080062e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08c      	sub	sp, #48	; 0x30
 80062e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062ea:	4b59      	ldr	r3, [pc, #356]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062f0:	f3ef 8311 	mrs	r3, BASEPRI
 80062f4:	f04f 0120 	mov.w	r1, #32
 80062f8:	f381 8811 	msr	BASEPRI, r1
 80062fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80062fe:	4b54      	ldr	r3, [pc, #336]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	220a      	movs	r2, #10
 8006304:	4953      	ldr	r1, [pc, #332]	; (8006454 <SEGGER_SYSVIEW_Start+0x170>)
 8006306:	4618      	mov	r0, r3
 8006308:	f7f9 ff6a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006312:	f7fe fb8f 	bl	8004a34 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006316:	200a      	movs	r0, #10
 8006318:	f7ff fe28 	bl	8005f6c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800631c:	f3ef 8311 	mrs	r3, BASEPRI
 8006320:	f04f 0120 	mov.w	r1, #32
 8006324:	f381 8811 	msr	BASEPRI, r1
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	484b      	ldr	r0, [pc, #300]	; (8006458 <SEGGER_SYSVIEW_Start+0x174>)
 800632c:	f7fe ffd0 	bl	80052d0 <_PreparePacket>
 8006330:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633a:	4b45      	ldr	r3, [pc, #276]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_Start+0x76>
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_Start+0x5e>
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	4b36      	ldr	r3, [pc, #216]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	e00b      	b.n	8006394 <SEGGER_SYSVIEW_Start+0xb0>
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6279      	str	r1, [r7, #36]	; 0x24
 8006386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	09db      	lsrs	r3, r3, #7
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	2b7f      	cmp	r3, #127	; 0x7f
 8006398:	d8f0      	bhi.n	800637c <SEGGER_SYSVIEW_Start+0x98>
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	627a      	str	r2, [r7, #36]	; 0x24
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	4b28      	ldr	r3, [pc, #160]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	e00b      	b.n	80063ce <SEGGER_SYSVIEW_Start+0xea>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	1c59      	adds	r1, r3, #1
 80063be:	61f9      	str	r1, [r7, #28]
 80063c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b7f      	cmp	r3, #127	; 0x7f
 80063d2:	d8f0      	bhi.n	80063b6 <SEGGER_SYSVIEW_Start+0xd2>
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	61fa      	str	r2, [r7, #28]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_Start+0x122>
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	6179      	str	r1, [r7, #20]
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_Start+0x10a>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	617a      	str	r2, [r7, #20]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800641c:	2218      	movs	r2, #24
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff f845 	bl	80054b0 <_SendPacket>
      RECORD_END();
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800642c:	4b08      	ldr	r3, [pc, #32]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <SEGGER_SYSVIEW_Start+0x16c>)
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800643a:	f000 f9eb 	bl	8006814 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800643e:	f000 f9b1 	bl	80067a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006442:	f000 fc23 	bl	8006c8c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006446:	bf00      	nop
 8006448:	3730      	adds	r7, #48	; 0x30
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200173fc 	.word	0x200173fc
 8006454:	0800795c 	.word	0x0800795c
 8006458:	2001742c 	.word	0x2001742c

0800645c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006462:	f3ef 8311 	mrs	r3, BASEPRI
 8006466:	f04f 0120 	mov.w	r1, #32
 800646a:	f381 8811 	msr	BASEPRI, r1
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	480b      	ldr	r0, [pc, #44]	; (80064a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006472:	f7fe ff2d 	bl	80052d0 <_PreparePacket>
 8006476:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006480:	220b      	movs	r2, #11
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6838      	ldr	r0, [r7, #0]
 8006486:	f7ff f813 	bl	80054b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f383 8811 	msr	BASEPRI, r3
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2001742c 	.word	0x2001742c
 80064a4:	200173fc 	.word	0x200173fc

080064a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064ae:	f3ef 8311 	mrs	r3, BASEPRI
 80064b2:	f04f 0120 	mov.w	r1, #32
 80064b6:	f381 8811 	msr	BASEPRI, r1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	4845      	ldr	r0, [pc, #276]	; (80065d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064be:	f7fe ff07 	bl	80052d0 <_PreparePacket>
 80064c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064cc:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d2:	e00b      	b.n	80064ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	09db      	lsrs	r3, r3, #7
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b7f      	cmp	r3, #127	; 0x7f
 80064f0:	d8f0      	bhi.n	80064d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	e00b      	b.n	8006526 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	6279      	str	r1, [r7, #36]	; 0x24
 8006518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	2b7f      	cmp	r3, #127	; 0x7f
 800652a:	d8f0      	bhi.n	800650e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	627a      	str	r2, [r7, #36]	; 0x24
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e00b      	b.n	8006560 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	61f9      	str	r1, [r7, #28]
 8006552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	09db      	lsrs	r3, r3, #7
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b7f      	cmp	r3, #127	; 0x7f
 8006564:	d8f0      	bhi.n	8006548 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	61fa      	str	r2, [r7, #28]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	e00b      	b.n	8006598 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	6179      	str	r1, [r7, #20]
 800658a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	09db      	lsrs	r3, r3, #7
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b7f      	cmp	r3, #127	; 0x7f
 800659c:	d8f0      	bhi.n	8006580 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	617a      	str	r2, [r7, #20]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065ae:	2218      	movs	r2, #24
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	f7fe ff7c 	bl	80054b0 <_SendPacket>
  RECORD_END();
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065c6:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4798      	blx	r3
  }
}
 80065cc:	bf00      	nop
 80065ce:	3730      	adds	r7, #48	; 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	2001742c 	.word	0x2001742c
 80065d8:	200173fc 	.word	0x200173fc

080065dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b092      	sub	sp, #72	; 0x48
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065e4:	f3ef 8311 	mrs	r3, BASEPRI
 80065e8:	f04f 0120 	mov.w	r1, #32
 80065ec:	f381 8811 	msr	BASEPRI, r1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	486a      	ldr	r0, [pc, #424]	; (800679c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065f4:	f7fe fe6c 	bl	80052d0 <_PreparePacket>
 80065f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	647b      	str	r3, [r7, #68]	; 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	643b      	str	r3, [r7, #64]	; 0x40
 800660e:	e00b      	b.n	8006628 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	6479      	str	r1, [r7, #68]	; 0x44
 800661a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	09db      	lsrs	r3, r3, #7
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	2b7f      	cmp	r3, #127	; 0x7f
 800662c:	d8f0      	bhi.n	8006610 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	647a      	str	r2, [r7, #68]	; 0x44
 8006634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
 8006648:	e00b      	b.n	8006662 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	b2da      	uxtb	r2, r3
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	1c59      	adds	r1, r3, #1
 8006652:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	09db      	lsrs	r3, r3, #7
 8006660:	63bb      	str	r3, [r7, #56]	; 0x38
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b7f      	cmp	r3, #127	; 0x7f
 8006666:	d8f0      	bhi.n	800664a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800666e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	4619      	mov	r1, r3
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7fe fdd5 	bl	8005230 <_EncodeStr>
 8006686:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006688:	2209      	movs	r2, #9
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6938      	ldr	r0, [r7, #16]
 800668e:	f7fe ff0f 	bl	80054b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b40      	ldr	r3, [pc, #256]	; (80067a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
 80066a6:	e00b      	b.n	80066c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	6379      	str	r1, [r7, #52]	; 0x34
 80066b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	09db      	lsrs	r3, r3, #7
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2b7f      	cmp	r3, #127	; 0x7f
 80066c4:	d8f0      	bhi.n	80066a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	637a      	str	r2, [r7, #52]	; 0x34
 80066cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	2b7f      	cmp	r3, #127	; 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	e00b      	b.n	8006734 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	6279      	str	r1, [r7, #36]	; 0x24
 8006726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b7f      	cmp	r3, #127	; 0x7f
 8006738:	d8f0      	bhi.n	800671c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	627a      	str	r2, [r7, #36]	; 0x24
 8006740:	6a3a      	ldr	r2, [r7, #32]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e00b      	b.n	800676c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	61f9      	str	r1, [r7, #28]
 800675e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	09db      	lsrs	r3, r3, #7
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b7f      	cmp	r3, #127	; 0x7f
 8006770:	d8f0      	bhi.n	8006754 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	61fa      	str	r2, [r7, #28]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006782:	2215      	movs	r2, #21
 8006784:	68f9      	ldr	r1, [r7, #12]
 8006786:	6938      	ldr	r0, [r7, #16]
 8006788:	f7fe fe92 	bl	80054b0 <_SendPacket>
  RECORD_END();
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f383 8811 	msr	BASEPRI, r3
}
 8006792:	bf00      	nop
 8006794:	3748      	adds	r7, #72	; 0x48
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	2001742c 	.word	0x2001742c
 80067a0:	200173fc 	.word	0x200173fc

080067a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4798      	blx	r3
  }
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200173fc 	.word	0x200173fc

080067cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067d4:	f3ef 8311 	mrs	r3, BASEPRI
 80067d8:	f04f 0120 	mov.w	r1, #32
 80067dc:	f381 8811 	msr	BASEPRI, r1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	480b      	ldr	r0, [pc, #44]	; (8006810 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067e4:	f7fe fd74 	bl	80052d0 <_PreparePacket>
 80067e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f7fe fd1e 	bl	8005230 <_EncodeStr>
 80067f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80067f6:	220e      	movs	r2, #14
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	6938      	ldr	r0, [r7, #16]
 80067fc:	f7fe fe58 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f383 8811 	msr	BASEPRI, r3
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2001742c 	.word	0x2001742c

08006814 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006814:	b590      	push	{r4, r7, lr}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01a      	beq.n	8006858 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006822:	4b13      	ldr	r3, [pc, #76]	; (8006870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d015      	beq.n	8006858 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800682c:	4b10      	ldr	r3, [pc, #64]	; (8006870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4798      	blx	r3
 8006834:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006838:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800683a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	000a      	movs	r2, r1
 8006848:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800684a:	4613      	mov	r3, r2
 800684c:	461a      	mov	r2, r3
 800684e:	4621      	mov	r1, r4
 8006850:	200d      	movs	r0, #13
 8006852:	f7ff fbe5 	bl	8006020 <SEGGER_SYSVIEW_RecordU32x2>
 8006856:	e006      	b.n	8006866 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	200c      	movs	r0, #12
 8006860:	f7ff fba2 	bl	8005fa8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bd90      	pop	{r4, r7, pc}
 800686e:	bf00      	nop
 8006870:	200173fc 	.word	0x200173fc
 8006874:	e0001004 	.word	0xe0001004

08006878 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800687e:	f3ef 8311 	mrs	r3, BASEPRI
 8006882:	f04f 0120 	mov.w	r1, #32
 8006886:	f381 8811 	msr	BASEPRI, r1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	4819      	ldr	r0, [pc, #100]	; (80068f4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800688e:	f7fe fd1f 	bl	80052d0 <_PreparePacket>
 8006892:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006898:	4b17      	ldr	r3, [pc, #92]	; (80068f8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	e00b      	b.n	80068c4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	1c59      	adds	r1, r3, #1
 80068b4:	6179      	str	r1, [r7, #20]
 80068b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	09db      	lsrs	r3, r3, #7
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b7f      	cmp	r3, #127	; 0x7f
 80068c8:	d8f0      	bhi.n	80068ac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	617a      	str	r2, [r7, #20]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068da:	2202      	movs	r2, #2
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	68b8      	ldr	r0, [r7, #8]
 80068e0:	f7fe fde6 	bl	80054b0 <_SendPacket>
  RECORD_END();
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f383 8811 	msr	BASEPRI, r3
}
 80068ea:	bf00      	nop
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	2001742c 	.word	0x2001742c
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006902:	f3ef 8311 	mrs	r3, BASEPRI
 8006906:	f04f 0120 	mov.w	r1, #32
 800690a:	f381 8811 	msr	BASEPRI, r1
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	4807      	ldr	r0, [pc, #28]	; (8006930 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006912:	f7fe fcdd 	bl	80052d0 <_PreparePacket>
 8006916:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006918:	2203      	movs	r2, #3
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6838      	ldr	r0, [r7, #0]
 800691e:	f7fe fdc7 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f383 8811 	msr	BASEPRI, r3
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	2001742c 	.word	0x2001742c

08006934 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800693a:	f3ef 8311 	mrs	r3, BASEPRI
 800693e:	f04f 0120 	mov.w	r1, #32
 8006942:	f381 8811 	msr	BASEPRI, r1
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	4807      	ldr	r0, [pc, #28]	; (8006968 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800694a:	f7fe fcc1 	bl	80052d0 <_PreparePacket>
 800694e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006950:	2212      	movs	r2, #18
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6838      	ldr	r0, [r7, #0]
 8006956:	f7fe fdab 	bl	80054b0 <_SendPacket>
  RECORD_END();
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f383 8811 	msr	BASEPRI, r3
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2001742c 	.word	0x2001742c

0800696c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006972:	f3ef 8311 	mrs	r3, BASEPRI
 8006976:	f04f 0120 	mov.w	r1, #32
 800697a:	f381 8811 	msr	BASEPRI, r1
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	4807      	ldr	r0, [pc, #28]	; (80069a0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006982:	f7fe fca5 	bl	80052d0 <_PreparePacket>
 8006986:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006988:	2211      	movs	r2, #17
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	f7fe fd8f 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f383 8811 	msr	BASEPRI, r3
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	2001742c 	.word	0x2001742c

080069a4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069ac:	f3ef 8311 	mrs	r3, BASEPRI
 80069b0:	f04f 0120 	mov.w	r1, #32
 80069b4:	f381 8811 	msr	BASEPRI, r1
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	4819      	ldr	r0, [pc, #100]	; (8006a20 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069bc:	f7fe fc88 	bl	80052d0 <_PreparePacket>
 80069c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069c6:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e00b      	b.n	80069f2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	1c59      	adds	r1, r3, #1
 80069e2:	61f9      	str	r1, [r7, #28]
 80069e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	09db      	lsrs	r3, r3, #7
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b7f      	cmp	r3, #127	; 0x7f
 80069f6:	d8f0      	bhi.n	80069da <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61fa      	str	r2, [r7, #28]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a08:	2208      	movs	r2, #8
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	6938      	ldr	r0, [r7, #16]
 8006a0e:	f7fe fd4f 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f383 8811 	msr	BASEPRI, r3
}
 8006a18:	bf00      	nop
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	2001742c 	.word	0x2001742c
 8006a24:	200173fc 	.word	0x200173fc

08006a28 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a30:	f3ef 8311 	mrs	r3, BASEPRI
 8006a34:	f04f 0120 	mov.w	r1, #32
 8006a38:	f381 8811 	msr	BASEPRI, r1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	4819      	ldr	r0, [pc, #100]	; (8006aa4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a40:	f7fe fc46 	bl	80052d0 <_PreparePacket>
 8006a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a4a:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e00b      	b.n	8006a76 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	1c59      	adds	r1, r3, #1
 8006a66:	61f9      	str	r1, [r7, #28]
 8006a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	09db      	lsrs	r3, r3, #7
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7a:	d8f0      	bhi.n	8006a5e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	61fa      	str	r2, [r7, #28]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6938      	ldr	r0, [r7, #16]
 8006a92:	f7fe fd0d 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f383 8811 	msr	BASEPRI, r3
}
 8006a9c:	bf00      	nop
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	2001742c 	.word	0x2001742c
 8006aa8:	200173fc 	.word	0x200173fc

08006aac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab8:	f04f 0120 	mov.w	r1, #32
 8006abc:	f381 8811 	msr	BASEPRI, r1
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	4819      	ldr	r0, [pc, #100]	; (8006b28 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ac4:	f7fe fc04 	bl	80052d0 <_PreparePacket>
 8006ac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ace:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	61bb      	str	r3, [r7, #24]
 8006ae0:	e00b      	b.n	8006afa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	61f9      	str	r1, [r7, #28]
 8006aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b7f      	cmp	r3, #127	; 0x7f
 8006afe:	d8f0      	bhi.n	8006ae2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	61fa      	str	r2, [r7, #28]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b10:	2206      	movs	r2, #6
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	6938      	ldr	r0, [r7, #16]
 8006b16:	f7fe fccb 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f383 8811 	msr	BASEPRI, r3
}
 8006b20:	bf00      	nop
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	2001742c 	.word	0x2001742c
 8006b2c:	200173fc 	.word	0x200173fc

08006b30 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b38:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	1ad3      	subs	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	200173fc 	.word	0x200173fc

08006b50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08c      	sub	sp, #48	; 0x30
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d06d      	beq.n	8006c3e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006b62:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b68:	2300      	movs	r3, #0
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b6c:	e008      	b.n	8006b80 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d3f2      	bcc.n	8006b6e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b88:	e000      	b.n	8006b8c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b8a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d055      	beq.n	8006c3e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b92:	f3ef 8311 	mrs	r3, BASEPRI
 8006b96:	f04f 0120 	mov.w	r1, #32
 8006b9a:	f381 8811 	msr	BASEPRI, r1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	482a      	ldr	r0, [pc, #168]	; (8006c4c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ba2:	f7fe fb95 	bl	80052d0 <_PreparePacket>
 8006ba6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	623b      	str	r3, [r7, #32]
 8006bb4:	e00b      	b.n	8006bce <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1c59      	adds	r1, r3, #1
 8006bbe:	6279      	str	r1, [r7, #36]	; 0x24
 8006bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	09db      	lsrs	r3, r3, #7
 8006bcc:	623b      	str	r3, [r7, #32]
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd2:	d8f0      	bhi.n	8006bb6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	627a      	str	r2, [r7, #36]	; 0x24
 8006bda:	6a3a      	ldr	r2, [r7, #32]
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e00b      	b.n	8006c08 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	61f9      	str	r1, [r7, #28]
 8006bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	09db      	lsrs	r3, r3, #7
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0c:	d8f0      	bhi.n	8006bf0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	61fa      	str	r2, [r7, #28]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	4619      	mov	r1, r3
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fe fb02 	bl	8005230 <_EncodeStr>
 8006c2c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c2e:	2216      	movs	r2, #22
 8006c30:	68f9      	ldr	r1, [r7, #12]
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f7fe fc3c 	bl	80054b0 <_SendPacket>
      RECORD_END();
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3730      	adds	r7, #48	; 0x30
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20017424 	.word	0x20017424
 8006c4c:	2001742c 	.word	0x2001742c

08006c50 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00f      	beq.n	8006c7e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f2      	bne.n	8006c64 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20017424 	.word	0x20017424

08006c8c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c92:	f3ef 8311 	mrs	r3, BASEPRI
 8006c96:	f04f 0120 	mov.w	r1, #32
 8006c9a:	f381 8811 	msr	BASEPRI, r1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	4817      	ldr	r0, [pc, #92]	; (8006d00 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ca2:	f7fe fb15 	bl	80052d0 <_PreparePacket>
 8006ca6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	e00b      	b.n	8006cd0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1c59      	adds	r1, r3, #1
 8006cc0:	6179      	str	r1, [r7, #20]
 8006cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	09db      	lsrs	r3, r3, #7
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd4:	d8f0      	bhi.n	8006cb8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	617a      	str	r2, [r7, #20]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ce6:	221b      	movs	r2, #27
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	68b8      	ldr	r0, [r7, #8]
 8006cec:	f7fe fbe0 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f383 8811 	msr	BASEPRI, r3
}
 8006cf6:	bf00      	nop
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2001742c 	.word	0x2001742c
 8006d04:	20017428 	.word	0x20017428

08006d08 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d08:	b40f      	push	{r0, r1, r2, r3}
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d10:	f107 0314 	add.w	r3, r7, #20
 8006d14:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	6938      	ldr	r0, [r7, #16]
 8006d1e:	f7fe fed9 	bl	8005ad4 <_VPrintTarget>
  va_end(ParamList);
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d2c:	b004      	add	sp, #16
 8006d2e:	4770      	bx	lr

08006d30 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d38:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3c:	f04f 0120 	mov.w	r1, #32
 8006d40:	f381 8811 	msr	BASEPRI, r1
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	4827      	ldr	r0, [pc, #156]	; (8006de4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d48:	f7fe fac2 	bl	80052d0 <_PreparePacket>
 8006d4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f7fe fa6c 	bl	8005230 <_EncodeStr>
 8006d58:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5e:	2301      	movs	r3, #1
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	e00b      	b.n	8006d7c <SEGGER_SYSVIEW_Warn+0x4c>
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	1c59      	adds	r1, r3, #1
 8006d6c:	6279      	str	r1, [r7, #36]	; 0x24
 8006d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	09db      	lsrs	r3, r3, #7
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d80:	d8f0      	bhi.n	8006d64 <SEGGER_SYSVIEW_Warn+0x34>
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	627a      	str	r2, [r7, #36]	; 0x24
 8006d88:	6a3a      	ldr	r2, [r7, #32]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e00b      	b.n	8006db4 <SEGGER_SYSVIEW_Warn+0x84>
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	61f9      	str	r1, [r7, #28]
 8006da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d8f0      	bhi.n	8006d9c <SEGGER_SYSVIEW_Warn+0x6c>
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dca:	221a      	movs	r2, #26
 8006dcc:	68f9      	ldr	r1, [r7, #12]
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f7fe fb6e 	bl	80054b0 <_SendPacket>
  RECORD_END();
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f383 8811 	msr	BASEPRI, r3
}
 8006dda:	bf00      	nop
 8006ddc:	3728      	adds	r7, #40	; 0x28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2001742c 	.word	0x2001742c

08006de8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006dec:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dee:	7e1b      	ldrb	r3, [r3, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006df4:	460b      	mov	r3, r1
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	440b      	add	r3, r1
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	336c      	adds	r3, #108	; 0x6c
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e04:	7e1b      	ldrb	r3, [r3, #24]
 8006e06:	4618      	mov	r0, r3
 8006e08:	490d      	ldr	r1, [pc, #52]	; (8006e40 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4403      	add	r3, r0
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	440b      	add	r3, r1
 8006e14:	3370      	adds	r3, #112	; 0x70
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d00b      	beq.n	8006e34 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006e1c:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e1e:	789b      	ldrb	r3, [r3, #2]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d107      	bne.n	8006e34 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006e2a:	f7fe fa5d 	bl	80052e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006e34:	4b01      	ldr	r3, [pc, #4]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	200173fc 	.word	0x200173fc
 8006e40:	20012f3c 	.word	0x20012f3c

08006e44 <__errno>:
 8006e44:	4b01      	ldr	r3, [pc, #4]	; (8006e4c <__errno+0x8>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	2000001c 	.word	0x2000001c

08006e50 <__libc_init_array>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4d0d      	ldr	r5, [pc, #52]	; (8006e88 <__libc_init_array+0x38>)
 8006e54:	4c0d      	ldr	r4, [pc, #52]	; (8006e8c <__libc_init_array+0x3c>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	d109      	bne.n	8006e74 <__libc_init_array+0x24>
 8006e60:	4d0b      	ldr	r5, [pc, #44]	; (8006e90 <__libc_init_array+0x40>)
 8006e62:	4c0c      	ldr	r4, [pc, #48]	; (8006e94 <__libc_init_array+0x44>)
 8006e64:	f000 fcb2 	bl	80077cc <_init>
 8006e68:	1b64      	subs	r4, r4, r5
 8006e6a:	10a4      	asrs	r4, r4, #2
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	d105      	bne.n	8006e7e <__libc_init_array+0x2e>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e78:	4798      	blx	r3
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7ee      	b.n	8006e5c <__libc_init_array+0xc>
 8006e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e82:	4798      	blx	r3
 8006e84:	3601      	adds	r6, #1
 8006e86:	e7f2      	b.n	8006e6e <__libc_init_array+0x1e>
 8006e88:	080079b4 	.word	0x080079b4
 8006e8c:	080079b4 	.word	0x080079b4
 8006e90:	080079b4 	.word	0x080079b4
 8006e94:	080079b8 	.word	0x080079b8

08006e98 <memcmp>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	3901      	subs	r1, #1
 8006e9c:	4402      	add	r2, r0
 8006e9e:	4290      	cmp	r0, r2
 8006ea0:	d101      	bne.n	8006ea6 <memcmp+0xe>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e005      	b.n	8006eb2 <memcmp+0x1a>
 8006ea6:	7803      	ldrb	r3, [r0, #0]
 8006ea8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	d001      	beq.n	8006eb4 <memcmp+0x1c>
 8006eb0:	1b18      	subs	r0, r3, r4
 8006eb2:	bd10      	pop	{r4, pc}
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	e7f2      	b.n	8006e9e <memcmp+0x6>

08006eb8 <memcpy>:
 8006eb8:	440a      	add	r2, r1
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec0:	d100      	bne.n	8006ec4 <memcpy+0xc>
 8006ec2:	4770      	bx	lr
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	d1f9      	bne.n	8006ec6 <memcpy+0xe>
 8006ed2:	bd10      	pop	{r4, pc}

08006ed4 <memset>:
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <sniprintf>:
 8006ee4:	b40c      	push	{r2, r3}
 8006ee6:	b530      	push	{r4, r5, lr}
 8006ee8:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <sniprintf+0x64>)
 8006eea:	1e0c      	subs	r4, r1, #0
 8006eec:	681d      	ldr	r5, [r3, #0]
 8006eee:	b09d      	sub	sp, #116	; 0x74
 8006ef0:	da08      	bge.n	8006f04 <sniprintf+0x20>
 8006ef2:	238b      	movs	r3, #139	; 0x8b
 8006ef4:	602b      	str	r3, [r5, #0]
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	b01d      	add	sp, #116	; 0x74
 8006efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f00:	b002      	add	sp, #8
 8006f02:	4770      	bx	lr
 8006f04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f0c:	bf14      	ite	ne
 8006f0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f12:	4623      	moveq	r3, r4
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f1c:	9002      	str	r0, [sp, #8]
 8006f1e:	9006      	str	r0, [sp, #24]
 8006f20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f26:	ab21      	add	r3, sp, #132	; 0x84
 8006f28:	a902      	add	r1, sp, #8
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	f000 f869 	bl	8007004 <_svfiprintf_r>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	bfbc      	itt	lt
 8006f36:	238b      	movlt	r3, #139	; 0x8b
 8006f38:	602b      	strlt	r3, [r5, #0]
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	d0dd      	beq.n	8006efa <sniprintf+0x16>
 8006f3e:	9b02      	ldr	r3, [sp, #8]
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	e7d9      	b.n	8006efa <sniprintf+0x16>
 8006f46:	bf00      	nop
 8006f48:	2000001c 	.word	0x2000001c

08006f4c <__ssputs_r>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	688e      	ldr	r6, [r1, #8]
 8006f52:	429e      	cmp	r6, r3
 8006f54:	4682      	mov	sl, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	4690      	mov	r8, r2
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	d838      	bhi.n	8006fd0 <__ssputs_r+0x84>
 8006f5e:	898a      	ldrh	r2, [r1, #12]
 8006f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f64:	d032      	beq.n	8006fcc <__ssputs_r+0x80>
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6909      	ldr	r1, [r1, #16]
 8006f6a:	eba5 0901 	sub.w	r9, r5, r1
 8006f6e:	6965      	ldr	r5, [r4, #20]
 8006f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f78:	3301      	adds	r3, #1
 8006f7a:	444b      	add	r3, r9
 8006f7c:	106d      	asrs	r5, r5, #1
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf38      	it	cc
 8006f82:	461d      	movcc	r5, r3
 8006f84:	0553      	lsls	r3, r2, #21
 8006f86:	d531      	bpl.n	8006fec <__ssputs_r+0xa0>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f000 fb55 	bl	8007638 <_malloc_r>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	b950      	cbnz	r0, 8006fa8 <__ssputs_r+0x5c>
 8006f92:	230c      	movs	r3, #12
 8006f94:	f8ca 3000 	str.w	r3, [sl]
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	6921      	ldr	r1, [r4, #16]
 8006faa:	464a      	mov	r2, r9
 8006fac:	f7ff ff84 	bl	8006eb8 <memcpy>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	6126      	str	r6, [r4, #16]
 8006fbe:	6165      	str	r5, [r4, #20]
 8006fc0:	444e      	add	r6, r9
 8006fc2:	eba5 0509 	sub.w	r5, r5, r9
 8006fc6:	6026      	str	r6, [r4, #0]
 8006fc8:	60a5      	str	r5, [r4, #8]
 8006fca:	463e      	mov	r6, r7
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	d900      	bls.n	8006fd2 <__ssputs_r+0x86>
 8006fd0:	463e      	mov	r6, r7
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	f000 faa8 	bl	800752c <memmove>
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	1b9b      	subs	r3, r3, r6
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4433      	add	r3, r6
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e7db      	b.n	8006fa4 <__ssputs_r+0x58>
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 fb97 	bl	8007720 <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e1      	bne.n	8006fbc <__ssputs_r+0x70>
 8006ff8:	6921      	ldr	r1, [r4, #16]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f000 fab0 	bl	8007560 <_free_r>
 8007000:	e7c7      	b.n	8006f92 <__ssputs_r+0x46>
	...

08007004 <_svfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	4698      	mov	r8, r3
 800700a:	898b      	ldrh	r3, [r1, #12]
 800700c:	061b      	lsls	r3, r3, #24
 800700e:	b09d      	sub	sp, #116	; 0x74
 8007010:	4607      	mov	r7, r0
 8007012:	460d      	mov	r5, r1
 8007014:	4614      	mov	r4, r2
 8007016:	d50e      	bpl.n	8007036 <_svfiprintf_r+0x32>
 8007018:	690b      	ldr	r3, [r1, #16]
 800701a:	b963      	cbnz	r3, 8007036 <_svfiprintf_r+0x32>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f000 fb0b 	bl	8007638 <_malloc_r>
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	6128      	str	r0, [r5, #16]
 8007026:	b920      	cbnz	r0, 8007032 <_svfiprintf_r+0x2e>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e0d1      	b.n	80071d6 <_svfiprintf_r+0x1d2>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	616b      	str	r3, [r5, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	2320      	movs	r3, #32
 800703c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007040:	f8cd 800c 	str.w	r8, [sp, #12]
 8007044:	2330      	movs	r3, #48	; 0x30
 8007046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071f0 <_svfiprintf_r+0x1ec>
 800704a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800704e:	f04f 0901 	mov.w	r9, #1
 8007052:	4623      	mov	r3, r4
 8007054:	469a      	mov	sl, r3
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	b10a      	cbz	r2, 8007060 <_svfiprintf_r+0x5c>
 800705c:	2a25      	cmp	r2, #37	; 0x25
 800705e:	d1f9      	bne.n	8007054 <_svfiprintf_r+0x50>
 8007060:	ebba 0b04 	subs.w	fp, sl, r4
 8007064:	d00b      	beq.n	800707e <_svfiprintf_r+0x7a>
 8007066:	465b      	mov	r3, fp
 8007068:	4622      	mov	r2, r4
 800706a:	4629      	mov	r1, r5
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ff6d 	bl	8006f4c <__ssputs_r>
 8007072:	3001      	adds	r0, #1
 8007074:	f000 80aa 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707a:	445a      	add	r2, fp
 800707c:	9209      	str	r2, [sp, #36]	; 0x24
 800707e:	f89a 3000 	ldrb.w	r3, [sl]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007088:	2300      	movs	r3, #0
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007092:	f10a 0a01 	add.w	sl, sl, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	9307      	str	r3, [sp, #28]
 800709a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709e:	931a      	str	r3, [sp, #104]	; 0x68
 80070a0:	4654      	mov	r4, sl
 80070a2:	2205      	movs	r2, #5
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	4851      	ldr	r0, [pc, #324]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070aa:	f7f9 f8e9 	bl	8000280 <memchr>
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	b9d8      	cbnz	r0, 80070ea <_svfiprintf_r+0xe6>
 80070b2:	06d0      	lsls	r0, r2, #27
 80070b4:	bf44      	itt	mi
 80070b6:	2320      	movmi	r3, #32
 80070b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070bc:	0711      	lsls	r1, r2, #28
 80070be:	bf44      	itt	mi
 80070c0:	232b      	movmi	r3, #43	; 0x2b
 80070c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ca:	2b2a      	cmp	r3, #42	; 0x2a
 80070cc:	d015      	beq.n	80070fa <_svfiprintf_r+0xf6>
 80070ce:	9a07      	ldr	r2, [sp, #28]
 80070d0:	4654      	mov	r4, sl
 80070d2:	2000      	movs	r0, #0
 80070d4:	f04f 0c0a 	mov.w	ip, #10
 80070d8:	4621      	mov	r1, r4
 80070da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070de:	3b30      	subs	r3, #48	; 0x30
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d94e      	bls.n	8007182 <_svfiprintf_r+0x17e>
 80070e4:	b1b0      	cbz	r0, 8007114 <_svfiprintf_r+0x110>
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	e014      	b.n	8007114 <_svfiprintf_r+0x110>
 80070ea:	eba0 0308 	sub.w	r3, r0, r8
 80070ee:	fa09 f303 	lsl.w	r3, r9, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	46a2      	mov	sl, r4
 80070f8:	e7d2      	b.n	80070a0 <_svfiprintf_r+0x9c>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9103      	str	r1, [sp, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfbb      	ittet	lt
 8007106:	425b      	neglt	r3, r3
 8007108:	f042 0202 	orrlt.w	r2, r2, #2
 800710c:	9307      	strge	r3, [sp, #28]
 800710e:	9307      	strlt	r3, [sp, #28]
 8007110:	bfb8      	it	lt
 8007112:	9204      	strlt	r2, [sp, #16]
 8007114:	7823      	ldrb	r3, [r4, #0]
 8007116:	2b2e      	cmp	r3, #46	; 0x2e
 8007118:	d10c      	bne.n	8007134 <_svfiprintf_r+0x130>
 800711a:	7863      	ldrb	r3, [r4, #1]
 800711c:	2b2a      	cmp	r3, #42	; 0x2a
 800711e:	d135      	bne.n	800718c <_svfiprintf_r+0x188>
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	9203      	str	r2, [sp, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfb8      	it	lt
 800712c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007130:	3402      	adds	r4, #2
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007200 <_svfiprintf_r+0x1fc>
 8007138:	7821      	ldrb	r1, [r4, #0]
 800713a:	2203      	movs	r2, #3
 800713c:	4650      	mov	r0, sl
 800713e:	f7f9 f89f 	bl	8000280 <memchr>
 8007142:	b140      	cbz	r0, 8007156 <_svfiprintf_r+0x152>
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	eba0 000a 	sub.w	r0, r0, sl
 800714a:	fa03 f000 	lsl.w	r0, r3, r0
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	4303      	orrs	r3, r0
 8007152:	3401      	adds	r4, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	4826      	ldr	r0, [pc, #152]	; (80071f4 <_svfiprintf_r+0x1f0>)
 800715c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007160:	2206      	movs	r2, #6
 8007162:	f7f9 f88d 	bl	8000280 <memchr>
 8007166:	2800      	cmp	r0, #0
 8007168:	d038      	beq.n	80071dc <_svfiprintf_r+0x1d8>
 800716a:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <_svfiprintf_r+0x1f4>)
 800716c:	bb1b      	cbnz	r3, 80071b6 <_svfiprintf_r+0x1b2>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	3308      	adds	r3, #8
 8007178:	9303      	str	r3, [sp, #12]
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	4433      	add	r3, r6
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e767      	b.n	8007052 <_svfiprintf_r+0x4e>
 8007182:	fb0c 3202 	mla	r2, ip, r2, r3
 8007186:	460c      	mov	r4, r1
 8007188:	2001      	movs	r0, #1
 800718a:	e7a5      	b.n	80070d8 <_svfiprintf_r+0xd4>
 800718c:	2300      	movs	r3, #0
 800718e:	3401      	adds	r4, #1
 8007190:	9305      	str	r3, [sp, #20]
 8007192:	4619      	mov	r1, r3
 8007194:	f04f 0c0a 	mov.w	ip, #10
 8007198:	4620      	mov	r0, r4
 800719a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800719e:	3a30      	subs	r2, #48	; 0x30
 80071a0:	2a09      	cmp	r2, #9
 80071a2:	d903      	bls.n	80071ac <_svfiprintf_r+0x1a8>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0c5      	beq.n	8007134 <_svfiprintf_r+0x130>
 80071a8:	9105      	str	r1, [sp, #20]
 80071aa:	e7c3      	b.n	8007134 <_svfiprintf_r+0x130>
 80071ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b0:	4604      	mov	r4, r0
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7f0      	b.n	8007198 <_svfiprintf_r+0x194>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <_svfiprintf_r+0x1f8>)
 80071be:	a904      	add	r1, sp, #16
 80071c0:	4638      	mov	r0, r7
 80071c2:	f3af 8000 	nop.w
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	4606      	mov	r6, r0
 80071ca:	d1d6      	bne.n	800717a <_svfiprintf_r+0x176>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af2c 	bmi.w	800702c <_svfiprintf_r+0x28>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	b01d      	add	sp, #116	; 0x74
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <_svfiprintf_r+0x1f8>)
 80071e4:	a904      	add	r1, sp, #16
 80071e6:	4638      	mov	r0, r7
 80071e8:	f000 f87a 	bl	80072e0 <_printf_i>
 80071ec:	e7eb      	b.n	80071c6 <_svfiprintf_r+0x1c2>
 80071ee:	bf00      	nop
 80071f0:	08007978 	.word	0x08007978
 80071f4:	08007982 	.word	0x08007982
 80071f8:	00000000 	.word	0x00000000
 80071fc:	08006f4d 	.word	0x08006f4d
 8007200:	0800797e 	.word	0x0800797e

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4699      	mov	r9, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007214:	4293      	cmp	r3, r2
 8007216:	bfb8      	it	lt
 8007218:	4613      	movlt	r3, r2
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007220:	4607      	mov	r7, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc26      	bgt.n	800729a <_printf_common+0x96>
 800724c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007250:	1e13      	subs	r3, r2, #0
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42b      	bmi.n	80072b4 <_printf_common+0xb0>
 800725c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d01e      	beq.n	80072a8 <_printf_common+0xa4>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	68e5      	ldr	r5, [r4, #12]
 800726e:	6832      	ldr	r2, [r6, #0]
 8007270:	f003 0306 	and.w	r3, r3, #6
 8007274:	2b04      	cmp	r3, #4
 8007276:	bf08      	it	eq
 8007278:	1aad      	subeq	r5, r5, r2
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	6922      	ldr	r2, [r4, #16]
 800727e:	bf0c      	ite	eq
 8007280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007284:	2500      	movne	r5, #0
 8007286:	4293      	cmp	r3, r2
 8007288:	bfc4      	itt	gt
 800728a:	1a9b      	subgt	r3, r3, r2
 800728c:	18ed      	addgt	r5, r5, r3
 800728e:	2600      	movs	r6, #0
 8007290:	341a      	adds	r4, #26
 8007292:	42b5      	cmp	r5, r6
 8007294:	d11a      	bne.n	80072cc <_printf_common+0xc8>
 8007296:	2000      	movs	r0, #0
 8007298:	e008      	b.n	80072ac <_printf_common+0xa8>
 800729a:	2301      	movs	r3, #1
 800729c:	4652      	mov	r2, sl
 800729e:	4649      	mov	r1, r9
 80072a0:	4638      	mov	r0, r7
 80072a2:	47c0      	blx	r8
 80072a4:	3001      	adds	r0, #1
 80072a6:	d103      	bne.n	80072b0 <_printf_common+0xac>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	3501      	adds	r5, #1
 80072b2:	e7c6      	b.n	8007242 <_printf_common+0x3e>
 80072b4:	18e1      	adds	r1, r4, r3
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	2030      	movs	r0, #48	; 0x30
 80072ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072be:	4422      	add	r2, r4
 80072c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c8:	3302      	adds	r3, #2
 80072ca:	e7c7      	b.n	800725c <_printf_common+0x58>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4622      	mov	r2, r4
 80072d0:	4649      	mov	r1, r9
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c0      	blx	r8
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0e6      	beq.n	80072a8 <_printf_common+0xa4>
 80072da:	3601      	adds	r6, #1
 80072dc:	e7d9      	b.n	8007292 <_printf_common+0x8e>
	...

080072e0 <_printf_i>:
 80072e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	7e0f      	ldrb	r7, [r1, #24]
 80072e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072e8:	2f78      	cmp	r7, #120	; 0x78
 80072ea:	4691      	mov	r9, r2
 80072ec:	4680      	mov	r8, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	469a      	mov	sl, r3
 80072f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072f6:	d807      	bhi.n	8007308 <_printf_i+0x28>
 80072f8:	2f62      	cmp	r7, #98	; 0x62
 80072fa:	d80a      	bhi.n	8007312 <_printf_i+0x32>
 80072fc:	2f00      	cmp	r7, #0
 80072fe:	f000 80d8 	beq.w	80074b2 <_printf_i+0x1d2>
 8007302:	2f58      	cmp	r7, #88	; 0x58
 8007304:	f000 80a3 	beq.w	800744e <_printf_i+0x16e>
 8007308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800730c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007310:	e03a      	b.n	8007388 <_printf_i+0xa8>
 8007312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007316:	2b15      	cmp	r3, #21
 8007318:	d8f6      	bhi.n	8007308 <_printf_i+0x28>
 800731a:	a101      	add	r1, pc, #4	; (adr r1, 8007320 <_printf_i+0x40>)
 800731c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007320:	08007379 	.word	0x08007379
 8007324:	0800738d 	.word	0x0800738d
 8007328:	08007309 	.word	0x08007309
 800732c:	08007309 	.word	0x08007309
 8007330:	08007309 	.word	0x08007309
 8007334:	08007309 	.word	0x08007309
 8007338:	0800738d 	.word	0x0800738d
 800733c:	08007309 	.word	0x08007309
 8007340:	08007309 	.word	0x08007309
 8007344:	08007309 	.word	0x08007309
 8007348:	08007309 	.word	0x08007309
 800734c:	08007499 	.word	0x08007499
 8007350:	080073bd 	.word	0x080073bd
 8007354:	0800747b 	.word	0x0800747b
 8007358:	08007309 	.word	0x08007309
 800735c:	08007309 	.word	0x08007309
 8007360:	080074bb 	.word	0x080074bb
 8007364:	08007309 	.word	0x08007309
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007309 	.word	0x08007309
 8007370:	08007309 	.word	0x08007309
 8007374:	08007483 	.word	0x08007483
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	602a      	str	r2, [r5, #0]
 8007380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007388:	2301      	movs	r3, #1
 800738a:	e0a3      	b.n	80074d4 <_printf_i+0x1f4>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	6829      	ldr	r1, [r5, #0]
 8007390:	0606      	lsls	r6, r0, #24
 8007392:	f101 0304 	add.w	r3, r1, #4
 8007396:	d50a      	bpl.n	80073ae <_printf_i+0xce>
 8007398:	680e      	ldr	r6, [r1, #0]
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	2e00      	cmp	r6, #0
 800739e:	da03      	bge.n	80073a8 <_printf_i+0xc8>
 80073a0:	232d      	movs	r3, #45	; 0x2d
 80073a2:	4276      	negs	r6, r6
 80073a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a8:	485e      	ldr	r0, [pc, #376]	; (8007524 <_printf_i+0x244>)
 80073aa:	230a      	movs	r3, #10
 80073ac:	e019      	b.n	80073e2 <_printf_i+0x102>
 80073ae:	680e      	ldr	r6, [r1, #0]
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073b6:	bf18      	it	ne
 80073b8:	b236      	sxthne	r6, r6
 80073ba:	e7ef      	b.n	800739c <_printf_i+0xbc>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	6820      	ldr	r0, [r4, #0]
 80073c0:	1d19      	adds	r1, r3, #4
 80073c2:	6029      	str	r1, [r5, #0]
 80073c4:	0601      	lsls	r1, r0, #24
 80073c6:	d501      	bpl.n	80073cc <_printf_i+0xec>
 80073c8:	681e      	ldr	r6, [r3, #0]
 80073ca:	e002      	b.n	80073d2 <_printf_i+0xf2>
 80073cc:	0646      	lsls	r6, r0, #25
 80073ce:	d5fb      	bpl.n	80073c8 <_printf_i+0xe8>
 80073d0:	881e      	ldrh	r6, [r3, #0]
 80073d2:	4854      	ldr	r0, [pc, #336]	; (8007524 <_printf_i+0x244>)
 80073d4:	2f6f      	cmp	r7, #111	; 0x6f
 80073d6:	bf0c      	ite	eq
 80073d8:	2308      	moveq	r3, #8
 80073da:	230a      	movne	r3, #10
 80073dc:	2100      	movs	r1, #0
 80073de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073e2:	6865      	ldr	r5, [r4, #4]
 80073e4:	60a5      	str	r5, [r4, #8]
 80073e6:	2d00      	cmp	r5, #0
 80073e8:	bfa2      	ittt	ge
 80073ea:	6821      	ldrge	r1, [r4, #0]
 80073ec:	f021 0104 	bicge.w	r1, r1, #4
 80073f0:	6021      	strge	r1, [r4, #0]
 80073f2:	b90e      	cbnz	r6, 80073f8 <_printf_i+0x118>
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	d04d      	beq.n	8007494 <_printf_i+0x1b4>
 80073f8:	4615      	mov	r5, r2
 80073fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80073fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007402:	5dc7      	ldrb	r7, [r0, r7]
 8007404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007408:	4637      	mov	r7, r6
 800740a:	42bb      	cmp	r3, r7
 800740c:	460e      	mov	r6, r1
 800740e:	d9f4      	bls.n	80073fa <_printf_i+0x11a>
 8007410:	2b08      	cmp	r3, #8
 8007412:	d10b      	bne.n	800742c <_printf_i+0x14c>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	07de      	lsls	r6, r3, #31
 8007418:	d508      	bpl.n	800742c <_printf_i+0x14c>
 800741a:	6923      	ldr	r3, [r4, #16]
 800741c:	6861      	ldr	r1, [r4, #4]
 800741e:	4299      	cmp	r1, r3
 8007420:	bfde      	ittt	le
 8007422:	2330      	movle	r3, #48	; 0x30
 8007424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800742c:	1b52      	subs	r2, r2, r5
 800742e:	6122      	str	r2, [r4, #16]
 8007430:	f8cd a000 	str.w	sl, [sp]
 8007434:	464b      	mov	r3, r9
 8007436:	aa03      	add	r2, sp, #12
 8007438:	4621      	mov	r1, r4
 800743a:	4640      	mov	r0, r8
 800743c:	f7ff fee2 	bl	8007204 <_printf_common>
 8007440:	3001      	adds	r0, #1
 8007442:	d14c      	bne.n	80074de <_printf_i+0x1fe>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b004      	add	sp, #16
 800744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744e:	4835      	ldr	r0, [pc, #212]	; (8007524 <_printf_i+0x244>)
 8007450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007454:	6829      	ldr	r1, [r5, #0]
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f851 6b04 	ldr.w	r6, [r1], #4
 800745c:	6029      	str	r1, [r5, #0]
 800745e:	061d      	lsls	r5, r3, #24
 8007460:	d514      	bpl.n	800748c <_printf_i+0x1ac>
 8007462:	07df      	lsls	r7, r3, #31
 8007464:	bf44      	itt	mi
 8007466:	f043 0320 	orrmi.w	r3, r3, #32
 800746a:	6023      	strmi	r3, [r4, #0]
 800746c:	b91e      	cbnz	r6, 8007476 <_printf_i+0x196>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f023 0320 	bic.w	r3, r3, #32
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	2310      	movs	r3, #16
 8007478:	e7b0      	b.n	80073dc <_printf_i+0xfc>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	f043 0320 	orr.w	r3, r3, #32
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	2378      	movs	r3, #120	; 0x78
 8007484:	4828      	ldr	r0, [pc, #160]	; (8007528 <_printf_i+0x248>)
 8007486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800748a:	e7e3      	b.n	8007454 <_printf_i+0x174>
 800748c:	0659      	lsls	r1, r3, #25
 800748e:	bf48      	it	mi
 8007490:	b2b6      	uxthmi	r6, r6
 8007492:	e7e6      	b.n	8007462 <_printf_i+0x182>
 8007494:	4615      	mov	r5, r2
 8007496:	e7bb      	b.n	8007410 <_printf_i+0x130>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	6826      	ldr	r6, [r4, #0]
 800749c:	6961      	ldr	r1, [r4, #20]
 800749e:	1d18      	adds	r0, r3, #4
 80074a0:	6028      	str	r0, [r5, #0]
 80074a2:	0635      	lsls	r5, r6, #24
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0x1cc>
 80074a8:	6019      	str	r1, [r3, #0]
 80074aa:	e002      	b.n	80074b2 <_printf_i+0x1d2>
 80074ac:	0670      	lsls	r0, r6, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0x1c8>
 80074b0:	8019      	strh	r1, [r3, #0]
 80074b2:	2300      	movs	r3, #0
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	4615      	mov	r5, r2
 80074b8:	e7ba      	b.n	8007430 <_printf_i+0x150>
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	1d1a      	adds	r2, r3, #4
 80074be:	602a      	str	r2, [r5, #0]
 80074c0:	681d      	ldr	r5, [r3, #0]
 80074c2:	6862      	ldr	r2, [r4, #4]
 80074c4:	2100      	movs	r1, #0
 80074c6:	4628      	mov	r0, r5
 80074c8:	f7f8 feda 	bl	8000280 <memchr>
 80074cc:	b108      	cbz	r0, 80074d2 <_printf_i+0x1f2>
 80074ce:	1b40      	subs	r0, r0, r5
 80074d0:	6060      	str	r0, [r4, #4]
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	2300      	movs	r3, #0
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074dc:	e7a8      	b.n	8007430 <_printf_i+0x150>
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	462a      	mov	r2, r5
 80074e2:	4649      	mov	r1, r9
 80074e4:	4640      	mov	r0, r8
 80074e6:	47d0      	blx	sl
 80074e8:	3001      	adds	r0, #1
 80074ea:	d0ab      	beq.n	8007444 <_printf_i+0x164>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	079b      	lsls	r3, r3, #30
 80074f0:	d413      	bmi.n	800751a <_printf_i+0x23a>
 80074f2:	68e0      	ldr	r0, [r4, #12]
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	4298      	cmp	r0, r3
 80074f8:	bfb8      	it	lt
 80074fa:	4618      	movlt	r0, r3
 80074fc:	e7a4      	b.n	8007448 <_printf_i+0x168>
 80074fe:	2301      	movs	r3, #1
 8007500:	4632      	mov	r2, r6
 8007502:	4649      	mov	r1, r9
 8007504:	4640      	mov	r0, r8
 8007506:	47d0      	blx	sl
 8007508:	3001      	adds	r0, #1
 800750a:	d09b      	beq.n	8007444 <_printf_i+0x164>
 800750c:	3501      	adds	r5, #1
 800750e:	68e3      	ldr	r3, [r4, #12]
 8007510:	9903      	ldr	r1, [sp, #12]
 8007512:	1a5b      	subs	r3, r3, r1
 8007514:	42ab      	cmp	r3, r5
 8007516:	dcf2      	bgt.n	80074fe <_printf_i+0x21e>
 8007518:	e7eb      	b.n	80074f2 <_printf_i+0x212>
 800751a:	2500      	movs	r5, #0
 800751c:	f104 0619 	add.w	r6, r4, #25
 8007520:	e7f5      	b.n	800750e <_printf_i+0x22e>
 8007522:	bf00      	nop
 8007524:	08007989 	.word	0x08007989
 8007528:	0800799a 	.word	0x0800799a

0800752c <memmove>:
 800752c:	4288      	cmp	r0, r1
 800752e:	b510      	push	{r4, lr}
 8007530:	eb01 0402 	add.w	r4, r1, r2
 8007534:	d902      	bls.n	800753c <memmove+0x10>
 8007536:	4284      	cmp	r4, r0
 8007538:	4623      	mov	r3, r4
 800753a:	d807      	bhi.n	800754c <memmove+0x20>
 800753c:	1e43      	subs	r3, r0, #1
 800753e:	42a1      	cmp	r1, r4
 8007540:	d008      	beq.n	8007554 <memmove+0x28>
 8007542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754a:	e7f8      	b.n	800753e <memmove+0x12>
 800754c:	4402      	add	r2, r0
 800754e:	4601      	mov	r1, r0
 8007550:	428a      	cmp	r2, r1
 8007552:	d100      	bne.n	8007556 <memmove+0x2a>
 8007554:	bd10      	pop	{r4, pc}
 8007556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800755e:	e7f7      	b.n	8007550 <memmove+0x24>

08007560 <_free_r>:
 8007560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007562:	2900      	cmp	r1, #0
 8007564:	d044      	beq.n	80075f0 <_free_r+0x90>
 8007566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756a:	9001      	str	r0, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f1a1 0404 	sub.w	r4, r1, #4
 8007572:	bfb8      	it	lt
 8007574:	18e4      	addlt	r4, r4, r3
 8007576:	f000 f913 	bl	80077a0 <__malloc_lock>
 800757a:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <_free_r+0x94>)
 800757c:	9801      	ldr	r0, [sp, #4]
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	b933      	cbnz	r3, 8007590 <_free_r+0x30>
 8007582:	6063      	str	r3, [r4, #4]
 8007584:	6014      	str	r4, [r2, #0]
 8007586:	b003      	add	sp, #12
 8007588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800758c:	f000 b90e 	b.w	80077ac <__malloc_unlock>
 8007590:	42a3      	cmp	r3, r4
 8007592:	d908      	bls.n	80075a6 <_free_r+0x46>
 8007594:	6825      	ldr	r5, [r4, #0]
 8007596:	1961      	adds	r1, r4, r5
 8007598:	428b      	cmp	r3, r1
 800759a:	bf01      	itttt	eq
 800759c:	6819      	ldreq	r1, [r3, #0]
 800759e:	685b      	ldreq	r3, [r3, #4]
 80075a0:	1949      	addeq	r1, r1, r5
 80075a2:	6021      	streq	r1, [r4, #0]
 80075a4:	e7ed      	b.n	8007582 <_free_r+0x22>
 80075a6:	461a      	mov	r2, r3
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	b10b      	cbz	r3, 80075b0 <_free_r+0x50>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d9fa      	bls.n	80075a6 <_free_r+0x46>
 80075b0:	6811      	ldr	r1, [r2, #0]
 80075b2:	1855      	adds	r5, r2, r1
 80075b4:	42a5      	cmp	r5, r4
 80075b6:	d10b      	bne.n	80075d0 <_free_r+0x70>
 80075b8:	6824      	ldr	r4, [r4, #0]
 80075ba:	4421      	add	r1, r4
 80075bc:	1854      	adds	r4, r2, r1
 80075be:	42a3      	cmp	r3, r4
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	d1e0      	bne.n	8007586 <_free_r+0x26>
 80075c4:	681c      	ldr	r4, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	6053      	str	r3, [r2, #4]
 80075ca:	4421      	add	r1, r4
 80075cc:	6011      	str	r1, [r2, #0]
 80075ce:	e7da      	b.n	8007586 <_free_r+0x26>
 80075d0:	d902      	bls.n	80075d8 <_free_r+0x78>
 80075d2:	230c      	movs	r3, #12
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	e7d6      	b.n	8007586 <_free_r+0x26>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf04      	itt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	bf04      	itt	eq
 80075e8:	1949      	addeq	r1, r1, r5
 80075ea:	6021      	streq	r1, [r4, #0]
 80075ec:	6054      	str	r4, [r2, #4]
 80075ee:	e7ca      	b.n	8007586 <_free_r+0x26>
 80075f0:	b003      	add	sp, #12
 80075f2:	bd30      	pop	{r4, r5, pc}
 80075f4:	20017510 	.word	0x20017510

080075f8 <sbrk_aligned>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4e0e      	ldr	r6, [pc, #56]	; (8007634 <sbrk_aligned+0x3c>)
 80075fc:	460c      	mov	r4, r1
 80075fe:	6831      	ldr	r1, [r6, #0]
 8007600:	4605      	mov	r5, r0
 8007602:	b911      	cbnz	r1, 800760a <sbrk_aligned+0x12>
 8007604:	f000 f8bc 	bl	8007780 <_sbrk_r>
 8007608:	6030      	str	r0, [r6, #0]
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f8b7 	bl	8007780 <_sbrk_r>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d00a      	beq.n	800762c <sbrk_aligned+0x34>
 8007616:	1cc4      	adds	r4, r0, #3
 8007618:	f024 0403 	bic.w	r4, r4, #3
 800761c:	42a0      	cmp	r0, r4
 800761e:	d007      	beq.n	8007630 <sbrk_aligned+0x38>
 8007620:	1a21      	subs	r1, r4, r0
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f8ac 	bl	8007780 <_sbrk_r>
 8007628:	3001      	adds	r0, #1
 800762a:	d101      	bne.n	8007630 <sbrk_aligned+0x38>
 800762c:	f04f 34ff 	mov.w	r4, #4294967295
 8007630:	4620      	mov	r0, r4
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	20017514 	.word	0x20017514

08007638 <_malloc_r>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	1ccd      	adds	r5, r1, #3
 800763e:	f025 0503 	bic.w	r5, r5, #3
 8007642:	3508      	adds	r5, #8
 8007644:	2d0c      	cmp	r5, #12
 8007646:	bf38      	it	cc
 8007648:	250c      	movcc	r5, #12
 800764a:	2d00      	cmp	r5, #0
 800764c:	4607      	mov	r7, r0
 800764e:	db01      	blt.n	8007654 <_malloc_r+0x1c>
 8007650:	42a9      	cmp	r1, r5
 8007652:	d905      	bls.n	8007660 <_malloc_r+0x28>
 8007654:	230c      	movs	r3, #12
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	2600      	movs	r6, #0
 800765a:	4630      	mov	r0, r6
 800765c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007660:	4e2e      	ldr	r6, [pc, #184]	; (800771c <_malloc_r+0xe4>)
 8007662:	f000 f89d 	bl	80077a0 <__malloc_lock>
 8007666:	6833      	ldr	r3, [r6, #0]
 8007668:	461c      	mov	r4, r3
 800766a:	bb34      	cbnz	r4, 80076ba <_malloc_r+0x82>
 800766c:	4629      	mov	r1, r5
 800766e:	4638      	mov	r0, r7
 8007670:	f7ff ffc2 	bl	80075f8 <sbrk_aligned>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	4604      	mov	r4, r0
 8007678:	d14d      	bne.n	8007716 <_malloc_r+0xde>
 800767a:	6834      	ldr	r4, [r6, #0]
 800767c:	4626      	mov	r6, r4
 800767e:	2e00      	cmp	r6, #0
 8007680:	d140      	bne.n	8007704 <_malloc_r+0xcc>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	4631      	mov	r1, r6
 8007686:	4638      	mov	r0, r7
 8007688:	eb04 0803 	add.w	r8, r4, r3
 800768c:	f000 f878 	bl	8007780 <_sbrk_r>
 8007690:	4580      	cmp	r8, r0
 8007692:	d13a      	bne.n	800770a <_malloc_r+0xd2>
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	3503      	adds	r5, #3
 8007698:	1a6d      	subs	r5, r5, r1
 800769a:	f025 0503 	bic.w	r5, r5, #3
 800769e:	3508      	adds	r5, #8
 80076a0:	2d0c      	cmp	r5, #12
 80076a2:	bf38      	it	cc
 80076a4:	250c      	movcc	r5, #12
 80076a6:	4629      	mov	r1, r5
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff ffa5 	bl	80075f8 <sbrk_aligned>
 80076ae:	3001      	adds	r0, #1
 80076b0:	d02b      	beq.n	800770a <_malloc_r+0xd2>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	442b      	add	r3, r5
 80076b6:	6023      	str	r3, [r4, #0]
 80076b8:	e00e      	b.n	80076d8 <_malloc_r+0xa0>
 80076ba:	6822      	ldr	r2, [r4, #0]
 80076bc:	1b52      	subs	r2, r2, r5
 80076be:	d41e      	bmi.n	80076fe <_malloc_r+0xc6>
 80076c0:	2a0b      	cmp	r2, #11
 80076c2:	d916      	bls.n	80076f2 <_malloc_r+0xba>
 80076c4:	1961      	adds	r1, r4, r5
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	6025      	str	r5, [r4, #0]
 80076ca:	bf18      	it	ne
 80076cc:	6059      	strne	r1, [r3, #4]
 80076ce:	6863      	ldr	r3, [r4, #4]
 80076d0:	bf08      	it	eq
 80076d2:	6031      	streq	r1, [r6, #0]
 80076d4:	5162      	str	r2, [r4, r5]
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	4638      	mov	r0, r7
 80076da:	f104 060b 	add.w	r6, r4, #11
 80076de:	f000 f865 	bl	80077ac <__malloc_unlock>
 80076e2:	f026 0607 	bic.w	r6, r6, #7
 80076e6:	1d23      	adds	r3, r4, #4
 80076e8:	1af2      	subs	r2, r6, r3
 80076ea:	d0b6      	beq.n	800765a <_malloc_r+0x22>
 80076ec:	1b9b      	subs	r3, r3, r6
 80076ee:	50a3      	str	r3, [r4, r2]
 80076f0:	e7b3      	b.n	800765a <_malloc_r+0x22>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	bf0c      	ite	eq
 80076f8:	6032      	streq	r2, [r6, #0]
 80076fa:	605a      	strne	r2, [r3, #4]
 80076fc:	e7ec      	b.n	80076d8 <_malloc_r+0xa0>
 80076fe:	4623      	mov	r3, r4
 8007700:	6864      	ldr	r4, [r4, #4]
 8007702:	e7b2      	b.n	800766a <_malloc_r+0x32>
 8007704:	4634      	mov	r4, r6
 8007706:	6876      	ldr	r6, [r6, #4]
 8007708:	e7b9      	b.n	800767e <_malloc_r+0x46>
 800770a:	230c      	movs	r3, #12
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4638      	mov	r0, r7
 8007710:	f000 f84c 	bl	80077ac <__malloc_unlock>
 8007714:	e7a1      	b.n	800765a <_malloc_r+0x22>
 8007716:	6025      	str	r5, [r4, #0]
 8007718:	e7de      	b.n	80076d8 <_malloc_r+0xa0>
 800771a:	bf00      	nop
 800771c:	20017510 	.word	0x20017510

08007720 <_realloc_r>:
 8007720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4680      	mov	r8, r0
 8007726:	4614      	mov	r4, r2
 8007728:	460e      	mov	r6, r1
 800772a:	b921      	cbnz	r1, 8007736 <_realloc_r+0x16>
 800772c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	4611      	mov	r1, r2
 8007732:	f7ff bf81 	b.w	8007638 <_malloc_r>
 8007736:	b92a      	cbnz	r2, 8007744 <_realloc_r+0x24>
 8007738:	f7ff ff12 	bl	8007560 <_free_r>
 800773c:	4625      	mov	r5, r4
 800773e:	4628      	mov	r0, r5
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	f000 f838 	bl	80077b8 <_malloc_usable_size_r>
 8007748:	4284      	cmp	r4, r0
 800774a:	4607      	mov	r7, r0
 800774c:	d802      	bhi.n	8007754 <_realloc_r+0x34>
 800774e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007752:	d812      	bhi.n	800777a <_realloc_r+0x5a>
 8007754:	4621      	mov	r1, r4
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff ff6e 	bl	8007638 <_malloc_r>
 800775c:	4605      	mov	r5, r0
 800775e:	2800      	cmp	r0, #0
 8007760:	d0ed      	beq.n	800773e <_realloc_r+0x1e>
 8007762:	42bc      	cmp	r4, r7
 8007764:	4622      	mov	r2, r4
 8007766:	4631      	mov	r1, r6
 8007768:	bf28      	it	cs
 800776a:	463a      	movcs	r2, r7
 800776c:	f7ff fba4 	bl	8006eb8 <memcpy>
 8007770:	4631      	mov	r1, r6
 8007772:	4640      	mov	r0, r8
 8007774:	f7ff fef4 	bl	8007560 <_free_r>
 8007778:	e7e1      	b.n	800773e <_realloc_r+0x1e>
 800777a:	4635      	mov	r5, r6
 800777c:	e7df      	b.n	800773e <_realloc_r+0x1e>
	...

08007780 <_sbrk_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_sbrk_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7f9 f9c8 	bl	8000b20 <_sbrk>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_sbrk_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_sbrk_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20017518 	.word	0x20017518

080077a0 <__malloc_lock>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__malloc_lock+0x8>)
 80077a2:	f000 b811 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 80077a6:	bf00      	nop
 80077a8:	2001751c 	.word	0x2001751c

080077ac <__malloc_unlock>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__malloc_unlock+0x8>)
 80077ae:	f000 b80c 	b.w	80077ca <__retarget_lock_release_recursive>
 80077b2:	bf00      	nop
 80077b4:	2001751c 	.word	0x2001751c

080077b8 <_malloc_usable_size_r>:
 80077b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077bc:	1f18      	subs	r0, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfbc      	itt	lt
 80077c2:	580b      	ldrlt	r3, [r1, r0]
 80077c4:	18c0      	addlt	r0, r0, r3
 80077c6:	4770      	bx	lr

080077c8 <__retarget_lock_acquire_recursive>:
 80077c8:	4770      	bx	lr

080077ca <__retarget_lock_release_recursive>:
 80077ca:	4770      	bx	lr

080077cc <_init>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	bf00      	nop
 80077d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d2:	bc08      	pop	{r3}
 80077d4:	469e      	mov	lr, r3
 80077d6:	4770      	bx	lr

080077d8 <_fini>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr

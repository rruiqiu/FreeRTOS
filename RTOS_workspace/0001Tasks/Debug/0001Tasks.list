
0001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007808  08007808  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007810  08007810  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174a0  20000080  08007898  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017520  08007898  00027520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153e9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c0  00000000  00000000  00035499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a1  00000000  00000000  0003aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155c1  00000000  00000000  00053c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b44f  00000000  00000000  0006922a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  001046cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800764c 	.word	0x0800764c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800764c 	.word	0x0800764c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f38 	.word	0x20012f38
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fa95 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f853 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8bb 	bl	80007ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter

  DWT_CTRL |= (1<<0);
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <main+0x94>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <main+0x94>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000642:	481e      	ldr	r0, [pc, #120]	; (80006bc <main+0x98>)
 8000644:	f004 f8d2 	bl	80047ec <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000648:	f003 fefa 	bl	8004440 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler,"Task-1",200,"Hello world from Task-1", 2,&task1_handle);
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2302      	movs	r3, #2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0x9c>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	491a      	ldr	r1, [pc, #104]	; (80006c4 <main+0xa0>)
 800065c:	481a      	ldr	r0, [pc, #104]	; (80006c8 <main+0xa4>)
 800065e:	f002 f83f 	bl	80026e0 <xTaskCreate>
 8000662:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d00a      	beq.n	8000680 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066e:	f383 8811 	msr	BASEPRI, r3
 8000672:	f3bf 8f6f 	isb	sy
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067c:	bf00      	nop
 800067e:	e7fe      	b.n	800067e <main+0x5a>

  status = xTaskCreate(task2_handler,"Task-2",200,"Hello world from Task-2", 2,&task2_handle);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2302      	movs	r3, #2
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <main+0xa8>)
 800068a:	22c8      	movs	r2, #200	; 0xc8
 800068c:	4910      	ldr	r1, [pc, #64]	; (80006d0 <main+0xac>)
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <main+0xb0>)
 8000690:	f002 f826 	bl	80026e0 <xTaskCreate>
 8000694:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d00a      	beq.n	80006b2 <main+0x8e>
        __asm volatile
 800069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a0:	f383 8811 	msr	BASEPRI, r3
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	f3bf 8f4f 	dsb	sy
 80006ac:	60fb      	str	r3, [r7, #12]
    }
 80006ae:	bf00      	nop
 80006b0:	e7fe      	b.n	80006b0 <main+0x8c>

  //starts the freeRtos scheduler
  vTaskStartScheduler();
 80006b2:	f002 f98f 	bl	80029d4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x92>
 80006b8:	e0001000 	.word	0xe0001000
 80006bc:	0003d090 	.word	0x0003d090
 80006c0:	08007664 	.word	0x08007664
 80006c4:	0800767c 	.word	0x0800767c
 80006c8:	080008a9 	.word	0x080008a9
 80006cc:	08007684 	.word	0x08007684
 80006d0:	0800769c 	.word	0x0800769c
 80006d4:	080008e9 	.word	0x080008e9

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fb26 	bl	8006d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000752:	2304      	movs	r3, #4
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000756:	2304      	movs	r3, #4
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fce0 	bl	8001124 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 f8ef 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f000 ff41 	bl	8001614 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000798:	f000 f8d8 	bl	800094c <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2d      	ldr	r2, [pc, #180]	; (800089c <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a26      	ldr	r2, [pc, #152]	; (800089c <MX_GPIO_Init+0xf0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <MX_GPIO_Init+0xf0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	481a      	ldr	r0, [pc, #104]	; (80008a0 <MX_GPIO_Init+0xf4>)
 8000838:	f000 fc5a 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_GPIO_Init+0xf8>)
 8000854:	f000 fac8 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000858:	230c      	movs	r3, #12
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000868:	2307      	movs	r3, #7
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0xf4>)
 8000874:	f000 fab8 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000878:	2320      	movs	r3, #32
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0xf4>)
 8000890:	f000 faaa 	bl	8000de8 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020800 	.word	0x40020800

080008a8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	; 0x70
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameters);
 80008b0:	f107 000c 	add.w	r0, r7, #12
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <task1_handler+0x38>)
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	f006 fa45 	bl	8006d48 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 f958 	bl	8006b78 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(2);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f000 f987 	bl	8000bdc <HAL_Delay>
		taskYIELD();
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <task1_handler+0x3c>)
 80008d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 80008de:	e7e7      	b.n	80008b0 <task1_handler+0x8>
 80008e0:	080076a4 	.word	0x080076a4
 80008e4:	e000ed04 	.word	0xe000ed04

080008e8 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameters);
 80008f0:	f107 000c 	add.w	r0, r7, #12
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <task2_handler+0x38>)
 80008f8:	2164      	movs	r1, #100	; 0x64
 80008fa:	f006 fa25 	bl	8006d48 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4618      	mov	r0, r3
 8000904:	f006 f938 	bl	8006b78 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(2);
 8000908:	2002      	movs	r0, #2
 800090a:	f000 f967 	bl	8000bdc <HAL_Delay>
		taskYIELD();
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <task2_handler+0x3c>)
 8000910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 800091e:	e7e7      	b.n	80008f0 <task2_handler+0x8>
 8000920:	080076a4 	.word	0x080076a4
 8000924:	e000ed04 	.word	0xe000ed04

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f92f 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40000c00 	.word	0x40000c00

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000996:	f003 f9cf 	bl	8003d38 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	; 0x38
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <HAL_InitTick+0xe4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <HAL_InitTick+0xe4>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_InitTick+0xe4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d4:	f107 0210 	add.w	r2, r7, #16
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f824 	bl	8001a2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ee:	f001 f809 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 80009f2:	6378      	str	r0, [r7, #52]	; 0x34
 80009f4:	e004      	b.n	8000a00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f6:	f001 f805 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 80009fa:	4603      	mov	r3, r0
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	0c9b      	lsrs	r3, r3, #18
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_InitTick+0xec>)
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <HAL_InitTick+0xf0>)
 8000a12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <HAL_InitTick+0xec>)
 8000a16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_InitTick+0xec>)
 8000a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a20:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_InitTick+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_InitTick+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_InitTick+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a34:	4817      	ldr	r0, [pc, #92]	; (8000a94 <HAL_InitTick+0xec>)
 8000a36:	f001 f82b 	bl	8001a90 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d11b      	bne.n	8000a80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a48:	4812      	ldr	r0, [pc, #72]	; (8000a94 <HAL_InitTick+0xec>)
 8000a4a:	f001 f87b 	bl	8001b44 <HAL_TIM_Base_Start_IT>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a5c:	2032      	movs	r0, #50	; 0x32
 8000a5e:	f000 f9b5 	bl	8000dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d808      	bhi.n	8000a7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2032      	movs	r0, #50	; 0x32
 8000a6e:	f000 f991 	bl	8000d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_InitTick+0xf4>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e002      	b.n	8000a80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3738      	adds	r7, #56	; 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	2000009c 	.word	0x2000009c
 8000a98:	40000c00 	.word	0x40000c00
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM5_IRQHandler+0x10>)
 8000ad2:	f001 f899 	bl	8001c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000009c 	.word	0x2000009c

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 f8bf 	bl	8006cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd75 	bl	8000624 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b48:	08007818 	.word	0x08007818
  ldr r2, =_sbss
 8000b4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b50:	20017520 	.word	0x20017520

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8fc 	bl	8000d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ff0e 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fee4 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200000e4 	.word	0x200000e4

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200000e4 	.word	0x200000e4

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff4c 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da6:	f7ff ff61 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff ffb1 	bl	8000d18 <NVIC_EncodePriority>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff80 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff54 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e159      	b.n	80010b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8148 	bne.w	80010b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80a2 	beq.w	80010b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x202>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a48      	ldr	r2, [pc, #288]	; (80010dc <HAL_GPIO_Init+0x2f4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fe>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <HAL_GPIO_Init+0x2f8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a46      	ldr	r2, [pc, #280]	; (80010e4 <HAL_GPIO_Init+0x2fc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x1f6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x1f2>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e008      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fea:	2300      	movs	r3, #0
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffc:	4935      	ldr	r1, [pc, #212]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_GPIO_Init+0x304>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102e:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001058:	4a24      	ldr	r2, [pc, #144]	; (80010ec <HAL_GPIO_Init+0x304>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001082:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_GPIO_Init+0x304>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <HAL_GPIO_Init+0x304>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	f67f aea2 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40013800 	.word	0x40013800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e267      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001156:	2b08      	cmp	r3, #8
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b82      	ldr	r3, [pc, #520]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d157      	bne.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x74>
 800118a:	4b76      	ldr	r3, [pc, #472]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a75      	ldr	r2, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b70      	ldr	r3, [pc, #448]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6f      	ldr	r2, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6c      	ldr	r2, [pc, #432]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 80011bc:	4b69      	ldr	r3, [pc, #420]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a68      	ldr	r2, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcf2 	bl	8000bc4 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcee 	bl	8000bc4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e207      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fcde 	bl	8000bc4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fcda 	bl	8000bc4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1f3      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4937      	ldr	r1, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x244>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fc93 	bl	8000bc4 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fc8f 	bl	8000bc4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a8      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4925      	ldr	r1, [pc, #148]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x244>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc72 	bl	8000bc4 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc6e 	bl	8000bc4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e187      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_RCC_OscConfig+0x248>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fc52 	bl	8000bc4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc4e 	bl	8000bc4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e167      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x200>
 8001342:	e01b      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_OscConfig+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc3b 	bl	8000bc4 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e00e      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fc37 	bl	8000bc4 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d907      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e150      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	42470000 	.word	0x42470000
 800136c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ea      	bne.n	8001352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8097 	beq.w	80014b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b77      	ldr	r3, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a73      	ldr	r2, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fbf7 	bl	8000bc4 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fbf3 	bl	8000bc4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e10c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x2ea>
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x30c>
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 8001430:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d015      	beq.n	800147c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fbb8 	bl	8000bc4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fbb4 	bl	8000bc4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0cb      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ee      	beq.n	8001458 <HAL_RCC_OscConfig+0x334>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fba2 	bl	8000bc4 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fb9e 	bl	8000bc4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0b5      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a1 	beq.w	8001604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d05c      	beq.n	8001588 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d141      	bne.n	800155a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb72 	bl	8000bc4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fb6e 	bl	8000bc4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e087      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x478>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb47 	bl	8000bc4 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb43 	bl	8000bc4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e05c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x416>
 8001558:	e054      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb30 	bl	8000bc4 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb2c 	bl	8000bc4 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e038      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000
 800159c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x4ec>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fa5e 	bl	8000bc4 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fa5a 	bl	8000bc4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f8f4 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08007780 	.word	0x08007780
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b094      	sub	sp, #80	; 0x50
 80017e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
 80017ec:	2300      	movs	r3, #0
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017f0:	2300      	movs	r3, #0
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d00d      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x40>
 8001804:	2b08      	cmp	r3, #8
 8001806:	f200 80e1 	bhi.w	80019cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x34>
 800180e:	2b04      	cmp	r3, #4
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x3a>
 8001812:	e0db      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b73      	ldr	r3, [pc, #460]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001818:	e0db      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181a:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800181c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800181e:	e0d8      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001820:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001828:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	4b6d      	ldr	r3, [pc, #436]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001840:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
 800184e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001852:	4622      	mov	r2, r4
 8001854:	462b      	mov	r3, r5
 8001856:	f04f 0000 	mov.w	r0, #0
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	0159      	lsls	r1, r3, #5
 8001860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001864:	0150      	lsls	r0, r2, #5
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4621      	mov	r1, r4
 800186c:	1a51      	subs	r1, r2, r1
 800186e:	6139      	str	r1, [r7, #16]
 8001870:	4629      	mov	r1, r5
 8001872:	eb63 0301 	sbc.w	r3, r3, r1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001884:	4659      	mov	r1, fp
 8001886:	018b      	lsls	r3, r1, #6
 8001888:	4651      	mov	r1, sl
 800188a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800188e:	4651      	mov	r1, sl
 8001890:	018a      	lsls	r2, r1, #6
 8001892:	4651      	mov	r1, sl
 8001894:	ebb2 0801 	subs.w	r8, r2, r1
 8001898:	4659      	mov	r1, fp
 800189a:	eb63 0901 	sbc.w	r9, r3, r1
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018b2:	4690      	mov	r8, r2
 80018b4:	4699      	mov	r9, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	eb18 0303 	adds.w	r3, r8, r3
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	462b      	mov	r3, r5
 80018c0:	eb49 0303 	adc.w	r3, r9, r3
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018d2:	4629      	mov	r1, r5
 80018d4:	024b      	lsls	r3, r1, #9
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018dc:	4621      	mov	r1, r4
 80018de:	024a      	lsls	r2, r1, #9
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	2200      	movs	r2, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018f0:	f7fe fd16 	bl	8000320 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fc:	e058      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	2200      	movs	r2, #0
 8001906:	4618      	mov	r0, r3
 8001908:	4611      	mov	r1, r2
 800190a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
 8001914:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001918:	4642      	mov	r2, r8
 800191a:	464b      	mov	r3, r9
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	0159      	lsls	r1, r3, #5
 8001926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800192a:	0150      	lsls	r0, r2, #5
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4641      	mov	r1, r8
 8001932:	ebb2 0a01 	subs.w	sl, r2, r1
 8001936:	4649      	mov	r1, r9
 8001938:	eb63 0b01 	sbc.w	fp, r3, r1
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001948:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800194c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001950:	ebb2 040a 	subs.w	r4, r2, sl
 8001954:	eb63 050b 	sbc.w	r5, r3, fp
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	00eb      	lsls	r3, r5, #3
 8001962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001966:	00e2      	lsls	r2, r4, #3
 8001968:	4614      	mov	r4, r2
 800196a:	461d      	mov	r5, r3
 800196c:	4643      	mov	r3, r8
 800196e:	18e3      	adds	r3, r4, r3
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	464b      	mov	r3, r9
 8001974:	eb45 0303 	adc.w	r3, r5, r3
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001986:	4629      	mov	r1, r5
 8001988:	028b      	lsls	r3, r1, #10
 800198a:	4621      	mov	r1, r4
 800198c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001990:	4621      	mov	r1, r4
 8001992:	028a      	lsls	r2, r1, #10
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	2200      	movs	r2, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	61fa      	str	r2, [r7, #28]
 80019a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019a4:	f7fe fcbc 	bl	8000320 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	3301      	adds	r3, #1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3750      	adds	r7, #80	; 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	007a1200 	.word	0x007a1200

080019ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000000 	.word	0x20000000

08001a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a08:	f7ff fff0 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0a9b      	lsrs	r3, r3, #10
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08007790 	.word	0x08007790

08001a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	220f      	movs	r2, #15
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_RCC_GetClockConfig+0x60>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0207 	and.w	r2, r3, #7
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e041      	b.n	8001b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f839 	bl	8001b2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 f9ca 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d001      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e044      	b.n	8001be6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d018      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b86:	d013      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00e      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_TIM_Base_Start_IT+0xb8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d009      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d111      	bne.n	8001bd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d010      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd2:	e007      	b.n	8001be4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	40000c00 	.word	0x40000c00
 8001c04:	40014000 	.word	0x40014000

08001c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d122      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d11b      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0202 	mvn.w	r2, #2
 8001c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8ee 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8e0 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f8f1 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d122      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0204 	mvn.w	r2, #4
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8c4 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8b6 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8c7 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d122      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d11b      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0208 	mvn.w	r2, #8
 8001cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f89a 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f88c 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f89d 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d122      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d11b      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0210 	mvn.w	r2, #16
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f870 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f862 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f873 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10e      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0201 	mvn.w	r2, #1
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fdce 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	2b80      	cmp	r3, #128	; 0x80
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d107      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8e2 	bl	8001f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d10e      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d107      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f838 	bl	8001e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d107      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0220 	mvn.w	r2, #32
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8ac 	bl	8001f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <TIM_Base_SetConfig+0xe4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00f      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <TIM_Base_SetConfig+0xe8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a30      	ldr	r2, [pc, #192]	; (8001f54 <TIM_Base_SetConfig+0xec>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x38>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a2f      	ldr	r2, [pc, #188]	; (8001f58 <TIM_Base_SetConfig+0xf0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a25      	ldr	r2, [pc, #148]	; (8001f4c <TIM_Base_SetConfig+0xe4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01b      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec0:	d017      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <TIM_Base_SetConfig+0xe8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <TIM_Base_SetConfig+0xec>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00f      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <TIM_Base_SetConfig+0xf0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00b      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <TIM_Base_SetConfig+0xf4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <TIM_Base_SetConfig+0xf8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <TIM_Base_SetConfig+0x8a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <TIM_Base_SetConfig+0xfc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <TIM_Base_SetConfig+0xe4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d103      	bne.n	8001f38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	615a      	str	r2, [r3, #20]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40014400 	.word	0x40014400
 8001f64:	40014800 	.word	0x40014800

08001f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f103 0208 	add.w	r2, r3, #8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f103 0208 	add.w	r2, r3, #8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f103 0208 	add.w	r2, r3, #8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d103      	bne.n	800200a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e00c      	b.n	8002024 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3308      	adds	r3, #8
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e002      	b.n	8002018 <vListInsert+0x2e>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	d2f6      	bcs.n	8002012 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6892      	ldr	r2, [r2, #8]
 8002072:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6852      	ldr	r2, [r2, #4]
 800207c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d103      	bne.n	8002090 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80020ba:	2301      	movs	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <xQueueGenericReset+0x2e>
        __asm volatile
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	60fb      	str	r3, [r7, #12]
    }
 80020da:	bf00      	nop
 80020dc:	e7fe      	b.n	80020dc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d052      	beq.n	800218a <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d04e      	beq.n	800218a <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	2100      	movs	r1, #0
 80020f6:	fba3 2302 	umull	r2, r3, r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d000      	beq.n	8002100 <xQueueGenericReset+0x50>
 80020fe:	2101      	movs	r1, #1
 8002100:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d141      	bne.n	800218a <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002106:	f001 fe95 	bl	8003e34 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	6939      	ldr	r1, [r7, #16]
 8002114:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	441a      	add	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	3b01      	subs	r3, #1
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	441a      	add	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	22ff      	movs	r2, #255	; 0xff
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	22ff      	movs	r2, #255	; 0xff
 8002152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00f      	beq.n	8002184 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	3310      	adds	r3, #16
 8002168:	4618      	mov	r0, r3
 800216a:	f000 ff85 	bl	8003078 <xTaskRemoveFromEventList>
 800216e:	e009      	b.n	8002184 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3310      	adds	r3, #16
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff0b 	bl	8001f90 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	3324      	adds	r3, #36	; 0x24
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff06 	bl	8001f90 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002184:	f001 fe86 	bl	8003e94 <vPortExitCritical>
 8002188:	e001      	b.n	800218e <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <xQueueGenericReset+0xfa>
        __asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	60bb      	str	r3, [r7, #8]
    }
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80021aa:	697b      	ldr	r3, [r7, #20]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	4613      	mov	r3, r2
 80021c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d02e      	beq.n	800222a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021cc:	2100      	movs	r1, #0
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	fba3 2302 	umull	r2, r3, r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d000      	beq.n	80021dc <xQueueGenericCreate+0x28>
 80021da:	2101      	movs	r1, #1
 80021dc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d123      	bne.n	800222a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021ea:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80021ee:	d81c      	bhi.n	800222a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	3350      	adds	r3, #80	; 0x50
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 ff44 	bl	800408c <pvPortMalloc>
 8002204:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01c      	beq.n	8002246 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3350      	adds	r3, #80	; 0x50
 8002214:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f814 	bl	8002250 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002228:	e00d      	b.n	8002246 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <xQueueGenericCreate+0x92>
        __asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	613b      	str	r3, [r7, #16]
    }
 8002242:	bf00      	nop
 8002244:	e7fe      	b.n	8002244 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002246:	69fb      	ldr	r3, [r7, #28]
    }
 8002248:	4618      	mov	r0, r3
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e002      	b.n	8002272 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800227e:	2101      	movs	r1, #1
 8002280:	69b8      	ldr	r0, [r7, #24]
 8002282:	f7ff ff15 	bl	80020b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	68f9      	ldr	r1, [r7, #12]
 8002294:	2073      	movs	r0, #115	; 0x73
 8002296:	f003 fe55 	bl	8005f44 <SEGGER_SYSVIEW_RecordU32x3>
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b08f      	sub	sp, #60	; 0x3c
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10a      	bne.n	80022d4 <xQueueReceive+0x30>
        __asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	623b      	str	r3, [r7, #32]
    }
 80022d0:	bf00      	nop
 80022d2:	e7fe      	b.n	80022d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <xQueueReceive+0x3e>
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <xQueueReceive+0x42>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <xQueueReceive+0x44>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <xQueueReceive+0x5e>
        __asm volatile
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	61fb      	str	r3, [r7, #28]
    }
 80022fe:	bf00      	nop
 8002300:	e7fe      	b.n	8002300 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002302:	f001 f8c5 	bl	8003490 <xTaskGetSchedulerState>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <xQueueReceive+0x6e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <xQueueReceive+0x72>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <xQueueReceive+0x74>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <xQueueReceive+0x8e>
        __asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	61bb      	str	r3, [r7, #24]
    }
 800232e:	bf00      	nop
 8002330:	e7fe      	b.n	8002330 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002332:	f001 fd7f 	bl	8003e34 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002346:	f000 f8b3 	bl	80024b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	4618      	mov	r0, r3
 800234e:	f004 fb27 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 8002352:	4604      	mov	r4, r0
 8002354:	2000      	movs	r0, #0
 8002356:	f004 fb23 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 800235a:	4602      	mov	r2, r0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2101      	movs	r1, #1
 8002360:	9100      	str	r1, [sp, #0]
 8002362:	4621      	mov	r1, r4
 8002364:	205c      	movs	r0, #92	; 0x5c
 8002366:	f003 fe63 	bl	8006030 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	3310      	adds	r3, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fe7a 	bl	8003078 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002384:	f001 fd86 	bl	8003e94 <vPortExitCritical>
                return pdPASS;
 8002388:	2301      	movs	r3, #1
 800238a:	e08a      	b.n	80024a2 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002392:	f001 fd7f 	bl	8003e94 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fb01 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 800239e:	4604      	mov	r4, r0
 80023a0:	2000      	movs	r0, #0
 80023a2:	f004 fafd 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2101      	movs	r1, #1
 80023ac:	9100      	str	r1, [sp, #0]
 80023ae:	4621      	mov	r1, r4
 80023b0:	205c      	movs	r0, #92	; 0x5c
 80023b2:	f003 fe3d 	bl	8006030 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e073      	b.n	80024a2 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 ff2f 	bl	8003228 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023ce:	f001 fd61 	bl	8003e94 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023d2:	f000 fb61 	bl	8002a98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023d6:	f001 fd2d 	bl	8003e34 <vPortEnterCritical>
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d103      	bne.n	80023f0 <xQueueReceive+0x14c>
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d103      	bne.n	8002406 <xQueueReceive+0x162>
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002406:	f001 fd45 	bl	8003e94 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800240a:	1d3a      	adds	r2, r7, #4
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 ff1e 	bl	8003254 <xTaskCheckForTimeOut>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d124      	bne.n	8002468 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800241e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002420:	f000 f8be 	bl	80025a0 <prvIsQueueEmpty>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	3324      	adds	r3, #36	; 0x24
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fdb4 	bl	8002fa0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800243a:	f000 f85f 	bl	80024fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800243e:	f000 fb39 	bl	8002ab4 <xTaskResumeAll>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f af74 	bne.w	8002332 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <xQueueReceive+0x208>)
 800244c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	e76a      	b.n	8002332 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800245c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800245e:	f000 f84d 	bl	80024fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002462:	f000 fb27 	bl	8002ab4 <xTaskResumeAll>
 8002466:	e764      	b.n	8002332 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800246a:	f000 f847 	bl	80024fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800246e:	f000 fb21 	bl	8002ab4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002474:	f000 f894 	bl	80025a0 <prvIsQueueEmpty>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f43f af59 	beq.w	8002332 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	4618      	mov	r0, r3
 8002484:	f004 fa8c 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 8002488:	4604      	mov	r4, r0
 800248a:	2000      	movs	r0, #0
 800248c:	f004 fa88 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 8002490:	4602      	mov	r2, r0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2101      	movs	r1, #1
 8002496:	9100      	str	r1, [sp, #0]
 8002498:	4621      	mov	r1, r4
 800249a:	205c      	movs	r0, #92	; 0x5c
 800249c:	f003 fdc8 	bl	8006030 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80024a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3734      	adds	r7, #52	; 0x34
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000ed04 	.word	0xe000ed04

080024b0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	441a      	add	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d303      	bcc.n	80024e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68d9      	ldr	r1, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	461a      	mov	r2, r3
 80024ee:	6838      	ldr	r0, [r7, #0]
 80024f0:	f004 fc14 	bl	8006d1c <memcpy>
    }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002504:	f001 fc96 	bl	8003e34 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800250e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002510:	e011      	b.n	8002536 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3324      	adds	r3, #36	; 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fdaa 	bl	8003078 <xTaskRemoveFromEventList>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800252a:	f000 fef9 	bl	8003320 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	3b01      	subs	r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	dce9      	bgt.n	8002512 <prvUnlockQueue+0x16>
 800253e:	e000      	b.n	8002542 <prvUnlockQueue+0x46>
                    break;
 8002540:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800254a:	f001 fca3 	bl	8003e94 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800254e:	f001 fc71 	bl	8003e34 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002558:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800255a:	e011      	b.n	8002580 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d012      	beq.n	800258a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3310      	adds	r3, #16
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fd85 	bl	8003078 <xTaskRemoveFromEventList>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002574:	f000 fed4 	bl	8003320 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	3b01      	subs	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002584:	2b00      	cmp	r3, #0
 8002586:	dce9      	bgt.n	800255c <prvUnlockQueue+0x60>
 8002588:	e000      	b.n	800258c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800258a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002594:	f001 fc7e 	bl	8003e94 <vPortExitCritical>
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025a8:	f001 fc44 	bl	8003e34 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80025b4:	2301      	movs	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e001      	b.n	80025be <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025be:	f001 fc69 	bl	8003e94 <vPortExitCritical>

    return xReturn;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	60fb      	str	r3, [r7, #12]
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d024      	beq.n	8002646 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e01e      	b.n	8002640 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002602:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <vQueueAddToRegistry+0xa8>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d105      	bne.n	800261e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <vQueueAddToRegistry+0xa8>)
 8002618:	4413      	add	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
                    break;
 800261c:	e013      	b.n	8002646 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <vQueueAddToRegistry+0x6e>
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <vQueueAddToRegistry+0xa8>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <vQueueAddToRegistry+0xa8>)
 8002636:	4413      	add	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b07      	cmp	r3, #7
 8002644:	d9dd      	bls.n	8002602 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00f      	beq.n	800266c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 f9a0 	bl	80069a0 <SEGGER_SYSVIEW_ShrinkId>
 8002660:	4601      	mov	r1, r0
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	2071      	movs	r0, #113	; 0x71
 8002668:	f003 fc12 	bl	8005e90 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200000e8 	.word	0x200000e8

08002678 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002688:	f001 fbd4 	bl	8003e34 <vPortEnterCritical>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d103      	bne.n	80026a2 <vQueueWaitForMessageRestricted+0x2a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d103      	bne.n	80026b8 <vQueueWaitForMessageRestricted+0x40>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b8:	f001 fbec 	bl	8003e94 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fc8b 	bl	8002fe8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff12 	bl	80024fc <prvUnlockQueue>
    }
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 fcc9 	bl	800408c <pvPortMalloc>
 80026fa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d013      	beq.n	800272a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002702:	2058      	movs	r0, #88	; 0x58
 8002704:	f001 fcc2 	bl	800408c <pvPortMalloc>
 8002708:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002710:	2258      	movs	r2, #88	; 0x58
 8002712:	2100      	movs	r1, #0
 8002714:	69f8      	ldr	r0, [r7, #28]
 8002716:	f004 fb0f 	bl	8006d38 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
 8002720:	e005      	b.n	800272e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f001 fd6c 	bl	8004200 <vPortFree>
 8002728:	e001      	b.n	800272e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	2300      	movs	r3, #0
 8002738:	9303      	str	r3, [sp, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f80e 	bl	800276c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002750:	69f8      	ldr	r0, [r7, #28]
 8002752:	f000 f899 	bl	8002888 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002756:	2301      	movs	r3, #1
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e002      	b.n	8002762 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002762:	69bb      	ldr	r3, [r7, #24]
    }
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	21a5      	movs	r1, #165	; 0xa5
 8002786:	f004 fad7 	bl	8006d38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002794:	3b01      	subs	r3, #1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f023 0307 	bic.w	r3, r3, #7
 80027a2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	617b      	str	r3, [r7, #20]
    }
 80027c0:	bf00      	nop
 80027c2:	e7fe      	b.n	80027c2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01e      	beq.n	8002808 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e012      	b.n	80027f6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	7819      	ldrb	r1, [r3, #0]
 80027d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	3334      	adds	r3, #52	; 0x34
 80027e0:	460a      	mov	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d9e9      	bls.n	80027d0 <prvInitialiseNewTask+0x64>
 80027fc:	e000      	b.n	8002800 <prvInitialiseNewTask+0x94>
            {
                break;
 80027fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	2b04      	cmp	r3, #4
 800280c:	d90a      	bls.n	8002824 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	613b      	str	r3, [r7, #16]
    }
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	2b04      	cmp	r3, #4
 8002828:	d901      	bls.n	800282e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800282a:	2304      	movs	r3, #4
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002838:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	3304      	adds	r3, #4
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fbc6 	bl	8001fd0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	3318      	adds	r3, #24
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fbc1 	bl	8001fd0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002852:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	f1c3 0205 	rsb	r2, r3, #5
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	69b8      	ldr	r0, [r7, #24]
 800286a:	f001 f933 	bl	8003ad4 <pxPortInitialiseStack>
 800286e:	4602      	mov	r2, r0
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002880:	bf00      	nop
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002890:	f001 fad0 	bl	8003e34 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <prvAddNewTaskToReadyList+0x134>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	4a48      	ldr	r2, [pc, #288]	; (80029bc <prvAddNewTaskToReadyList+0x134>)
 800289c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800289e:	4b48      	ldr	r3, [pc, #288]	; (80029c0 <prvAddNewTaskToReadyList+0x138>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80028a6:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <prvAddNewTaskToReadyList+0x138>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <prvAddNewTaskToReadyList+0x134>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d110      	bne.n	80028d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028b4:	f000 fd52 	bl	800335c <prvInitialiseTaskLists>
 80028b8:	e00d      	b.n	80028d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <prvAddNewTaskToReadyList+0x13c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028c2:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <prvAddNewTaskToReadyList+0x138>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d802      	bhi.n	80028d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028d0:	4a3b      	ldr	r2, [pc, #236]	; (80029c0 <prvAddNewTaskToReadyList+0x138>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028d6:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <prvAddNewTaskToReadyList+0x140>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <prvAddNewTaskToReadyList+0x140>)
 80028de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <prvAddNewTaskToReadyList+0x140>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <prvAddNewTaskToReadyList+0x94>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 ff8f 	bl	8006814 <SEGGER_SYSVIEW_OnTaskCreate>
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	461d      	mov	r5, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461c      	mov	r4, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	1ae3      	subs	r3, r4, r3
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	462b      	mov	r3, r5
 8002918:	f001 fe34 	bl	8004584 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fffc 	bl	800691c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	2201      	movs	r2, #1
 800292a:	409a      	lsls	r2, r3
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <prvAddNewTaskToReadyList+0x144>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	4a26      	ldr	r2, [pc, #152]	; (80029cc <prvAddNewTaskToReadyList+0x144>)
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	4925      	ldr	r1, [pc, #148]	; (80029d0 <prvAddNewTaskToReadyList+0x148>)
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3304      	adds	r3, #4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	3204      	adds	r2, #4
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1d1a      	adds	r2, r3, #4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <prvAddNewTaskToReadyList+0x148>)
 800297a:	441a      	add	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	4912      	ldr	r1, [pc, #72]	; (80029d0 <prvAddNewTaskToReadyList+0x148>)
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <prvAddNewTaskToReadyList+0x148>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4403      	add	r3, r0
 80029a0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029a2:	f001 fa77 	bl	8003e94 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <prvAddNewTaskToReadyList+0x13c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <prvAddNewTaskToReadyList+0x138>)
 80029b0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000200 	.word	0x20000200
 80029c0:	20000128 	.word	0x20000128
 80029c4:	2000020c 	.word	0x2000020c
 80029c8:	2000021c 	.word	0x2000021c
 80029cc:	20000208 	.word	0x20000208
 80029d0:	2000012c 	.word	0x2000012c

080029d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <vTaskStartScheduler+0xa4>)
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2282      	movs	r2, #130	; 0x82
 80029e6:	4925      	ldr	r1, [pc, #148]	; (8002a7c <vTaskStartScheduler+0xa8>)
 80029e8:	4825      	ldr	r0, [pc, #148]	; (8002a80 <vTaskStartScheduler+0xac>)
 80029ea:	f7ff fe79 	bl	80026e0 <xTaskCreate>
 80029ee:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80029f6:	f000 fde9 	bl	80035cc <xTimerCreateTimerTask>
 80029fa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d124      	bne.n	8002a4c <vTaskStartScheduler+0x78>
        __asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	60bb      	str	r3, [r7, #8]
    }
 8002a14:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <vTaskStartScheduler+0xb0>)
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <vTaskStartScheduler+0xb4>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <vTaskStartScheduler+0xb8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <vTaskStartScheduler+0xbc>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <vTaskStartScheduler+0xa4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d102      	bne.n	8002a3c <vTaskStartScheduler+0x68>
 8002a36:	f003 fed1 	bl	80067dc <SEGGER_SYSVIEW_OnIdle>
 8002a3a:	e004      	b.n	8002a46 <vTaskStartScheduler+0x72>
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <vTaskStartScheduler+0xbc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 ff29 	bl	8006898 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a46:	f001 f8d5 	bl	8003bf4 <xPortStartScheduler>
 8002a4a:	e00e      	b.n	8002a6a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d10a      	bne.n	8002a6a <vTaskStartScheduler+0x96>
        __asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	607b      	str	r3, [r7, #4]
    }
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <vTaskStartScheduler+0xc0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000224 	.word	0x20000224
 8002a7c:	080076a8 	.word	0x080076a8
 8002a80:	08003339 	.word	0x08003339
 8002a84:	20000220 	.word	0x20000220
 8002a88:	2000020c 	.word	0x2000020c
 8002a8c:	20000204 	.word	0x20000204
 8002a90:	20000128 	.word	0x20000128
 8002a94:	2000000c 	.word	0x2000000c

08002a98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <vTaskSuspendAll+0x18>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <vTaskSuspendAll+0x18>)
 8002aa4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	20000228 	.word	0x20000228

08002ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <xTaskResumeAll+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	607b      	str	r3, [r7, #4]
    }
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ae0:	f001 f9a8 	bl	8003e34 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <xTaskResumeAll+0x1c4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <xTaskResumeAll+0x1c4>)
 8002aec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <xTaskResumeAll+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 80b8 	bne.w	8002c68 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002af8:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <xTaskResumeAll+0x1c8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80b3 	beq.w	8002c68 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b02:	e08e      	b.n	8002c22 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b04:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <xTaskResumeAll+0x1cc>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	6a12      	ldr	r2, [r2, #32]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	69d2      	ldr	r2, [r2, #28]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3318      	adds	r3, #24
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d103      	bne.n	8002b3a <xTaskResumeAll+0x86>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	68d2      	ldr	r2, [r2, #12]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	6892      	ldr	r2, [r2, #8]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d103      	bne.n	8002b78 <xTaskResumeAll+0xc4>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 fec6 	bl	800691c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <xTaskResumeAll+0x1d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	4a39      	ldr	r2, [pc, #228]	; (8002c84 <xTaskResumeAll+0x1d0>)
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4938      	ldr	r1, [pc, #224]	; (8002c88 <xTaskResumeAll+0x1d4>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	3204      	adds	r2, #4
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	1d1a      	adds	r2, r3, #4
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <xTaskResumeAll+0x1d4>)
 8002be6:	441a      	add	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	615a      	str	r2, [r3, #20]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4925      	ldr	r1, [pc, #148]	; (8002c88 <xTaskResumeAll+0x1d4>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	1c59      	adds	r1, r3, #1
 8002c00:	4821      	ldr	r0, [pc, #132]	; (8002c88 <xTaskResumeAll+0x1d4>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4403      	add	r3, r0
 8002c0c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <xTaskResumeAll+0x1d8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <xTaskResumeAll+0x1dc>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <xTaskResumeAll+0x1cc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f47f af6c 	bne.w	8002b04 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c32:	f000 fc11 	bl	8003458 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <xTaskResumeAll+0x1e0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c42:	f000 f84b 	bl	8002cdc <xTaskIncrementTick>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <xTaskResumeAll+0x1dc>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f1      	bne.n	8002c42 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <xTaskResumeAll+0x1e0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <xTaskResumeAll+0x1dc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c68:	f001 f914 	bl	8003e94 <vPortExitCritical>

    return xAlreadyYielded;
 8002c6c:	697b      	ldr	r3, [r7, #20]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000228 	.word	0x20000228
 8002c7c:	20000200 	.word	0x20000200
 8002c80:	200001c0 	.word	0x200001c0
 8002c84:	20000208 	.word	0x20000208
 8002c88:	2000012c 	.word	0x2000012c
 8002c8c:	20000128 	.word	0x20000128
 8002c90:	20000214 	.word	0x20000214
 8002c94:	20000210 	.word	0x20000210

08002c98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <xTaskGetTickCount+0x1c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000204 	.word	0x20000204

08002cb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cbe:	f001 f9a5 	bl	800400c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <xTaskGetTickCountFromISR+0x20>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ccc:	683b      	ldr	r3, [r7, #0]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000204 	.word	0x20000204

08002cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce6:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <xTaskIncrementTick+0x1cc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 80d1 	bne.w	8002e92 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cf0:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <xTaskIncrementTick+0x1d0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002cf8:	4a6c      	ldr	r2, [pc, #432]	; (8002eac <xTaskIncrementTick+0x1d0>)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d120      	bne.n	8002d46 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <xTaskIncrementTick+0x1d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
    }
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <xTaskIncrementTick+0x46>
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <xTaskIncrementTick+0x1d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <xTaskIncrementTick+0x1d8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a60      	ldr	r2, [pc, #384]	; (8002eb0 <xTaskIncrementTick+0x1d4>)
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <xTaskIncrementTick+0x1d8>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <xTaskIncrementTick+0x1dc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <xTaskIncrementTick+0x1dc>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	f000 fb89 	bl	8003458 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <xTaskIncrementTick+0x1e0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f0c0 80a5 	bcc.w	8002e9c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <xTaskIncrementTick+0x1d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5c:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <xTaskIncrementTick+0x1e0>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	601a      	str	r2, [r3, #0]
                    break;
 8002d64:	e09a      	b.n	8002e9c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d66:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <xTaskIncrementTick+0x1d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d76:	6a3a      	ldr	r2, [r7, #32]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d203      	bcs.n	8002d86 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d7e:	4a4f      	ldr	r2, [pc, #316]	; (8002ebc <xTaskIncrementTick+0x1e0>)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d84:	e08a      	b.n	8002e9c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	68d2      	ldr	r2, [r2, #12]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	6892      	ldr	r2, [r2, #8]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	3304      	adds	r3, #4
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d103      	bne.n	8002db4 <xTaskIncrementTick+0xd8>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01e      	beq.n	8002e0a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	6a12      	ldr	r2, [r2, #32]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	69d2      	ldr	r2, [r2, #28]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3318      	adds	r3, #24
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d103      	bne.n	8002dfa <xTaskIncrementTick+0x11e>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fd85 	bl	800691c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2201      	movs	r2, #1
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <xTaskIncrementTick+0x1e4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <xTaskIncrementTick+0x1e4>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	4926      	ldr	r1, [pc, #152]	; (8002ec4 <xTaskIncrementTick+0x1e8>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3304      	adds	r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	3204      	adds	r2, #4
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	1d1a      	adds	r2, r3, #4
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <xTaskIncrementTick+0x1e8>)
 8002e68:	441a      	add	r2, r3
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	615a      	str	r2, [r3, #20]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	4914      	ldr	r1, [pc, #80]	; (8002ec4 <xTaskIncrementTick+0x1e8>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	1c59      	adds	r1, r3, #1
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <xTaskIncrementTick+0x1e8>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4403      	add	r3, r0
 8002e8e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e90:	e75f      	b.n	8002d52 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <xTaskIncrementTick+0x1ec>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <xTaskIncrementTick+0x1ec>)
 8002e9a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000228 	.word	0x20000228
 8002eac:	20000204 	.word	0x20000204
 8002eb0:	200001b8 	.word	0x200001b8
 8002eb4:	200001bc 	.word	0x200001bc
 8002eb8:	20000218 	.word	0x20000218
 8002ebc:	20000220 	.word	0x20000220
 8002ec0:	20000208 	.word	0x20000208
 8002ec4:	2000012c 	.word	0x2000012c
 8002ec8:	20000210 	.word	0x20000210

08002ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <vTaskSwitchContext+0xbc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002eda:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <vTaskSwitchContext+0xc0>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002ee0:	e04d      	b.n	8002f7e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <vTaskSwitchContext+0xc0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <vTaskSwitchContext+0xc4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	f1c3 031f 	rsb	r3, r3, #31
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	4925      	ldr	r1, [pc, #148]	; (8002f94 <vTaskSwitchContext+0xc8>)
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	607b      	str	r3, [r7, #4]
    }
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <vTaskSwitchContext+0x5a>
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <vTaskSwitchContext+0xc8>)
 8002f34:	4413      	add	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d104      	bne.n	8002f58 <vTaskSwitchContext+0x8c>
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <vTaskSwitchContext+0xcc>)
 8002f60:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <vTaskSwitchContext+0xcc>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <vTaskSwitchContext+0xd0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d102      	bne.n	8002f74 <vTaskSwitchContext+0xa8>
 8002f6e:	f003 fc35 	bl	80067dc <SEGGER_SYSVIEW_OnIdle>
}
 8002f72:	e004      	b.n	8002f7e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <vTaskSwitchContext+0xcc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fc8d 	bl	8006898 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000228 	.word	0x20000228
 8002f8c:	20000214 	.word	0x20000214
 8002f90:	20000208 	.word	0x20000208
 8002f94:	2000012c 	.word	0x2000012c
 8002f98:	20000128 	.word	0x20000128
 8002f9c:	20000224 	.word	0x20000224

08002fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	60fb      	str	r3, [r7, #12]
    }
 8002fc2:	bf00      	nop
 8002fc4:	e7fe      	b.n	8002fc4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <vTaskPlaceOnEventList+0x44>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3318      	adds	r3, #24
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff f80b 	bl	8001fea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f000 fa78 	bl	80034cc <prvAddCurrentTaskToDelayedList>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000128 	.word	0x20000128

08002fe8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	613b      	str	r3, [r7, #16]
    }
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	61da      	str	r2, [r3, #28]
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <vTaskPlaceOnEventListRestricted+0x8c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	3218      	adds	r2, #24
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f103 0218 	add.w	r2, r3, #24
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800305e:	2024      	movs	r0, #36	; 0x24
 8003060:	f002 febc 	bl	8005ddc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	68b8      	ldr	r0, [r7, #8]
 8003068:	f000 fa30 	bl	80034cc <prvAddCurrentTaskToDelayedList>
    }
 800306c:	bf00      	nop
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000128 	.word	0x20000128

08003078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60fb      	str	r3, [r7, #12]
    }
 80030a0:	bf00      	nop
 80030a2:	e7fe      	b.n	80030a2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	6a12      	ldr	r2, [r2, #32]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	69d2      	ldr	r2, [r2, #28]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	3318      	adds	r3, #24
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d103      	bne.n	80030d2 <xTaskRemoveFromEventList+0x5a>
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2200      	movs	r2, #0
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e2:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <xTaskRemoveFromEventList+0x198>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d162      	bne.n	80031b0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	68d2      	ldr	r2, [r2, #12]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	3304      	adds	r3, #4
 800310c:	429a      	cmp	r2, r3
 800310e:	d103      	bne.n	8003118 <xTaskRemoveFromEventList+0xa0>
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1e5a      	subs	r2, r3, #1
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fbf6 	bl	800691c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <xTaskRemoveFromEventList+0x19c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4313      	orrs	r3, r2
 800313e:	4a35      	ldr	r2, [pc, #212]	; (8003214 <xTaskRemoveFromEventList+0x19c>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4934      	ldr	r1, [pc, #208]	; (8003218 <xTaskRemoveFromEventList+0x1a0>)
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3304      	adds	r3, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	3204      	adds	r2, #4
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	1d1a      	adds	r2, r3, #4
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <xTaskRemoveFromEventList+0x1a0>)
 8003186:	441a      	add	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	615a      	str	r2, [r3, #20]
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	4921      	ldr	r1, [pc, #132]	; (8003218 <xTaskRemoveFromEventList+0x1a0>)
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	481d      	ldr	r0, [pc, #116]	; (8003218 <xTaskRemoveFromEventList+0x1a0>)
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4403      	add	r3, r0
 80031ac:	6019      	str	r1, [r3, #0]
 80031ae:	e01b      	b.n	80031e8 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <xTaskRemoveFromEventList+0x1a4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	61da      	str	r2, [r3, #28]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	621a      	str	r2, [r3, #32]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	3218      	adds	r2, #24
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f103 0218 	add.w	r2, r3, #24
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <xTaskRemoveFromEventList+0x1a4>)
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <xTaskRemoveFromEventList+0x1a4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <xTaskRemoveFromEventList+0x1a4>)
 80031e6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <xTaskRemoveFromEventList+0x1a8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d905      	bls.n	8003202 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <xTaskRemoveFromEventList+0x1ac>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e001      	b.n	8003206 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000228 	.word	0x20000228
 8003214:	20000208 	.word	0x20000208
 8003218:	2000012c 	.word	0x2000012c
 800321c:	200001c0 	.word	0x200001c0
 8003220:	20000128 	.word	0x20000128
 8003224:	20000214 	.word	0x20000214

08003228 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <vTaskInternalSetTimeOutState+0x24>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <vTaskInternalSetTimeOutState+0x28>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000218 	.word	0x20000218
 8003250:	20000204 	.word	0x20000204

08003254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	613b      	str	r3, [r7, #16]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	60fb      	str	r3, [r7, #12]
    }
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003296:	f000 fdcd 	bl	8003e34 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <xTaskCheckForTimeOut+0xc4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d102      	bne.n	80032ba <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e026      	b.n	8003308 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <xTaskCheckForTimeOut+0xc8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d00a      	beq.n	80032dc <xTaskCheckForTimeOut+0x88>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d305      	bcc.n	80032dc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e015      	b.n	8003308 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d20b      	bcs.n	80032fe <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad2      	subs	r2, r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff98 	bl	8003228 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e004      	b.n	8003308 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003308:	f000 fdc4 	bl	8003e94 <vPortExitCritical>

    return xReturn;
 800330c:	69fb      	ldr	r3, [r7, #28]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000204 	.word	0x20000204
 800331c:	20000218 	.word	0x20000218

08003320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <vTaskMissedYield+0x14>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	20000214 	.word	0x20000214

08003338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003340:	f000 f84c 	bl	80033dc <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <prvIdleTask+0x20>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003354:	e7f4      	b.n	8003340 <prvIdleTask+0x8>
 8003356:	bf00      	nop
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e00c      	b.n	8003382 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <prvInitialiseTaskLists+0x60>)
 8003374:	4413      	add	r3, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fe0a 	bl	8001f90 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d9ef      	bls.n	8003368 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <prvInitialiseTaskLists+0x64>)
 800338a:	f7fe fe01 	bl	8001f90 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800338e:	480d      	ldr	r0, [pc, #52]	; (80033c4 <prvInitialiseTaskLists+0x68>)
 8003390:	f7fe fdfe 	bl	8001f90 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003394:	480c      	ldr	r0, [pc, #48]	; (80033c8 <prvInitialiseTaskLists+0x6c>)
 8003396:	f7fe fdfb 	bl	8001f90 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <prvInitialiseTaskLists+0x70>)
 800339c:	f7fe fdf8 	bl	8001f90 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <prvInitialiseTaskLists+0x74>)
 80033a2:	f7fe fdf5 	bl	8001f90 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x78>)
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <prvInitialiseTaskLists+0x64>)
 80033aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <prvInitialiseTaskLists+0x7c>)
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000012c 	.word	0x2000012c
 80033c0:	20000190 	.word	0x20000190
 80033c4:	200001a4 	.word	0x200001a4
 80033c8:	200001c0 	.word	0x200001c0
 80033cc:	200001d4 	.word	0x200001d4
 80033d0:	200001ec 	.word	0x200001ec
 80033d4:	200001b8 	.word	0x200001b8
 80033d8:	200001bc 	.word	0x200001bc

080033dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e2:	e019      	b.n	8003418 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80033e4:	f000 fd26 	bl	8003e34 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <prvCheckTasksWaitingTermination+0x50>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fe31 	bl	800205c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <prvCheckTasksWaitingTermination+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3b01      	subs	r3, #1
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <prvCheckTasksWaitingTermination+0x54>)
 8003402:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800340c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800340e:	f000 fd41 	bl	8003e94 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f810 	bl	8003438 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e1      	bne.n	80033e4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200001d4 	.word	0x200001d4
 8003430:	20000200 	.word	0x20000200
 8003434:	200001e8 	.word	0x200001e8

08003438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fedb 	bl	8004200 <vPortFree>
            vPortFree( pxTCB );
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fed8 	bl	8004200 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <prvResetNextTaskUnblockTime+0x30>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <prvResetNextTaskUnblockTime+0x34>)
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800346e:	e005      	b.n	800347c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <prvResetNextTaskUnblockTime+0x30>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <prvResetNextTaskUnblockTime+0x34>)
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	200001b8 	.word	0x200001b8
 800348c:	20000220 	.word	0x20000220

08003490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003496:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <xTaskGetSchedulerState+0x34>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800349e:	2301      	movs	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e008      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <xTaskGetSchedulerState+0x38>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034ac:	2302      	movs	r3, #2
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	e001      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034b6:	687b      	ldr	r3, [r7, #4]
    }
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	2000020c 	.word	0x2000020c
 80034c8:	20000228 	.word	0x20000228

080034cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fdba 	bl	800205c <uxListRemove>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2201      	movs	r2, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4013      	ands	r3, r2
 8003502:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003504:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d124      	bne.n	8003558 <prvAddCurrentTaskToDelayedList+0x8c>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d021      	beq.n	8003558 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	3204      	adds	r2, #4
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1d1a      	adds	r2, r3, #4
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003556:	e026      	b.n	80035a6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d209      	bcs.n	8003584 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7fe fd34 	bl	8001fea <vListInsert>
}
 8003582:	e010      	b.n	80035a6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe fd2a 	bl	8001fea <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d202      	bcs.n	80035a6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6013      	str	r3, [r2, #0]
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000204 	.word	0x20000204
 80035b4:	20000128 	.word	0x20000128
 80035b8:	20000208 	.word	0x20000208
 80035bc:	200001ec 	.word	0x200001ec
 80035c0:	200001bc 	.word	0x200001bc
 80035c4:	200001b8 	.word	0x200001b8
 80035c8:	20000220 	.word	0x20000220

080035cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035d6:	f000 fa47 	bl	8003a68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <xTimerCreateTimerTask+0x54>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <xTimerCreateTimerTask+0x58>)
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2302      	movs	r3, #2
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035f0:	490d      	ldr	r1, [pc, #52]	; (8003628 <xTimerCreateTimerTask+0x5c>)
 80035f2:	480e      	ldr	r0, [pc, #56]	; (800362c <xTimerCreateTimerTask+0x60>)
 80035f4:	f7ff f874 	bl	80026e0 <xTaskCreate>
 80035f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	603b      	str	r3, [r7, #0]
    }
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003616:	687b      	ldr	r3, [r7, #4]
    }
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	2000025c 	.word	0x2000025c
 8003624:	20000260 	.word	0x20000260
 8003628:	080076b0 	.word	0x080076b0
 800362c:	080036d5 	.word	0x080036d5

08003630 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800363c:	e008      	b.n	8003650 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	18d1      	adds	r1, r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f8dd 	bl	800381c <prvInsertTimerInActiveList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <prvReloadTimer+0xe>
        }
    }
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <prvProcessExpiredTimer+0x5c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fce5 	bl	800205c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ffc3 	bl	8003630 <prvReloadTimer>
 80036aa:	e008      	b.n	80036be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	4798      	blx	r3
    }
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000254 	.word	0x20000254

080036d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f857 	bl	8003794 <prvGetNextExpireTime>
 80036e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f803 	bl	80036f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036f2:	f000 f8d5 	bl	80038a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f6:	e7f1      	b.n	80036dc <prvTimerTask+0x8>

080036f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003702:	f7ff f9c9 	bl	8002a98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f866 	bl	80037dc <prvSampleTimeNow>
 8003710:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d130      	bne.n	800377a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d806      	bhi.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003726:	f7ff f9c5 	bl	8002ab4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ffa1 	bl	8003674 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003732:	e024      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <prvProcessTimerOrBlockTask+0x90>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <prvProcessTimerOrBlockTask+0x50>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <prvProcessTimerOrBlockTask+0x52>
 8003748:	2300      	movs	r3, #0
 800374a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <prvProcessTimerOrBlockTask+0x94>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	f7fe ff8d 	bl	8002678 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800375e:	f7ff f9a9 	bl	8002ab4 <xTaskResumeAll>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <prvProcessTimerOrBlockTask+0x98>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
    }
 8003778:	e001      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800377a:	f7ff f99b 	bl	8002ab4 <xTaskResumeAll>
    }
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000258 	.word	0x20000258
 800378c:	2000025c 	.word	0x2000025c
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <prvGetNextExpireTime+0x44>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <prvGetNextExpireTime+0x16>
 80037a6:	2201      	movs	r2, #1
 80037a8:	e000      	b.n	80037ac <prvGetNextExpireTime+0x18>
 80037aa:	2200      	movs	r2, #0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <prvGetNextExpireTime+0x44>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e001      	b.n	80037c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037c8:	68fb      	ldr	r3, [r7, #12]
    }
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000254 	.word	0x20000254

080037dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037e4:	f7ff fa58 	bl	8002c98 <xTaskGetTickCount>
 80037e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <prvSampleTimeNow+0x3c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d205      	bcs.n	8003800 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037f4:	f000 f912 	bl	8003a1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e002      	b.n	8003806 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <prvSampleTimeNow+0x3c>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800380c:	68fb      	ldr	r3, [r7, #12]
    }
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000264 	.word	0x20000264

0800381c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d812      	bhi.n	8003868 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e01b      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <prvInsertTimerInActiveList+0x7c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe fbc2 	bl	8001fea <vListInsert>
 8003866:	e012      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d206      	bcs.n	800387e <prvInsertTimerInActiveList+0x62>
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e007      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvInsertTimerInActiveList+0x80>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe fbae 	bl	8001fea <vListInsert>
            }
        }

        return xProcessTimerNow;
 800388e:	697b      	ldr	r3, [r7, #20]
    }
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000258 	.word	0x20000258
 800389c:	20000254 	.word	0x20000254

080038a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038a6:	e0a6      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f2c0 80a2 	blt.w	80039f4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fbcb 	bl	800205c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff87 	bl	80037dc <prvSampleTimeNow>
 80038ce:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	f200 808e 	bhi.w	80039f6 <prvProcessReceivedCommands+0x156>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <prvProcessReceivedCommands+0x40>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003905 	.word	0x08003905
 80038e8:	0800396d 	.word	0x0800396d
 80038ec:	08003981 	.word	0x08003981
 80038f0:	080039cb 	.word	0x080039cb
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003905 	.word	0x08003905
 80038fc:	0800396d 	.word	0x0800396d
 8003900:	08003981 	.word	0x08003981
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	18d1      	adds	r1, r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	69f8      	ldr	r0, [r7, #28]
 8003924:	f7ff ff7a 	bl	800381c <prvInsertTimerInActiveList>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4413      	add	r3, r2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4619      	mov	r1, r3
 8003948:	69f8      	ldr	r0, [r7, #28]
 800394a:	f7ff fe71 	bl	8003630 <prvReloadTimer>
 800394e:	e008      	b.n	8003962 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	69f8      	ldr	r0, [r7, #28]
 8003968:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800396a:	e044      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800397e:	e03a      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	617b      	str	r3, [r7, #20]
    }
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	18d1      	adds	r1, r2, r3
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	69f8      	ldr	r0, [r7, #28]
 80039c4:	f7ff ff2a 	bl	800381c <prvInsertTimerInActiveList>
                        break;
 80039c8:	e015      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80039d8:	69f8      	ldr	r0, [r7, #28]
 80039da:	f000 fc11 	bl	8004200 <vPortFree>
 80039de:	e00a      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039f2:	e000      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039f4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <prvProcessReceivedCommands+0x178>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f107 0108 	add.w	r1, r7, #8
 80039fe:	2200      	movs	r2, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fc4f 	bl	80022a4 <xQueueReceive>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f af4d 	bne.w	80038a8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000025c 	.word	0x2000025c

08003a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a22:	e009      	b.n	8003a38 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f7ff fe1e 	bl	8003674 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvSwitchTimerLists+0x48>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a4e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <prvSwitchTimerLists+0x48>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
    }
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000254 	.word	0x20000254
 8003a64:	20000258 	.word	0x20000258

08003a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a6c:	f000 f9e2 	bl	8003e34 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a70:	4b12      	ldr	r3, [pc, #72]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a78:	4811      	ldr	r0, [pc, #68]	; (8003ac0 <prvCheckForValidListAndQueue+0x58>)
 8003a7a:	f7fe fa89 	bl	8001f90 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a7e:	4811      	ldr	r0, [pc, #68]	; (8003ac4 <prvCheckForValidListAndQueue+0x5c>)
 8003a80:	f7fe fa86 	bl	8001f90 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <prvCheckForValidListAndQueue+0x60>)
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <prvCheckForValidListAndQueue+0x58>)
 8003a88:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <prvCheckForValidListAndQueue+0x64>)
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <prvCheckForValidListAndQueue+0x5c>)
 8003a8e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a90:	2200      	movs	r2, #0
 8003a92:	210c      	movs	r1, #12
 8003a94:	200a      	movs	r0, #10
 8003a96:	f7fe fb8d 	bl	80021b4 <xQueueGenericCreate>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003a9e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <prvCheckForValidListAndQueue+0x68>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fd8c 	bl	80025cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ab4:	f000 f9ee 	bl	8003e94 <vPortExitCritical>
    }
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2000025c 	.word	0x2000025c
 8003ac0:	2000022c 	.word	0x2000022c
 8003ac4:	20000240 	.word	0x20000240
 8003ac8:	20000254 	.word	0x20000254
 8003acc:	20000258 	.word	0x20000258
 8003ad0:	080076b8 	.word	0x080076b8

08003ad4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3b04      	subs	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b04      	subs	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3b04      	subs	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <pxPortInitialiseStack+0x64>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3b14      	subs	r3, #20
 8003b0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3b04      	subs	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f06f 0202 	mvn.w	r2, #2
 8003b22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b20      	subs	r3, #32
 8003b28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	08003b3d 	.word	0x08003b3d

08003b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <prvTaskExitError+0x54>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d00a      	beq.n	8003b66 <prvTaskExitError+0x2a>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <prvTaskExitError+0x28>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
    }
 8003b78:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b7a:	bf00      	nop
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0fc      	beq.n	8003b7c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20000010 	.word	0x20000010
	...

08003ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <pxCurrentTCBConst2>)
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	6808      	ldr	r0, [r1, #0]
 8003ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003baa:	f380 8809 	msr	PSP, r0
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8811 	msr	BASEPRI, r0
 8003bba:	4770      	bx	lr
 8003bbc:	f3af 8000 	nop.w

08003bc0 <pxCurrentTCBConst2>:
 8003bc0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003bc8:	4808      	ldr	r0, [pc, #32]	; (8003bec <prvPortStartFirstTask+0x24>)
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	6800      	ldr	r0, [r0, #0]
 8003bce:	f380 8808 	msr	MSP, r0
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f380 8814 	msr	CONTROL, r0
 8003bda:	b662      	cpsie	i
 8003bdc:	b661      	cpsie	f
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	df00      	svc	0
 8003be8:	bf00      	nop
 8003bea:	0000      	.short	0x0000
 8003bec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop

08003bf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bfa:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <xPortStartScheduler+0x120>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <xPortStartScheduler+0x124>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <xPortStartScheduler+0x26>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	613b      	str	r3, [r7, #16]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <xPortStartScheduler+0x120>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <xPortStartScheduler+0x128>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10a      	bne.n	8003c3a <xPortStartScheduler+0x46>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
    }
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <xPortStartScheduler+0x12c>)
 8003c3c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <xPortStartScheduler+0x130>)
 8003c60:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c68:	e009      	b.n	8003c7e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c72:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d0ef      	beq.n	8003c6a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00a      	beq.n	8003cac <xPortStartScheduler+0xb8>
        __asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60bb      	str	r3, [r7, #8]
    }
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cb4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <xPortStartScheduler+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ce2:	f000 f963 	bl	8003fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <xPortStartScheduler+0x13c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cec:	f000 f982 	bl	8003ff4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <xPortStartScheduler+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <xPortStartScheduler+0x140>)
 8003cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cfc:	f7ff ff64 	bl	8003bc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d00:	f7ff f8e4 	bl	8002ecc <vTaskSwitchContext>
    prvTaskExitError();
 8003d04:	f7ff ff1a 	bl	8003b3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000ed00 	.word	0xe000ed00
 8003d18:	410fc271 	.word	0x410fc271
 8003d1c:	410fc270 	.word	0x410fc270
 8003d20:	e000e400 	.word	0xe000e400
 8003d24:	20000268 	.word	0x20000268
 8003d28:	2000026c 	.word	0x2000026c
 8003d2c:	e000ed20 	.word	0xe000ed20
 8003d30:	20000010 	.word	0x20000010
 8003d34:	e000ef34 	.word	0xe000ef34

08003d38 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <vInitPrioGroupValue+0xe4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <vInitPrioGroupValue+0xe8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10a      	bne.n	8003d5e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	613b      	str	r3, [r7, #16]
    }
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <vInitPrioGroupValue+0xe4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <vInitPrioGroupValue+0xec>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10a      	bne.n	8003d7e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
    }
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <vInitPrioGroupValue+0xf0>)
 8003d80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	22ff      	movs	r2, #255	; 0xff
 8003d8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <vInitPrioGroupValue+0xf4>)
 8003da4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003da8:	2207      	movs	r2, #7
 8003daa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dac:	e009      	b.n	8003dc2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003db6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d0ef      	beq.n	8003dae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dce:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00a      	beq.n	8003df0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
    }
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003df8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e02:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <vInitPrioGroupValue+0xf8>)
 8003e04:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00
 8003e20:	410fc271 	.word	0x410fc271
 8003e24:	410fc270 	.word	0x410fc270
 8003e28:	e000e400 	.word	0xe000e400
 8003e2c:	20000268 	.word	0x20000268
 8003e30:	2000026c 	.word	0x2000026c

08003e34 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
        __asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	607b      	str	r3, [r7, #4]
    }
 8003e4c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <vPortEnterCritical+0x58>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <vPortEnterCritical+0x58>)
 8003e56:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <vPortEnterCritical+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10f      	bne.n	8003e80 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <vPortEnterCritical+0x5c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	603b      	str	r3, [r7, #0]
    }
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <vPortEnterCritical+0x4a>
    }
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20000010 	.word	0x20000010
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <vPortExitCritical+0x50>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <vPortExitCritical+0x24>
        __asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	607b      	str	r3, [r7, #4]
    }
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <vPortExitCritical+0x50>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <vPortExitCritical+0x50>)
 8003ec0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <vPortExitCritical+0x50>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <vPortExitCritical+0x42>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003ed4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000010 	.word	0x20000010
	...

08003ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ef0:	f3ef 8009 	mrs	r0, PSP
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <pxCurrentTCBConst>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	f01e 0f10 	tst.w	lr, #16
 8003f00:	bf08      	it	eq
 8003f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0a:	6010      	str	r0, [r2, #0]
 8003f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f14:	f380 8811 	msr	BASEPRI, r0
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f7fe ffd4 	bl	8002ecc <vTaskSwitchContext>
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f380 8811 	msr	BASEPRI, r0
 8003f2c:	bc09      	pop	{r0, r3}
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	6808      	ldr	r0, [r1, #0]
 8003f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f36:	f01e 0f10 	tst.w	lr, #16
 8003f3a:	bf08      	it	eq
 8003f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f40:	f380 8809 	msr	PSP, r0
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w

08003f50 <pxCurrentTCBConst>:
 8003f50:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop

08003f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	607b      	str	r3, [r7, #4]
    }
 8003f70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003f72:	f002 fbb9 	bl	80066e8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f76:	f7fe feb1 	bl	8002cdc <xTaskIncrementTick>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003f80:	f002 fc10 	bl	80067a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <SysTick_Handler+0x50>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e001      	b.n	8003f92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003f8e:	f002 fbed 	bl	800676c <SEGGER_SYSVIEW_RecordExitISR>
 8003f92:	2300      	movs	r3, #0
 8003f94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f383 8811 	msr	BASEPRI, r3
    }
 8003f9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <vPortSetupTimerInterrupt+0x38>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <vPortSetupTimerInterrupt+0x3c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <vPortSetupTimerInterrupt+0x40>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <vPortSetupTimerInterrupt+0x44>)
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010
 8003fe4:	e000e018 	.word	0xe000e018
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	10624dd3 	.word	0x10624dd3
 8003ff0:	e000e014 	.word	0xe000e014

08003ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004004 <vPortEnableVFP+0x10>
 8003ff8:	6801      	ldr	r1, [r0, #0]
 8003ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ffe:	6001      	str	r1, [r0, #0]
 8004000:	4770      	bx	lr
 8004002:	0000      	.short	0x0000
 8004004:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop

0800400c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004012:	f3ef 8305 	mrs	r3, IPSR
 8004016:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b0f      	cmp	r3, #15
 800401c:	d914      	bls.n	8004048 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800401e:	4a17      	ldr	r2, [pc, #92]	; (800407c <vPortValidateInterruptPriority+0x70>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <vPortValidateInterruptPriority+0x74>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	7afa      	ldrb	r2, [r7, #11]
 800402e:	429a      	cmp	r2, r3
 8004030:	d20a      	bcs.n	8004048 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	607b      	str	r3, [r7, #4]
    }
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <vPortValidateInterruptPriority+0x78>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <vPortValidateInterruptPriority+0x7c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d90a      	bls.n	800406e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	603b      	str	r3, [r7, #0]
    }
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <vPortValidateInterruptPriority+0x60>
    }
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000e3f0 	.word	0xe000e3f0
 8004080:	20000268 	.word	0x20000268
 8004084:	e000ed0c 	.word	0xe000ed0c
 8004088:	2000026c 	.word	0x2000026c

0800408c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004098:	f7fe fcfe 	bl	8002a98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <pvPortMalloc+0x160>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040a4:	f000 f908 	bl	80042b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80040ae:	2208      	movs	r2, #8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	3308      	adds	r3, #8
 80040ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	43db      	mvns	r3, r3
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d804      	bhi.n	80040d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	e001      	b.n	80040d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	db70      	blt.n	80041bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d06d      	beq.n	80041bc <pvPortMalloc+0x130>
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <pvPortMalloc+0x164>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d868      	bhi.n	80041bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040ea:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <pvPortMalloc+0x168>)
 80040ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040ee:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <pvPortMalloc+0x168>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040f4:	e004      	b.n	8004100 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d903      	bls.n	8004112 <pvPortMalloc+0x86>
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f1      	bne.n	80040f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004112:	4b36      	ldr	r3, [pc, #216]	; (80041ec <pvPortMalloc+0x160>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004118:	429a      	cmp	r2, r3
 800411a:	d04f      	beq.n	80041bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2208      	movs	r2, #8
 8004122:	4413      	add	r3, r2
 8004124:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	1ad2      	subs	r2, r2, r3
 8004136:	2308      	movs	r3, #8
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	429a      	cmp	r2, r3
 800413c:	d91f      	bls.n	800417e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <pvPortMalloc+0xda>
        __asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
    }
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	1ad2      	subs	r2, r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	f000 f8f9 	bl	8004370 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <pvPortMalloc+0x164>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <pvPortMalloc+0x164>)
 800418a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <pvPortMalloc+0x164>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <pvPortMalloc+0x16c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d203      	bcs.n	80041a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <pvPortMalloc+0x164>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <pvPortMalloc+0x16c>)
 800419e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <pvPortMalloc+0x170>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a10      	ldr	r2, [pc, #64]	; (80041fc <pvPortMalloc+0x170>)
 80041ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041bc:	f7fe fc7a 	bl	8002ab4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <pvPortMalloc+0x154>
        __asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60fb      	str	r3, [r7, #12]
    }
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <pvPortMalloc+0x152>
    return pvReturn;
 80041e0:	69fb      	ldr	r3, [r7, #28]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3728      	adds	r7, #40	; 0x28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20012e78 	.word	0x20012e78
 80041f0:	20012e7c 	.word	0x20012e7c
 80041f4:	20012e70 	.word	0x20012e70
 80041f8:	20012e80 	.word	0x20012e80
 80041fc:	20012e84 	.word	0x20012e84

08004200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d049      	beq.n	80042a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004212:	2308      	movs	r3, #8
 8004214:	425b      	negs	r3, r3
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db0a      	blt.n	800423e <vPortFree+0x3e>
        __asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
    }
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <vPortFree+0x5c>
        __asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60bb      	str	r3, [r7, #8]
    }
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0fdb      	lsrs	r3, r3, #31
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01c      	beq.n	80042a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d118      	bne.n	80042a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004280:	f7fe fc0a 	bl	8002a98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <vPortFree+0xb0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4413      	add	r3, r2
 800428e:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <vPortFree+0xb0>)
 8004290:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004292:	6938      	ldr	r0, [r7, #16]
 8004294:	f000 f86c 	bl	8004370 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <vPortFree+0xb4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <vPortFree+0xb4>)
 80042a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80042a2:	f7fe fc07 	bl	8002ab4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20012e7c 	.word	0x20012e7c
 80042b4:	20012e88 	.word	0x20012e88

080042b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <prvHeapInit+0xa4>)
 80042c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3307      	adds	r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	4a1d      	ldr	r2, [pc, #116]	; (800435c <prvHeapInit+0xa4>)
 80042e8:	4413      	add	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <prvHeapInit+0xa8>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <prvHeapInit+0xa8>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4413      	add	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004304:	2208      	movs	r2, #8
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <prvHeapInit+0xac>)
 8004318:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <prvHeapInit+0xac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <prvHeapInit+0xac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <prvHeapInit+0xac>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <prvHeapInit+0xb0>)
 8004346:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <prvHeapInit+0xb4>)
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000270 	.word	0x20000270
 8004360:	20012e70 	.word	0x20012e70
 8004364:	20012e78 	.word	0x20012e78
 8004368:	20012e80 	.word	0x20012e80
 800436c:	20012e7c 	.word	0x20012e7c

08004370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <prvInsertBlockIntoFreeList+0xac>)
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e002      	b.n	8004384 <prvInsertBlockIntoFreeList+0x14>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d8f7      	bhi.n	800437e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d108      	bne.n	80043b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	441a      	add	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	441a      	add	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d118      	bne.n	80043f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <prvInsertBlockIntoFreeList+0xb0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d00d      	beq.n	80043ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e008      	b.n	8004400 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <prvInsertBlockIntoFreeList+0xb0>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e003      	b.n	8004400 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d002      	beq.n	800440e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20012e70 	.word	0x20012e70
 8004420:	20012e78 	.word	0x20012e78

08004424 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004428:	4803      	ldr	r0, [pc, #12]	; (8004438 <_cbSendSystemDesc+0x14>)
 800442a:	f002 f907 	bl	800663c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800442e:	4803      	ldr	r0, [pc, #12]	; (800443c <_cbSendSystemDesc+0x18>)
 8004430:	f002 f904 	bl	800663c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}
 8004438:	080076c0 	.word	0x080076c0
 800443c:	08007704 	.word	0x08007704

08004440 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <SEGGER_SYSVIEW_Conf+0x20>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <SEGGER_SYSVIEW_Conf+0x20>)
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <SEGGER_SYSVIEW_Conf+0x24>)
 800444e:	4a06      	ldr	r2, [pc, #24]	; (8004468 <SEGGER_SYSVIEW_Conf+0x28>)
 8004450:	f001 fc70 	bl	8005d34 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004454:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004458:	f001 fcb0 	bl	8005dbc <SEGGER_SYSVIEW_SetRAMBase>
}
 800445c:	bf00      	nop
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000000 	.word	0x20000000
 8004464:	08004425 	.word	0x08004425
 8004468:	08007798 	.word	0x08007798

0800446c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800446c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446e:	b085      	sub	sp, #20
 8004470:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	e033      	b.n	80044e0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004478:	491e      	ldr	r1, [pc, #120]	; (80044f4 <_cbSendTaskList+0x88>)
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	491a      	ldr	r1, [pc, #104]	; (80044f4 <_cbSendTaskList+0x88>)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	3304      	adds	r3, #4
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	4c16      	ldr	r4, [pc, #88]	; (80044f4 <_cbSendTaskList+0x88>)
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4423      	add	r3, r4
 80044a8:	3308      	adds	r3, #8
 80044aa:	681c      	ldr	r4, [r3, #0]
 80044ac:	4d11      	ldr	r5, [pc, #68]	; (80044f4 <_cbSendTaskList+0x88>)
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	442b      	add	r3, r5
 80044ba:	330c      	adds	r3, #12
 80044bc:	681d      	ldr	r5, [r3, #0]
 80044be:	4e0d      	ldr	r6, [pc, #52]	; (80044f4 <_cbSendTaskList+0x88>)
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4433      	add	r3, r6
 80044cc:	3310      	adds	r3, #16
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	462b      	mov	r3, r5
 80044d4:	4622      	mov	r2, r4
 80044d6:	f000 f8bd 	bl	8004654 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3301      	adds	r3, #1
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <_cbSendTaskList+0x8c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3c6      	bcc.n	8004478 <_cbSendTaskList+0xc>
  }
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f4:	20012e8c 	.word	0x20012e8c
 80044f8:	20012f2c 	.word	0x20012f2c

080044fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004504:	f7fe fbd8 	bl	8002cb8 <xTaskGetTickCountFromISR>
 8004508:	4603      	mov	r3, r0
 800450a:	2200      	movs	r2, #0
 800450c:	469a      	mov	sl, r3
 800450e:	4693      	mov	fp, r2
 8004510:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	f04f 0a00 	mov.w	sl, #0
 8004520:	f04f 0b00 	mov.w	fp, #0
 8004524:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004528:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800452c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004530:	4652      	mov	r2, sl
 8004532:	465b      	mov	r3, fp
 8004534:	1a14      	subs	r4, r2, r0
 8004536:	eb63 0501 	sbc.w	r5, r3, r1
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	00ab      	lsls	r3, r5, #2
 8004544:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004548:	00a2      	lsls	r2, r4, #2
 800454a:	4614      	mov	r4, r2
 800454c:	461d      	mov	r5, r3
 800454e:	eb14 0800 	adds.w	r8, r4, r0
 8004552:	eb45 0901 	adc.w	r9, r5, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456a:	4690      	mov	r8, r2
 800456c:	4699      	mov	r9, r3
 800456e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004572:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004584 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004592:	2205      	movs	r2, #5
 8004594:	492b      	ldr	r1, [pc, #172]	; (8004644 <SYSVIEW_AddTask+0xc0>)
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	f002 fbb0 	bl	8006cfc <memcmp>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04b      	beq.n	800463a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b07      	cmp	r3, #7
 80045a8:	d903      	bls.n	80045b2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80045aa:	4828      	ldr	r0, [pc, #160]	; (800464c <SYSVIEW_AddTask+0xc8>)
 80045ac:	f002 faf8 	bl	8006ba0 <SEGGER_SYSVIEW_Warn>
    return;
 80045b0:	e044      	b.n	800463c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4926      	ldr	r1, [pc, #152]	; (8004650 <SYSVIEW_AddTask+0xcc>)
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045c6:	4b20      	ldr	r3, [pc, #128]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4921      	ldr	r1, [pc, #132]	; (8004650 <SYSVIEW_AddTask+0xcc>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3304      	adds	r3, #4
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	491b      	ldr	r1, [pc, #108]	; (8004650 <SYSVIEW_AddTask+0xcc>)
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3308      	adds	r3, #8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4916      	ldr	r1, [pc, #88]	; (8004650 <SYSVIEW_AddTask+0xcc>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	330c      	adds	r3, #12
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4910      	ldr	r1, [pc, #64]	; (8004650 <SYSVIEW_AddTask+0xcc>)
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	3310      	adds	r3, #16
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a08      	ldr	r2, [pc, #32]	; (8004648 <SYSVIEW_AddTask+0xc4>)
 8004626:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f80e 	bl	8004654 <SYSVIEW_SendTaskInfo>
 8004638:	e000      	b.n	800463c <SYSVIEW_AddTask+0xb8>
    return;
 800463a:	bf00      	nop

}
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	08007714 	.word	0x08007714
 8004648:	20012f2c 	.word	0x20012f2c
 800464c:	0800771c 	.word	0x0800771c
 8004650:	20012e8c 	.word	0x20012e8c

08004654 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	2214      	movs	r2, #20
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f002 fb64 	bl	8006d38 <memset>
  TaskInfo.TaskID     = TaskID;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	4618      	mov	r0, r3
 800468a:	f001 fedf 	bl	800644c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800468e:	bf00      	nop
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <__NVIC_EnableIRQ>:
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	db0b      	blt.n	80046c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	4907      	ldr	r1, [pc, #28]	; (80046d0 <__NVIC_EnableIRQ+0x38>)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2001      	movs	r0, #1
 80046ba:	fa00 f202 	lsl.w	r2, r0, r2
 80046be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e100 	.word	0xe000e100

080046d4 <__NVIC_SetPriority>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	db0a      	blt.n	80046fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	490c      	ldr	r1, [pc, #48]	; (8004720 <__NVIC_SetPriority+0x4c>)
 80046ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f2:	0112      	lsls	r2, r2, #4
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	440b      	add	r3, r1
 80046f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046fc:	e00a      	b.n	8004714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	4908      	ldr	r1, [pc, #32]	; (8004724 <__NVIC_SetPriority+0x50>)
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	3b04      	subs	r3, #4
 800470c:	0112      	lsls	r2, r2, #4
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	440b      	add	r3, r1
 8004712:	761a      	strb	r2, [r3, #24]
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	e000e100 	.word	0xe000e100
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800472e:	f002 fa93 	bl	8006c58 <SEGGER_SYSVIEW_IsStarted>
 8004732:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800473a:	f001 fd0b 	bl	8006154 <SEGGER_SYSVIEW_Start>
  }
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <_cbOnUARTRx+0x3c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d806      	bhi.n	8004768 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <_cbOnUARTRx+0x3c>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <_cbOnUARTRx+0x3c>)
 8004764:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004766:	e009      	b.n	800477c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004768:	f7ff ffde 	bl	8004728 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <_cbOnUARTRx+0x3c>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	1dfb      	adds	r3, r7, #7
 8004774:	2201      	movs	r2, #1
 8004776:	4619      	mov	r1, r3
 8004778:	f000 fb9c 	bl	8004eb4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800477c:	bf00      	nop
}
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000014 	.word	0x20000014

08004788 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <_cbOnUARTTx+0x5c>)
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d80f      	bhi.n	80047b8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <_cbOnUARTTx+0x5c>)
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	461a      	mov	r2, r3
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <_cbOnUARTTx+0x60>)
 80047a0:	5c9a      	ldrb	r2, [r3, r2]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <_cbOnUARTTx+0x5c>)
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	3301      	adds	r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <_cbOnUARTTx+0x5c>)
 80047b0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80047b6:	e00f      	b.n	80047d8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <_cbOnUARTTx+0x5c>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fa1b 	bl	8004bfc <SEGGER_RTT_ReadUpBufferNoLock>
 80047c6:	4603      	mov	r3, r0
 80047c8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	da02      	bge.n	80047d6 <_cbOnUARTTx+0x4e>
    r = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e000      	b.n	80047d8 <_cbOnUARTTx+0x50>
  }
Done:
 80047d6:	bf00      	nop
  return r;
 80047d8:	68fb      	ldr	r3, [r7, #12]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000014 	.word	0x20000014
 80047e8:	080077a0 	.word	0x080077a0

080047ec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <SEGGER_UART_init+0x1c>)
 80047f6:	4905      	ldr	r1, [pc, #20]	; (800480c <SEGGER_UART_init+0x20>)
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f863 	bl	80048c4 <HIF_UART_Init>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	08004749 	.word	0x08004749
 800480c:	08004789 	.word	0x08004789

08004810 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <USART2_IRQHandler+0x80>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <USART2_IRQHandler+0x84>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 030b 	and.w	r3, r3, #11
 8004834:	2b00      	cmp	r3, #0
 8004836:	d108      	bne.n	800484a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004838:	4b17      	ldr	r3, [pc, #92]	; (8004898 <USART2_IRQHandler+0x88>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <USART2_IRQHandler+0x88>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	79fa      	ldrb	r2, [r7, #7]
 8004846:	4610      	mov	r0, r2
 8004848:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01a      	beq.n	800488a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004854:	4b11      	ldr	r3, [pc, #68]	; (800489c <USART2_IRQHandler+0x8c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <USART2_IRQHandler+0x8c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	1dfa      	adds	r2, r7, #7
 8004862:	4610      	mov	r0, r2
 8004864:	4798      	blx	r3
 8004866:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <USART2_IRQHandler+0x90>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <USART2_IRQHandler+0x90>)
 8004874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e006      	b.n	800488a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <USART2_IRQHandler+0x80>)
 800487e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004880:	79fa      	ldrb	r2, [r7, #7]
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <USART2_IRQHandler+0x84>)
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e000      	b.n	800488a <USART2_IRQHandler+0x7a>
      return;
 8004888:	bf00      	nop
    }
  }
}
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40004400 	.word	0x40004400
 8004894:	40004404 	.word	0x40004404
 8004898:	20012f30 	.word	0x20012f30
 800489c:	20012f34 	.word	0x20012f34
 80048a0:	4000440c 	.word	0x4000440c

080048a4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80048ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	4000440c 	.word	0x4000440c

080048c4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80048d0:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HIF_UART_Init+0xc8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HIF_UART_Init+0xc8>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048da:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HIF_UART_Init+0xcc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HIF_UART_Init+0xcc>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HIF_UART_Init+0xd0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80048fc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80048fe:	4a25      	ldr	r2, [pc, #148]	; (8004994 <HIF_UART_Init+0xd0>)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HIF_UART_Init+0xd4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004910:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004918:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800491a:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HIF_UART_Init+0xd4>)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HIF_UART_Init+0xd8>)
 8004922:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004926:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HIF_UART_Init+0xdc>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HIF_UART_Init+0xe0>)
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HIF_UART_Init+0xe4>)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	3301      	adds	r3, #1
 8004944:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004952:	d302      	bcc.n	800495a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004954:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004958:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HIF_UART_Init+0xe8>)
 8004966:	b29b      	uxth	r3, r3
 8004968:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <HIF_UART_Init+0xec>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004970:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <HIF_UART_Init+0xf0>)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004976:	2106      	movs	r1, #6
 8004978:	2026      	movs	r0, #38	; 0x26
 800497a:	f7ff feab 	bl	80046d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800497e:	2026      	movs	r0, #38	; 0x26
 8004980:	f7ff fe8a 	bl	8004698 <__NVIC_EnableIRQ>
}
 8004984:	bf00      	nop
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023840 	.word	0x40023840
 8004990:	40023830 	.word	0x40023830
 8004994:	40020020 	.word	0x40020020
 8004998:	40020000 	.word	0x40020000
 800499c:	4000440c 	.word	0x4000440c
 80049a0:	40004410 	.word	0x40004410
 80049a4:	40004414 	.word	0x40004414
 80049a8:	0501bd00 	.word	0x0501bd00
 80049ac:	40004408 	.word	0x40004408
 80049b0:	20012f30 	.word	0x20012f30
 80049b4:	20012f34 	.word	0x20012f34

080049b8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80049be:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <_DoInit+0xa0>)
 80049c0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80049c2:	22a8      	movs	r2, #168	; 0xa8
 80049c4:	2100      	movs	r1, #0
 80049c6:	6838      	ldr	r0, [r7, #0]
 80049c8:	f002 f9b6 	bl	8006d38 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2203      	movs	r2, #3
 80049d0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2203      	movs	r2, #3
 80049d6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <_DoInit+0xa4>)
 80049dc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <_DoInit+0xa8>)
 80049e2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <_DoInit+0xa4>)
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <_DoInit+0xac>)
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004a22:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	e00c      	b.n	8004a46 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f1c3 030f 	rsb	r3, r3, #15
 8004a32:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <_DoInit+0xb0>)
 8004a34:	5cd1      	ldrb	r1, [r2, r3]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3301      	adds	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d9ef      	bls.n	8004a2c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004a4c:	f3bf 8f5f 	dmb	sy
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20012f38 	.word	0x20012f38
 8004a5c:	0800776c 	.word	0x0800776c
 8004a60:	20012fe0 	.word	0x20012fe0
 8004a64:	200133e0 	.word	0x200133e0
 8004a68:	080077a4 	.word	0x080077a4

08004a6c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d905      	bls.n	8004a9c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	e007      	b.n	8004aac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	69b9      	ldr	r1, [r7, #24]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	1acb      	subs	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bf28      	it	cs
 8004aba:	4613      	movcs	r3, r2
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bf28      	it	cs
 8004ac6:	4613      	movcs	r3, r2
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	f002 f91f 	bl	8006d1c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	4413      	add	r3, r2
 8004ae4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	4413      	add	r3, r2
 8004aec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	4413      	add	r3, r2
 8004afc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d101      	bne.n	8004b0c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1b2      	bne.n	8004a82 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3728      	adds	r7, #40	; 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d911      	bls.n	8004b6e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	6938      	ldr	r0, [r7, #16]
 8004b5a:	f002 f8df 	bl	8006d1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b5e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004b6c:	e01f      	b.n	8004bae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	6938      	ldr	r0, [r7, #16]
 8004b82:	f002 f8cb 	bl	8006d1c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6938      	ldr	r0, [r7, #16]
 8004ba0:	f002 f8bc 	bl	8006d1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ba4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	60da      	str	r2, [r3, #12]
}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d808      	bhi.n	8004be4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b01      	subs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e004      	b.n	8004bee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004bee:	697b      	ldr	r3, [r7, #20]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	; 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004c08:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004c16:	f7ff fecf 	bl	80049b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d92b      	bls.n	8004ca0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bf28      	it	cs
 8004c5a:	4613      	movcs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	4413      	add	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	6939      	ldr	r1, [r7, #16]
 8004c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c6e:	f002 f855 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	4413      	add	r3, r2
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4413      	add	r3, r2
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d101      	bne.n	8004ca0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bf28      	it	cs
 8004cb0:	4613      	movcs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d019      	beq.n	8004cee <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	4413      	add	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cca:	f002 f827 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3730      	adds	r7, #48	; 0x30
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20012f38 	.word	0x20012f38

08004d08 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	; 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d14:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <SEGGER_RTT_ReadNoLock+0x1e>
 8004d22:	f7ff fe49 	bl	80049b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	4a37      	ldr	r2, [pc, #220]	; (8004e10 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d34:	4413      	add	r3, r2
 8004d36:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d92b      	bls.n	8004dac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bf28      	it	cs
 8004d66:	4613      	movcs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	4413      	add	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	6939      	ldr	r1, [r7, #16]
 8004d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d7a:	f001 ffcf 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d101      	bne.n	8004dac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	bf28      	it	cs
 8004dbc:	4613      	movcs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d019      	beq.n	8004dfa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	4413      	add	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	6939      	ldr	r1, [r7, #16]
 8004dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dd6:	f001 ffa1 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e04:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3730      	adds	r7, #48	; 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20012f38 	.word	0x20012f38

08004e14 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	3360      	adds	r3, #96	; 0x60
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004e32:	4413      	add	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d029      	beq.n	8004e92 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d82e      	bhi.n	8004ea0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d013      	beq.n	8004e72 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004e4a:	e029      	b.n	8004ea0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e4c:	6978      	ldr	r0, [r7, #20]
 8004e4e:	f7ff feb2 	bl	8004bb6 <_GetAvailWriteSpace>
 8004e52:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d202      	bcs.n	8004e62 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004e60:	e021      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7ff fe5b 	bl	8004b26 <_WriteNoCheck>
    break;
 8004e70:	e019      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f7ff fe9f 	bl	8004bb6 <_GetAvailWriteSpace>
 8004e78:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	bf28      	it	cs
 8004e82:	4613      	movcs	r3, r2
 8004e84:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f7ff fe4b 	bl	8004b26 <_WriteNoCheck>
    break;
 8004e90:	e009      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff fde8 	bl	8004a6c <_WriteBlocking>
 8004e9c:	61f8      	str	r0, [r7, #28]
    break;
 8004e9e:	e002      	b.n	8004ea6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
    break;
 8004ea4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20012f38 	.word	0x20012f38

08004eb4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004ece:	f7ff fd73 	bl	80049b8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	f04f 0120 	mov.w	r1, #32
 8004eda:	f381 8811 	msr	BASEPRI, r1
 8004ede:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ff95 	bl	8004e14 <SEGGER_RTT_WriteDownBufferNoLock>
 8004eea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20012f38 	.word	0x20012f38

08004f00 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f0e:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f1c:	f7ff fd4c 	bl	80049b8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f20:	f3ef 8311 	mrs	r3, BASEPRI
 8004f24:	f04f 0120 	mov.w	r1, #32
 8004f28:	f381 8811 	msr	BASEPRI, r1
 8004f2c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f2e:	4b35      	ldr	r3, [pc, #212]	; (8005004 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f30:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f36:	6939      	ldr	r1, [r7, #16]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3304      	adds	r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	dbeb      	blt.n	8004f36 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f5e:	e000      	b.n	8004f62 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f60:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	da3f      	bge.n	8004fec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f6c:	6939      	ldr	r1, [r7, #16]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f80:	6939      	ldr	r1, [r7, #16]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3304      	adds	r3, #4
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f96:	6939      	ldr	r1, [r7, #16]
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3320      	adds	r3, #32
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3328      	adds	r3, #40	; 0x28
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fbe:	6939      	ldr	r1, [r7, #16]
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	440b      	add	r3, r1
 8004fcc:	3324      	adds	r3, #36	; 0x24
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fd2:	6939      	ldr	r1, [r7, #16]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	440b      	add	r3, r1
 8004fe0:	332c      	adds	r3, #44	; 0x2c
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fe6:	f3bf 8f5f 	dmb	sy
 8004fea:	e002      	b.n	8004ff2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004fec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20012f38 	.word	0x20012f38

08005008 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	; 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005024:	f7ff fcc8 	bl	80049b8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005028:	4b1c      	ldr	r3, [pc, #112]	; (800509c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800502a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d82c      	bhi.n	800508c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005032:	f3ef 8311 	mrs	r3, BASEPRI
 8005036:	f04f 0120 	mov.w	r1, #32
 800503a:	f381 8811 	msr	BASEPRI, r1
 800503e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	3360      	adds	r3, #96	; 0x60
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800507c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	e002      	b.n	8005092 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800508c:	f04f 33ff 	mov.w	r3, #4294967295
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	; 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20012f38 	.word	0x20012f38

080050a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00f      	beq.n	80050d6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80050b6:	e002      	b.n	80050be <_EncodeStr+0x1e>
      Len++;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3301      	adds	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f6      	bne.n	80050b8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d901      	bls.n	80050d6 <_EncodeStr+0x36>
      Len = Limit;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2bfe      	cmp	r3, #254	; 0xfe
 80050da:	d806      	bhi.n	80050ea <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	60fa      	str	r2, [r7, #12]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e011      	b.n	800510e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	60fa      	str	r2, [r7, #12]
 80050f0:	22ff      	movs	r2, #255	; 0xff
 80050f2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	60fa      	str	r2, [r7, #12]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	0a19      	lsrs	r1, r3, #8
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	60fa      	str	r2, [r7, #12]
 800510a:	b2ca      	uxtb	r2, r1
 800510c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005112:	e00a      	b.n	800512a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	1c53      	adds	r3, r2, #1
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1c59      	adds	r1, r3, #1
 800511e:	60f9      	str	r1, [r7, #12]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	701a      	strb	r2, [r3, #0]
    n++;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3301      	adds	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	429a      	cmp	r2, r3
 8005130:	d3f0      	bcc.n	8005114 <_EncodeStr+0x74>
  }
  return pPayload;
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	4618      	mov	r0, r3
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3307      	adds	r3, #7
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800515e:	4b35      	ldr	r3, [pc, #212]	; (8005234 <_HandleIncomingPacket+0xdc>)
 8005160:	7e1b      	ldrb	r3, [r3, #24]
 8005162:	4618      	mov	r0, r3
 8005164:	1cfb      	adds	r3, r7, #3
 8005166:	2201      	movs	r2, #1
 8005168:	4619      	mov	r1, r3
 800516a:	f7ff fdcd 	bl	8004d08 <SEGGER_RTT_ReadNoLock>
 800516e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d052      	beq.n	800521c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d031      	beq.n	80051e0 <_HandleIncomingPacket+0x88>
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	dc40      	bgt.n	8005202 <_HandleIncomingPacket+0xaa>
 8005180:	2b07      	cmp	r3, #7
 8005182:	dc15      	bgt.n	80051b0 <_HandleIncomingPacket+0x58>
 8005184:	2b00      	cmp	r3, #0
 8005186:	dd3c      	ble.n	8005202 <_HandleIncomingPacket+0xaa>
 8005188:	3b01      	subs	r3, #1
 800518a:	2b06      	cmp	r3, #6
 800518c:	d839      	bhi.n	8005202 <_HandleIncomingPacket+0xaa>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <_HandleIncomingPacket+0x3c>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051b7 	.word	0x080051b7
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c3 	.word	0x080051c3
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051db 	.word	0x080051db
 80051b0:	2b7f      	cmp	r3, #127	; 0x7f
 80051b2:	d035      	beq.n	8005220 <_HandleIncomingPacket+0xc8>
 80051b4:	e025      	b.n	8005202 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80051b6:	f000 ffcd 	bl	8006154 <SEGGER_SYSVIEW_Start>
      break;
 80051ba:	e036      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80051bc:	f001 f886 	bl	80062cc <SEGGER_SYSVIEW_Stop>
      break;
 80051c0:	e033      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80051c2:	f001 fa5f 	bl	8006684 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80051c6:	e030      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80051c8:	f001 fa24 	bl	8006614 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80051cc:	e02d      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80051ce:	f001 f8a3 	bl	8006318 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80051d2:	e02a      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80051d4:	f001 fc92 	bl	8006afc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80051d8:	e027      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80051da:	f001 fc71 	bl	8006ac0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80051de:	e024      	b.n	800522a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <_HandleIncomingPacket+0xdc>)
 80051e2:	7e1b      	ldrb	r3, [r3, #24]
 80051e4:	4618      	mov	r0, r3
 80051e6:	1cfb      	adds	r3, r7, #3
 80051e8:	2201      	movs	r2, #1
 80051ea:	4619      	mov	r1, r3
 80051ec:	f7ff fd8c 	bl	8004d08 <SEGGER_RTT_ReadNoLock>
 80051f0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d015      	beq.n	8005224 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fbe0 	bl	80069c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005200:	e010      	b.n	8005224 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	b25b      	sxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	da0e      	bge.n	8005228 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <_HandleIncomingPacket+0xdc>)
 800520c:	7e1b      	ldrb	r3, [r3, #24]
 800520e:	4618      	mov	r0, r3
 8005210:	1cfb      	adds	r3, r7, #3
 8005212:	2201      	movs	r2, #1
 8005214:	4619      	mov	r1, r3
 8005216:	f7ff fd77 	bl	8004d08 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800521a:	e005      	b.n	8005228 <_HandleIncomingPacket+0xd0>
    }
  }
 800521c:	bf00      	nop
 800521e:	e004      	b.n	800522a <_HandleIncomingPacket+0xd2>
      break;
 8005220:	bf00      	nop
 8005222:	e002      	b.n	800522a <_HandleIncomingPacket+0xd2>
      break;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <_HandleIncomingPacket+0xd2>
      break;
 8005228:	bf00      	nop
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200173f8 	.word	0x200173f8

08005238 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	; 0x30
 800523c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800523e:	2301      	movs	r3, #1
 8005240:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524c:	4b32      	ldr	r3, [pc, #200]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	e00b      	b.n	800526c <_TrySendOverflowPacket+0x34>
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	b2da      	uxtb	r2, r3
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800525e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	09db      	lsrs	r3, r3, #7
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2b7f      	cmp	r3, #127	; 0x7f
 8005270:	d8f0      	bhi.n	8005254 <_TrySendOverflowPacket+0x1c>
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <_TrySendOverflowPacket+0xe4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005288:	4b23      	ldr	r3, [pc, #140]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	e00b      	b.n	80052b4 <_TrySendOverflowPacket+0x7c>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	6279      	str	r1, [r7, #36]	; 0x24
 80052a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	09db      	lsrs	r3, r3, #7
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	2b7f      	cmp	r3, #127	; 0x7f
 80052b8:	d8f0      	bhi.n	800529c <_TrySendOverflowPacket+0x64>
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	627a      	str	r2, [r7, #36]	; 0x24
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	4618      	mov	r0, r3
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	f7fa ff80 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052e0:	4603      	mov	r3, r0
 80052e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80052e4:	f7ff fade 	bl	80048a4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80052f4:	4b08      	ldr	r3, [pc, #32]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e004      	b.n	800530c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	3301      	adds	r3, #1
 8005308:	4a03      	ldr	r2, [pc, #12]	; (8005318 <_TrySendOverflowPacket+0xe0>)
 800530a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800530c:	693b      	ldr	r3, [r7, #16]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3730      	adds	r7, #48	; 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200173f8 	.word	0x200173f8
 800531c:	e0001004 	.word	0xe0001004

08005320 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800532c:	4b96      	ldr	r3, [pc, #600]	; (8005588 <_SendPacket+0x268>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d010      	beq.n	8005356 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005334:	4b94      	ldr	r3, [pc, #592]	; (8005588 <_SendPacket+0x268>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8130 	beq.w	800559e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800533e:	4b92      	ldr	r3, [pc, #584]	; (8005588 <_SendPacket+0x268>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d109      	bne.n	800535a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005346:	f7ff ff77 	bl	8005238 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800534a:	4b8f      	ldr	r3, [pc, #572]	; (8005588 <_SendPacket+0x268>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	f040 8127 	bne.w	80055a2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005354:	e001      	b.n	800535a <_SendPacket+0x3a>
    goto Send;
 8005356:	bf00      	nop
 8005358:	e000      	b.n	800535c <_SendPacket+0x3c>
Send:
 800535a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b1f      	cmp	r3, #31
 8005360:	d809      	bhi.n	8005376 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005362:	4b89      	ldr	r3, [pc, #548]	; (8005588 <_SendPacket+0x268>)
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 8118 	bne.w	80055a6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b17      	cmp	r3, #23
 800537a:	d807      	bhi.n	800538c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3b01      	subs	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e0c4      	b.n	8005516 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b7f      	cmp	r3, #127	; 0x7f
 8005398:	d912      	bls.n	80053c0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	09da      	lsrs	r2, r3, #7
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	3a01      	subs	r2, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e006      	b.n	80053ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b7e      	cmp	r3, #126	; 0x7e
 80053d2:	d807      	bhi.n	80053e4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e098      	b.n	8005516 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ea:	d212      	bcs.n	8005412 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	09da      	lsrs	r2, r3, #7
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	3a01      	subs	r2, #1
 8005404:	60fa      	str	r2, [r7, #12]
 8005406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e081      	b.n	8005516 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005418:	d21d      	bcs.n	8005456 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0b9a      	lsrs	r2, r3, #14
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3b01      	subs	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	09db      	lsrs	r3, r3, #7
 800542e:	b2db      	uxtb	r3, r3
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	3a01      	subs	r2, #1
 8005434:	60fa      	str	r2, [r7, #12]
 8005436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	3a01      	subs	r2, #1
 8005448:	60fa      	str	r2, [r7, #12]
 800544a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e05f      	b.n	8005516 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800545c:	d228      	bcs.n	80054b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	0d5a      	lsrs	r2, r3, #21
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3b01      	subs	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0b9b      	lsrs	r3, r3, #14
 8005472:	b2db      	uxtb	r3, r3
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	3a01      	subs	r2, #1
 8005478:	60fa      	str	r2, [r7, #12]
 800547a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	09db      	lsrs	r3, r3, #7
 8005488:	b2db      	uxtb	r3, r3
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	3a01      	subs	r2, #1
 800548e:	60fa      	str	r2, [r7, #12]
 8005490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	3a01      	subs	r2, #1
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e032      	b.n	8005516 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0f1a      	lsrs	r2, r3, #28
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0d5b      	lsrs	r3, r3, #21
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	3a01      	subs	r2, #1
 80054ca:	60fa      	str	r2, [r7, #12]
 80054cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0b9b      	lsrs	r3, r3, #14
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	3a01      	subs	r2, #1
 80054e0:	60fa      	str	r2, [r7, #12]
 80054e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	09db      	lsrs	r3, r3, #7
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	3a01      	subs	r2, #1
 80054f6:	60fa      	str	r2, [r7, #12]
 80054f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	3a01      	subs	r2, #1
 800550a:	60fa      	str	r2, [r7, #12]
 800550c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005516:	4b1d      	ldr	r3, [pc, #116]	; (800558c <_SendPacket+0x26c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800551c:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <_SendPacket+0x268>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	e00b      	b.n	8005548 <_SendPacket+0x228>
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	6279      	str	r1, [r7, #36]	; 0x24
 800553a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	09db      	lsrs	r3, r3, #7
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d8f0      	bhi.n	8005530 <_SendPacket+0x210>
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	627a      	str	r2, [r7, #36]	; 0x24
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <_SendPacket+0x268>)
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	4618      	mov	r0, r3
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	461a      	mov	r2, r3
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	f7fa fe37 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005572:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005574:	f7ff f996 	bl	80048a4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800557e:	4a02      	ldr	r2, [pc, #8]	; (8005588 <_SendPacket+0x268>)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	60d3      	str	r3, [r2, #12]
 8005584:	e010      	b.n	80055a8 <_SendPacket+0x288>
 8005586:	bf00      	nop
 8005588:	200173f8 	.word	0x200173f8
 800558c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <_SendPacket+0x2d8>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <_SendPacket+0x2d8>)
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e004      	b.n	80055a8 <_SendPacket+0x288>
    goto SendDone;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <_SendPacket+0x288>
      goto SendDone;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <_SendPacket+0x288>
      goto SendDone;
 80055a6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <_SendPacket+0x2d8>)
 80055aa:	7e1b      	ldrb	r3, [r3, #24]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <_SendPacket+0x2dc>)
 80055b0:	460b      	mov	r3, r1
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	440b      	add	r3, r1
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	336c      	adds	r3, #108	; 0x6c
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <_SendPacket+0x2d8>)
 80055c0:	7e1b      	ldrb	r3, [r3, #24]
 80055c2:	4618      	mov	r0, r3
 80055c4:	490d      	ldr	r1, [pc, #52]	; (80055fc <_SendPacket+0x2dc>)
 80055c6:	4603      	mov	r3, r0
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4403      	add	r3, r0
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	440b      	add	r3, r1
 80055d0:	3370      	adds	r3, #112	; 0x70
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d00b      	beq.n	80055f0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <_SendPacket+0x2d8>)
 80055da:	789b      	ldrb	r3, [r3, #2]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <_SendPacket+0x2d8>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055e6:	f7ff fdb7 	bl	8005158 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055ea:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <_SendPacket+0x2d8>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055f0:	bf00      	nop
 80055f2:	3728      	adds	r7, #40	; 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	200173f8 	.word	0x200173f8
 80055fc:	20012f38 	.word	0x20012f38

08005600 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	3301      	adds	r3, #1
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d80a      	bhi.n	8005630 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6051      	str	r1, [r2, #4]
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b80      	cmp	r3, #128	; 0x80
 8005636:	d15a      	bne.n	80056ee <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	e00b      	b.n	8005672 <_StoreChar+0x72>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	6279      	str	r1, [r7, #36]	; 0x24
 8005664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	2b7f      	cmp	r3, #127	; 0x7f
 8005676:	d8f0      	bhi.n	800565a <_StoreChar+0x5a>
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	627a      	str	r2, [r7, #36]	; 0x24
 800567e:	6a3a      	ldr	r2, [r7, #32]
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e00b      	b.n	80056aa <_StoreChar+0xaa>
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	61f9      	str	r1, [r7, #28]
 800569c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b7f      	cmp	r3, #127	; 0x7f
 80056ae:	d8f0      	bhi.n	8005692 <_StoreChar+0x92>
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	61fa      	str	r2, [r7, #28]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	221a      	movs	r2, #26
 80056c6:	6939      	ldr	r1, [r7, #16]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fe29 	bl	8005320 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fd34 	bl	8005140 <_PreparePacket>
 80056d8:	4602      	mov	r2, r0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
  }
}
 80056ee:	bf00      	nop
 80056f0:	3728      	adds	r7, #40	; 0x28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800570a:	2301      	movs	r3, #1
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800570e:	2301      	movs	r3, #1
 8005710:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005712:	e007      	b.n	8005724 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	623b      	str	r3, [r7, #32]
    Width++;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d2f3      	bcs.n	8005714 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	429a      	cmp	r2, r3
 8005732:	d901      	bls.n	8005738 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11f      	bne.n	8005782 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01c      	beq.n	8005782 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <_PrintUnsigned+0x66>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <_PrintUnsigned+0x66>
        c = '0';
 8005758:	2330      	movs	r3, #48	; 0x30
 800575a:	76fb      	strb	r3, [r7, #27]
 800575c:	e001      	b.n	8005762 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800575e:	2320      	movs	r3, #32
 8005760:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005762:	e007      	b.n	8005774 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	3b01      	subs	r3, #1
 8005768:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800576a:	7efb      	ldrb	r3, [r7, #27]
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff46 	bl	8005600 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <_PrintUnsigned+0x8a>
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	429a      	cmp	r2, r3
 8005780:	d3f0      	bcc.n	8005764 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d903      	bls.n	8005790 <_PrintUnsigned+0x98>
      NumDigits--;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	e009      	b.n	80057a4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d200      	bcs.n	80057a4 <_PrintUnsigned+0xac>
        break;
 80057a2:	e005      	b.n	80057b0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057ae:	e7e8      	b.n	8005782 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <_PrintUnsigned+0x128>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	4619      	mov	r1, r3
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff ff14 	bl	8005600 <_StoreChar>
    Digit /= Base;
 80057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e3      	bne.n	80057b0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d011      	beq.n	8005816 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057f8:	e006      	b.n	8005808 <_PrintUnsigned+0x110>
        FieldWidth--;
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	3b01      	subs	r3, #1
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005800:	2120      	movs	r1, #32
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fefc 	bl	8005600 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <_PrintUnsigned+0x11e>
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	429a      	cmp	r2, r3
 8005814:	d3f1      	bcc.n	80057fa <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005816:	bf00      	nop
 8005818:	3728      	adds	r7, #40	; 0x28
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	080077c4 	.word	0x080077c4

08005824 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	bfb8      	it	lt
 8005838:	425b      	neglt	r3, r3
 800583a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005840:	e007      	b.n	8005852 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	fb92 f3f3 	sdiv	r3, r2, r3
 800584a:	613b      	str	r3, [r7, #16]
    Width++;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3301      	adds	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	429a      	cmp	r2, r3
 8005858:	daf3      	bge.n	8005842 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	429a      	cmp	r2, r3
 8005860:	d901      	bls.n	8005866 <_PrintInt+0x42>
    Width = NumDigits;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <_PrintInt+0x5e>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	db04      	blt.n	800587c <_PrintInt+0x58>
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <_PrintInt+0x5e>
    FieldWidth--;
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	3b01      	subs	r3, #1
 8005880:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <_PrintInt+0x6e>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d016      	beq.n	80058c0 <_PrintInt+0x9c>
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d111      	bne.n	80058c0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058a2:	e006      	b.n	80058b2 <_PrintInt+0x8e>
        FieldWidth--;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80058aa:	2120      	movs	r1, #32
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fea7 	bl	8005600 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <_PrintInt+0x9c>
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3f1      	bcc.n	80058a4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da07      	bge.n	80058d6 <_PrintInt+0xb2>
    v = -v;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	425b      	negs	r3, r3
 80058ca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80058cc:	212d      	movs	r1, #45	; 0x2d
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff fe96 	bl	8005600 <_StoreChar>
 80058d4:	e008      	b.n	80058e8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80058e0:	212b      	movs	r1, #43	; 0x2b
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fe8c 	bl	8005600 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d019      	beq.n	8005926 <_PrintInt+0x102>
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d114      	bne.n	8005926 <_PrintInt+0x102>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d111      	bne.n	8005926 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005908:	e006      	b.n	8005918 <_PrintInt+0xf4>
        FieldWidth--;
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	3b01      	subs	r3, #1
 800590e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005910:	2130      	movs	r1, #48	; 0x30
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff fe74 	bl	8005600 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <_PrintInt+0x102>
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	429a      	cmp	r2, r3
 8005924:	d3f1      	bcc.n	800590a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7ff fedf 	bl	80056f8 <_PrintUnsigned>
}
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b098      	sub	sp, #96	; 0x60
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005950:	f3ef 8311 	mrs	r3, BASEPRI
 8005954:	f04f 0120 	mov.w	r1, #32
 8005958:	f381 8811 	msr	BASEPRI, r1
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
 800595e:	48b7      	ldr	r0, [pc, #732]	; (8005c3c <_VPrintTarget+0x2f8>)
 8005960:	f7ff fbee 	bl	8005140 <_PreparePacket>
 8005964:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005966:	4bb5      	ldr	r3, [pc, #724]	; (8005c3c <_VPrintTarget+0x2f8>)
 8005968:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800598a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8183 	beq.w	8005c9a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005998:	2b25      	cmp	r3, #37	; 0x25
 800599a:	f040 8170 	bne.w	8005c7e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800599e:	2300      	movs	r3, #0
 80059a0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80059a2:	2301      	movs	r3, #1
 80059a4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80059ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059b2:	3b23      	subs	r3, #35	; 0x23
 80059b4:	2b0d      	cmp	r3, #13
 80059b6:	d83f      	bhi.n	8005a38 <_VPrintTarget+0xf4>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <_VPrintTarget+0x7c>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	08005a29 	.word	0x08005a29
 80059c4:	08005a39 	.word	0x08005a39
 80059c8:	08005a39 	.word	0x08005a39
 80059cc:	08005a39 	.word	0x08005a39
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a39 	.word	0x08005a39
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a39 	.word	0x08005a39
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a09 	.word	0x08005a09
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e01a      	b.n	8005a3e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0a:	f043 0302 	orr.w	r3, r3, #2
 8005a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e012      	b.n	8005a3e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1a:	f043 0304 	orr.w	r3, r3, #4
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e00a      	b.n	8005a3e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	f043 0308 	orr.w	r3, r3, #8
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e002      	b.n	8005a3e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a3c:	bf00      	nop
        }
      } while (v);
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1b0      	bne.n	80059a6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a54:	2b2f      	cmp	r3, #47	; 0x2f
 8005a56:	d912      	bls.n	8005a7e <_VPrintTarget+0x13a>
 8005a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a5c:	2b39      	cmp	r3, #57	; 0x39
 8005a5e:	d80e      	bhi.n	8005a7e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	461a      	mov	r2, r3
 8005a72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a76:	4413      	add	r3, r2
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005a7c:	e7e4      	b.n	8005a48 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a90:	d11d      	bne.n	8005ace <_VPrintTarget+0x18a>
        sFormat++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8005aa6:	d912      	bls.n	8005ace <_VPrintTarget+0x18a>
 8005aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aac:	2b39      	cmp	r3, #57	; 0x39
 8005aae:	d80e      	bhi.n	8005ace <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3b30      	subs	r3, #48	; 0x30
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005acc:	e7e4      	b.n	8005a98 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ada:	2b6c      	cmp	r3, #108	; 0x6c
 8005adc:	d003      	beq.n	8005ae6 <_VPrintTarget+0x1a2>
 8005ade:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae2:	2b68      	cmp	r3, #104	; 0x68
 8005ae4:	d107      	bne.n	8005af6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005af4:	e7ef      	b.n	8005ad6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005af6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005afa:	2b25      	cmp	r3, #37	; 0x25
 8005afc:	f000 80b3 	beq.w	8005c66 <_VPrintTarget+0x322>
 8005b00:	2b25      	cmp	r3, #37	; 0x25
 8005b02:	f2c0 80b7 	blt.w	8005c74 <_VPrintTarget+0x330>
 8005b06:	2b78      	cmp	r3, #120	; 0x78
 8005b08:	f300 80b4 	bgt.w	8005c74 <_VPrintTarget+0x330>
 8005b0c:	2b58      	cmp	r3, #88	; 0x58
 8005b0e:	f2c0 80b1 	blt.w	8005c74 <_VPrintTarget+0x330>
 8005b12:	3b58      	subs	r3, #88	; 0x58
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	f200 80ad 	bhi.w	8005c74 <_VPrintTarget+0x330>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <_VPrintTarget+0x1dc>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005c17 	.word	0x08005c17
 8005b24:	08005c75 	.word	0x08005c75
 8005b28:	08005c75 	.word	0x08005c75
 8005b2c:	08005c75 	.word	0x08005c75
 8005b30:	08005c75 	.word	0x08005c75
 8005b34:	08005c75 	.word	0x08005c75
 8005b38:	08005c75 	.word	0x08005c75
 8005b3c:	08005c75 	.word	0x08005c75
 8005b40:	08005c75 	.word	0x08005c75
 8005b44:	08005c75 	.word	0x08005c75
 8005b48:	08005c75 	.word	0x08005c75
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005bcb 	.word	0x08005bcb
 8005b54:	08005c75 	.word	0x08005c75
 8005b58:	08005c75 	.word	0x08005c75
 8005b5c:	08005c75 	.word	0x08005c75
 8005b60:	08005c75 	.word	0x08005c75
 8005b64:	08005c75 	.word	0x08005c75
 8005b68:	08005c75 	.word	0x08005c75
 8005b6c:	08005c75 	.word	0x08005c75
 8005b70:	08005c75 	.word	0x08005c75
 8005b74:	08005c75 	.word	0x08005c75
 8005b78:	08005c75 	.word	0x08005c75
 8005b7c:	08005c75 	.word	0x08005c75
 8005b80:	08005c41 	.word	0x08005c41
 8005b84:	08005c75 	.word	0x08005c75
 8005b88:	08005c75 	.word	0x08005c75
 8005b8c:	08005c75 	.word	0x08005c75
 8005b90:	08005c75 	.word	0x08005c75
 8005b94:	08005bf1 	.word	0x08005bf1
 8005b98:	08005c75 	.word	0x08005c75
 8005b9c:	08005c75 	.word	0x08005c75
 8005ba0:	08005c17 	.word	0x08005c17
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	1d19      	adds	r1, r3, #4
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005bb8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fd1c 	bl	8005600 <_StoreChar>
        break;
 8005bc8:	e055      	b.n	8005c76 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	1d19      	adds	r1, r3, #4
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6011      	str	r1, [r2, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005bd8:	f107 0014 	add.w	r0, r7, #20
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be6:	220a      	movs	r2, #10
 8005be8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bea:	f7ff fe1b 	bl	8005824 <_PrintInt>
        break;
 8005bee:	e042      	b.n	8005c76 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c00:	f107 0014 	add.w	r0, r7, #20
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0e:	220a      	movs	r2, #10
 8005c10:	f7ff fd72 	bl	80056f8 <_PrintUnsigned>
        break;
 8005c14:	e02f      	b.n	8005c76 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	1d19      	adds	r1, r3, #4
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6011      	str	r1, [r2, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005c24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c26:	f107 0014 	add.w	r0, r7, #20
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c34:	2210      	movs	r2, #16
 8005c36:	f7ff fd5f 	bl	80056f8 <_PrintUnsigned>
        break;
 8005c3a:	e01c      	b.n	8005c76 <_VPrintTarget+0x332>
 8005c3c:	20017428 	.word	0x20017428
      case 'p':
        v = va_arg(*pParamList, int);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	1d19      	adds	r1, r3, #4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6011      	str	r1, [r2, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005c4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c50:	f107 0014 	add.w	r0, r7, #20
 8005c54:	2300      	movs	r3, #0
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	2308      	movs	r3, #8
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	2210      	movs	r2, #16
 8005c60:	f7ff fd4a 	bl	80056f8 <_PrintUnsigned>
        break;
 8005c64:	e007      	b.n	8005c76 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005c66:	f107 0314 	add.w	r3, r7, #20
 8005c6a:	2125      	movs	r1, #37	; 0x25
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fcc7 	bl	8005600 <_StoreChar>
        break;
 8005c72:	e000      	b.n	8005c76 <_VPrintTarget+0x332>
      default:
        break;
 8005c74:	bf00      	nop
      }
      sFormat++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	e007      	b.n	8005c8e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005c7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005c82:	f107 0314 	add.w	r3, r7, #20
 8005c86:	4611      	mov	r1, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fcb9 	bl	8005600 <_StoreChar>
    }
  } while (*sFormat);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f ae72 	bne.w	800597c <_VPrintTarget+0x38>
 8005c98:	e000      	b.n	8005c9c <_VPrintTarget+0x358>
      break;
 8005c9a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d041      	beq.n	8005d26 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb2:	e00b      	b.n	8005ccc <_VPrintTarget+0x388>
 8005cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	6439      	str	r1, [r7, #64]	; 0x40
 8005cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc8:	09db      	lsrs	r3, r3, #7
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cce:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd0:	d8f0      	bhi.n	8005cb4 <_VPrintTarget+0x370>
 8005cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	643a      	str	r2, [r7, #64]	; 0x40
 8005cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cea:	e00b      	b.n	8005d04 <_VPrintTarget+0x3c0>
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	2b7f      	cmp	r3, #127	; 0x7f
 8005d08:	d8f0      	bhi.n	8005cec <_VPrintTarget+0x3a8>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	69b9      	ldr	r1, [r7, #24]
 8005d1e:	221a      	movs	r2, #26
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fafd 	bl	8005320 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005d2c:	bf00      	nop
 8005d2e:	3758      	adds	r7, #88	; 0x58
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d42:	2300      	movs	r3, #0
 8005d44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d48:	4917      	ldr	r1, [pc, #92]	; (8005da8 <SEGGER_SYSVIEW_Init+0x74>)
 8005d4a:	4818      	ldr	r0, [pc, #96]	; (8005dac <SEGGER_SYSVIEW_Init+0x78>)
 8005d4c:	f7ff f8d8 	bl	8004f00 <SEGGER_RTT_AllocUpBuffer>
 8005d50:	4603      	mov	r3, r0
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d56:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d5a:	785a      	ldrb	r2, [r3, #1]
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d5e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d62:	7e1b      	ldrb	r3, [r3, #24]
 8005d64:	4618      	mov	r0, r3
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <SEGGER_SYSVIEW_Init+0x80>)
 8005d6e:	490f      	ldr	r1, [pc, #60]	; (8005dac <SEGGER_SYSVIEW_Init+0x78>)
 8005d70:	f7ff f94a 	bl	8005008 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <SEGGER_SYSVIEW_Init+0x84>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d80:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005d82:	4a0b      	ldr	r2, [pc, #44]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005d8e:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005d94:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	200133f0 	.word	0x200133f0
 8005dac:	08007778 	.word	0x08007778
 8005db0:	200173f8 	.word	0x200173f8
 8005db4:	200173f0 	.word	0x200173f0
 8005db8:	e0001004 	.word	0xe0001004

08005dbc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005dc4:	4a04      	ldr	r2, [pc, #16]	; (8005dd8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6113      	str	r3, [r2, #16]
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	200173f8 	.word	0x200173f8

08005ddc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005de4:	f3ef 8311 	mrs	r3, BASEPRI
 8005de8:	f04f 0120 	mov.w	r1, #32
 8005dec:	f381 8811 	msr	BASEPRI, r1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	4808      	ldr	r0, [pc, #32]	; (8005e14 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005df4:	f7ff f9a4 	bl	8005140 <_PreparePacket>
 8005df8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68b8      	ldr	r0, [r7, #8]
 8005e00:	f7ff fa8e 	bl	8005320 <_SendPacket>
  RECORD_END();
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f383 8811 	msr	BASEPRI, r3
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20017428 	.word	0x20017428

08005e18 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e22:	f3ef 8311 	mrs	r3, BASEPRI
 8005e26:	f04f 0120 	mov.w	r1, #32
 8005e2a:	f381 8811 	msr	BASEPRI, r1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	4816      	ldr	r0, [pc, #88]	; (8005e8c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005e32:	f7ff f985 	bl	8005140 <_PreparePacket>
 8005e36:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e00b      	b.n	8005e5e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	1c59      	adds	r1, r3, #1
 8005e4e:	61f9      	str	r1, [r7, #28]
 8005e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	09db      	lsrs	r3, r3, #7
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b7f      	cmp	r3, #127	; 0x7f
 8005e62:	d8f0      	bhi.n	8005e46 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	61fa      	str	r2, [r7, #28]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	68f9      	ldr	r1, [r7, #12]
 8005e78:	6938      	ldr	r0, [r7, #16]
 8005e7a:	f7ff fa51 	bl	8005320 <_SendPacket>
  RECORD_END();
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f383 8811 	msr	BASEPRI, r3
}
 8005e84:	bf00      	nop
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20017428 	.word	0x20017428

08005e90 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	; 0x30
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea0:	f04f 0120 	mov.w	r1, #32
 8005ea4:	f381 8811 	msr	BASEPRI, r1
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	4825      	ldr	r0, [pc, #148]	; (8005f40 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005eac:	f7ff f948 	bl	8005140 <_PreparePacket>
 8005eb0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ebe:	e00b      	b.n	8005ed8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	1c59      	adds	r1, r3, #1
 8005ec8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	09db      	lsrs	r3, r3, #7
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	2b7f      	cmp	r3, #127	; 0x7f
 8005edc:	d8f0      	bhi.n	8005ec0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	623b      	str	r3, [r7, #32]
 8005ef6:	e00b      	b.n	8005f10 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	1c59      	adds	r1, r3, #1
 8005f00:	6279      	str	r1, [r7, #36]	; 0x24
 8005f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	09db      	lsrs	r3, r3, #7
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	2b7f      	cmp	r3, #127	; 0x7f
 8005f14:	d8f0      	bhi.n	8005ef8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	6979      	ldr	r1, [r7, #20]
 8005f2a:	69b8      	ldr	r0, [r7, #24]
 8005f2c:	f7ff f9f8 	bl	8005320 <_SendPacket>
  RECORD_END();
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f383 8811 	msr	BASEPRI, r3
}
 8005f36:	bf00      	nop
 8005f38:	3730      	adds	r7, #48	; 0x30
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20017428 	.word	0x20017428

08005f44 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08e      	sub	sp, #56	; 0x38
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f52:	f3ef 8311 	mrs	r3, BASEPRI
 8005f56:	f04f 0120 	mov.w	r1, #32
 8005f5a:	f381 8811 	msr	BASEPRI, r1
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	4832      	ldr	r0, [pc, #200]	; (800602c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005f62:	f7ff f8ed 	bl	8005140 <_PreparePacket>
 8005f66:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	633b      	str	r3, [r7, #48]	; 0x30
 8005f74:	e00b      	b.n	8005f8e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	1c59      	adds	r1, r3, #1
 8005f7e:	6379      	str	r1, [r7, #52]	; 0x34
 8005f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	09db      	lsrs	r3, r3, #7
 8005f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2b7f      	cmp	r3, #127	; 0x7f
 8005f92:	d8f0      	bhi.n	8005f76 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	637a      	str	r2, [r7, #52]	; 0x34
 8005f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fac:	e00b      	b.n	8005fc6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	09db      	lsrs	r3, r3, #7
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005fca:	d8f0      	bhi.n	8005fae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	623b      	str	r3, [r7, #32]
 8005fe4:	e00b      	b.n	8005ffe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	1c59      	adds	r1, r3, #1
 8005fee:	6279      	str	r1, [r7, #36]	; 0x24
 8005ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	09db      	lsrs	r3, r3, #7
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2b7f      	cmp	r3, #127	; 0x7f
 8006002:	d8f0      	bhi.n	8005fe6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	627a      	str	r2, [r7, #36]	; 0x24
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	6979      	ldr	r1, [r7, #20]
 8006018:	69b8      	ldr	r0, [r7, #24]
 800601a:	f7ff f981 	bl	8005320 <_SendPacket>
  RECORD_END();
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f383 8811 	msr	BASEPRI, r3
}
 8006024:	bf00      	nop
 8006026:	3738      	adds	r7, #56	; 0x38
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20017428 	.word	0x20017428

08006030 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b090      	sub	sp, #64	; 0x40
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800603e:	f3ef 8311 	mrs	r3, BASEPRI
 8006042:	f04f 0120 	mov.w	r1, #32
 8006046:	f381 8811 	msr	BASEPRI, r1
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	4840      	ldr	r0, [pc, #256]	; (8006150 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800604e:	f7ff f877 	bl	8005140 <_PreparePacket>
 8006052:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006060:	e00b      	b.n	800607a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	1c59      	adds	r1, r3, #1
 800606a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800606c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	09db      	lsrs	r3, r3, #7
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b7f      	cmp	r3, #127	; 0x7f
 800607e:	d8f0      	bhi.n	8006062 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
 8006098:	e00b      	b.n	80060b2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	b2da      	uxtb	r2, r3
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	1c59      	adds	r1, r3, #1
 80060a2:	6379      	str	r1, [r7, #52]	; 0x34
 80060a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	09db      	lsrs	r3, r3, #7
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2b7f      	cmp	r3, #127	; 0x7f
 80060b6:	d8f0      	bhi.n	800609a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	637a      	str	r2, [r7, #52]	; 0x34
 80060be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d0:	e00b      	b.n	80060ea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	1c59      	adds	r1, r3, #1
 80060da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	09db      	lsrs	r3, r3, #7
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	2b7f      	cmp	r3, #127	; 0x7f
 80060ee:	d8f0      	bhi.n	80060d2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
 8006104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	e00b      	b.n	8006122 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1c59      	adds	r1, r3, #1
 8006112:	6279      	str	r1, [r7, #36]	; 0x24
 8006114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	09db      	lsrs	r3, r3, #7
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	2b7f      	cmp	r3, #127	; 0x7f
 8006126:	d8f0      	bhi.n	800610a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	627a      	str	r2, [r7, #36]	; 0x24
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	69b8      	ldr	r0, [r7, #24]
 800613e:	f7ff f8ef 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f383 8811 	msr	BASEPRI, r3
}
 8006148:	bf00      	nop
 800614a:	3740      	adds	r7, #64	; 0x40
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20017428 	.word	0x20017428

08006154 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	; 0x30
 8006158:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800615a:	4b59      	ldr	r3, [pc, #356]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006160:	f3ef 8311 	mrs	r3, BASEPRI
 8006164:	f04f 0120 	mov.w	r1, #32
 8006168:	f381 8811 	msr	BASEPRI, r1
 800616c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800616e:	4b54      	ldr	r3, [pc, #336]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	220a      	movs	r2, #10
 8006174:	4953      	ldr	r1, [pc, #332]	; (80062c4 <SEGGER_SYSVIEW_Start+0x170>)
 8006176:	4618      	mov	r0, r3
 8006178:	f7fa f832 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006182:	f7fe fb8f 	bl	80048a4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006186:	200a      	movs	r0, #10
 8006188:	f7ff fe28 	bl	8005ddc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800618c:	f3ef 8311 	mrs	r3, BASEPRI
 8006190:	f04f 0120 	mov.w	r1, #32
 8006194:	f381 8811 	msr	BASEPRI, r1
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	484b      	ldr	r0, [pc, #300]	; (80062c8 <SEGGER_SYSVIEW_Start+0x174>)
 800619c:	f7fe ffd0 	bl	8005140 <_PreparePacket>
 80061a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061aa:	4b45      	ldr	r3, [pc, #276]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b0:	e00b      	b.n	80061ca <SEGGER_SYSVIEW_Start+0x76>
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	1c59      	adds	r1, r3, #1
 80061ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	09db      	lsrs	r3, r3, #7
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	2b7f      	cmp	r3, #127	; 0x7f
 80061ce:	d8f0      	bhi.n	80061b2 <SEGGER_SYSVIEW_Start+0x5e>
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
 80061e4:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	623b      	str	r3, [r7, #32]
 80061ea:	e00b      	b.n	8006204 <SEGGER_SYSVIEW_Start+0xb0>
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	6279      	str	r1, [r7, #36]	; 0x24
 80061f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	09db      	lsrs	r3, r3, #7
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	2b7f      	cmp	r3, #127	; 0x7f
 8006208:	d8f0      	bhi.n	80061ec <SEGGER_SYSVIEW_Start+0x98>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	627a      	str	r2, [r7, #36]	; 0x24
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	4b28      	ldr	r3, [pc, #160]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	e00b      	b.n	800623e <SEGGER_SYSVIEW_Start+0xea>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	b2da      	uxtb	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	1c59      	adds	r1, r3, #1
 800622e:	61f9      	str	r1, [r7, #28]
 8006230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	09db      	lsrs	r3, r3, #7
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b7f      	cmp	r3, #127	; 0x7f
 8006242:	d8f0      	bhi.n	8006226 <SEGGER_SYSVIEW_Start+0xd2>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	61fa      	str	r2, [r7, #28]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	e00b      	b.n	8006276 <SEGGER_SYSVIEW_Start+0x122>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	6179      	str	r1, [r7, #20]
 8006268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b7f      	cmp	r3, #127	; 0x7f
 800627a:	d8f0      	bhi.n	800625e <SEGGER_SYSVIEW_Start+0x10a>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	617a      	str	r2, [r7, #20]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800628c:	2218      	movs	r2, #24
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff f845 	bl	8005320 <_SendPacket>
      RECORD_END();
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800629c:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80062aa:	f000 f9eb 	bl	8006684 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80062ae:	f000 f9b1 	bl	8006614 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80062b2:	f000 fc23 	bl	8006afc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80062b6:	bf00      	nop
 80062b8:	3730      	adds	r7, #48	; 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	200173f8 	.word	0x200173f8
 80062c4:	080077b8 	.word	0x080077b8
 80062c8:	20017428 	.word	0x20017428

080062cc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062d2:	f3ef 8311 	mrs	r3, BASEPRI
 80062d6:	f04f 0120 	mov.w	r1, #32
 80062da:	f381 8811 	msr	BASEPRI, r1
 80062de:	607b      	str	r3, [r7, #4]
 80062e0:	480b      	ldr	r0, [pc, #44]	; (8006310 <SEGGER_SYSVIEW_Stop+0x44>)
 80062e2:	f7fe ff2d 	bl	8005140 <_PreparePacket>
 80062e6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <SEGGER_SYSVIEW_Stop+0x48>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80062f0:	220b      	movs	r2, #11
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	f7ff f813 	bl	8005320 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <SEGGER_SYSVIEW_Stop+0x48>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f383 8811 	msr	BASEPRI, r3
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20017428 	.word	0x20017428
 8006314:	200173f8 	.word	0x200173f8

08006318 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	; 0x30
 800631c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800631e:	f3ef 8311 	mrs	r3, BASEPRI
 8006322:	f04f 0120 	mov.w	r1, #32
 8006326:	f381 8811 	msr	BASEPRI, r1
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	4845      	ldr	r0, [pc, #276]	; (8006444 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800632e:	f7fe ff07 	bl	8005140 <_PreparePacket>
 8006332:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633c:	4b42      	ldr	r3, [pc, #264]	; (8006448 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
 8006342:	e00b      	b.n	800635c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	b2da      	uxtb	r2, r3
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800634e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	2b7f      	cmp	r3, #127	; 0x7f
 8006360:	d8f0      	bhi.n	8006344 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	4b34      	ldr	r3, [pc, #208]	; (8006448 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	623b      	str	r3, [r7, #32]
 800637c:	e00b      	b.n	8006396 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	1c59      	adds	r1, r3, #1
 8006386:	6279      	str	r1, [r7, #36]	; 0x24
 8006388:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	09db      	lsrs	r3, r3, #7
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	2b7f      	cmp	r3, #127	; 0x7f
 800639a:	d8f0      	bhi.n	800637e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	627a      	str	r2, [r7, #36]	; 0x24
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	4b25      	ldr	r3, [pc, #148]	; (8006448 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	e00b      	b.n	80063d0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	61f9      	str	r1, [r7, #28]
 80063c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	09db      	lsrs	r3, r3, #7
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b7f      	cmp	r3, #127	; 0x7f
 80063d4:	d8f0      	bhi.n	80063b8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	61fa      	str	r2, [r7, #28]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	e00b      	b.n	8006408 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1c59      	adds	r1, r3, #1
 80063f8:	6179      	str	r1, [r7, #20]
 80063fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	09db      	lsrs	r3, r3, #7
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2b7f      	cmp	r3, #127	; 0x7f
 800640c:	d8f0      	bhi.n	80063f0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	617a      	str	r2, [r7, #20]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800641e:	2218      	movs	r2, #24
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	68b8      	ldr	r0, [r7, #8]
 8006424:	f7fe ff7c 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006436:	4b04      	ldr	r3, [pc, #16]	; (8006448 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	4798      	blx	r3
  }
}
 800643c:	bf00      	nop
 800643e:	3730      	adds	r7, #48	; 0x30
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20017428 	.word	0x20017428
 8006448:	200173f8 	.word	0x200173f8

0800644c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b092      	sub	sp, #72	; 0x48
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006454:	f3ef 8311 	mrs	r3, BASEPRI
 8006458:	f04f 0120 	mov.w	r1, #32
 800645c:	f381 8811 	msr	BASEPRI, r1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	486a      	ldr	r0, [pc, #424]	; (800660c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006464:	f7fe fe6c 	bl	8005140 <_PreparePacket>
 8006468:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b66      	ldr	r3, [pc, #408]	; (8006610 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
 800647e:	e00b      	b.n	8006498 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006482:	b2da      	uxtb	r2, r3
 8006484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	6479      	str	r1, [r7, #68]	; 0x44
 800648a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006494:	09db      	lsrs	r3, r3, #7
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
 8006498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649a:	2b7f      	cmp	r3, #127	; 0x7f
 800649c:	d8f0      	bhi.n	8006480 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800649e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	647a      	str	r2, [r7, #68]	; 0x44
 80064a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b8:	e00b      	b.n	80064d2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	1c59      	adds	r1, r3, #1
 80064c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80064c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	09db      	lsrs	r3, r3, #7
 80064d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	2b7f      	cmp	r3, #127	; 0x7f
 80064d6:	d8f0      	bhi.n	80064ba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80064d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7fe fdd5 	bl	80050a0 <_EncodeStr>
 80064f6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80064f8:	2209      	movs	r2, #9
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	6938      	ldr	r0, [r7, #16]
 80064fe:	f7fe ff0f 	bl	8005320 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b40      	ldr	r3, [pc, #256]	; (8006610 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	633b      	str	r3, [r7, #48]	; 0x30
 8006516:	e00b      	b.n	8006530 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	b2da      	uxtb	r2, r3
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	6379      	str	r1, [r7, #52]	; 0x34
 8006522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	09db      	lsrs	r3, r3, #7
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	2b7f      	cmp	r3, #127	; 0x7f
 8006534:	d8f0      	bhi.n	8006518 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	637a      	str	r2, [r7, #52]	; 0x34
 800653c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006544:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	e00b      	b.n	800656a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800655c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	09db      	lsrs	r3, r3, #7
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	2b7f      	cmp	r3, #127	; 0x7f
 800656e:	d8f0      	bhi.n	8006552 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e00b      	b.n	80065a4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	6279      	str	r1, [r7, #36]	; 0x24
 8006596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	09db      	lsrs	r3, r3, #7
 80065a2:	623b      	str	r3, [r7, #32]
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2b7f      	cmp	r3, #127	; 0x7f
 80065a8:	d8f0      	bhi.n	800658c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	627a      	str	r2, [r7, #36]	; 0x24
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e00b      	b.n	80065dc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	61f9      	str	r1, [r7, #28]
 80065ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	09db      	lsrs	r3, r3, #7
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b7f      	cmp	r3, #127	; 0x7f
 80065e0:	d8f0      	bhi.n	80065c4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	61fa      	str	r2, [r7, #28]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80065f2:	2215      	movs	r2, #21
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	6938      	ldr	r0, [r7, #16]
 80065f8:	f7fe fe92 	bl	8005320 <_SendPacket>
  RECORD_END();
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f383 8811 	msr	BASEPRI, r3
}
 8006602:	bf00      	nop
 8006604:	3748      	adds	r7, #72	; 0x48
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20017428 	.word	0x20017428
 8006610:	200173f8 	.word	0x200173f8

08006614 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4798      	blx	r3
  }
}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200173f8 	.word	0x200173f8

0800663c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006644:	f3ef 8311 	mrs	r3, BASEPRI
 8006648:	f04f 0120 	mov.w	r1, #32
 800664c:	f381 8811 	msr	BASEPRI, r1
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	480b      	ldr	r0, [pc, #44]	; (8006680 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006654:	f7fe fd74 	bl	8005140 <_PreparePacket>
 8006658:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f7fe fd1e 	bl	80050a0 <_EncodeStr>
 8006664:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006666:	220e      	movs	r2, #14
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f7fe fe58 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f383 8811 	msr	BASEPRI, r3
}
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20017428 	.word	0x20017428

08006684 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01a      	beq.n	80066c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d015      	beq.n	80066c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800669c:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4798      	blx	r3
 80066a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80066aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	000a      	movs	r2, r1
 80066b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066ba:	4613      	mov	r3, r2
 80066bc:	461a      	mov	r2, r3
 80066be:	4621      	mov	r1, r4
 80066c0:	200d      	movs	r0, #13
 80066c2:	f7ff fbe5 	bl	8005e90 <SEGGER_SYSVIEW_RecordU32x2>
 80066c6:	e006      	b.n	80066d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4619      	mov	r1, r3
 80066ce:	200c      	movs	r0, #12
 80066d0:	f7ff fba2 	bl	8005e18 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd90      	pop	{r4, r7, pc}
 80066de:	bf00      	nop
 80066e0:	200173f8 	.word	0x200173f8
 80066e4:	e0001004 	.word	0xe0001004

080066e8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066ee:	f3ef 8311 	mrs	r3, BASEPRI
 80066f2:	f04f 0120 	mov.w	r1, #32
 80066f6:	f381 8811 	msr	BASEPRI, r1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	4819      	ldr	r0, [pc, #100]	; (8006764 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80066fe:	f7fe fd1f 	bl	8005140 <_PreparePacket>
 8006702:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006708:	4b17      	ldr	r3, [pc, #92]	; (8006768 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006710:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	e00b      	b.n	8006734 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	6179      	str	r1, [r7, #20]
 8006726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b7f      	cmp	r3, #127	; 0x7f
 8006738:	d8f0      	bhi.n	800671c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	617a      	str	r2, [r7, #20]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800674a:	2202      	movs	r2, #2
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	68b8      	ldr	r0, [r7, #8]
 8006750:	f7fe fde6 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f383 8811 	msr	BASEPRI, r3
}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20017428 	.word	0x20017428
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006772:	f3ef 8311 	mrs	r3, BASEPRI
 8006776:	f04f 0120 	mov.w	r1, #32
 800677a:	f381 8811 	msr	BASEPRI, r1
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	4807      	ldr	r0, [pc, #28]	; (80067a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006782:	f7fe fcdd 	bl	8005140 <_PreparePacket>
 8006786:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006788:	2203      	movs	r2, #3
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6838      	ldr	r0, [r7, #0]
 800678e:	f7fe fdc7 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f383 8811 	msr	BASEPRI, r3
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20017428 	.word	0x20017428

080067a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067aa:	f3ef 8311 	mrs	r3, BASEPRI
 80067ae:	f04f 0120 	mov.w	r1, #32
 80067b2:	f381 8811 	msr	BASEPRI, r1
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	4807      	ldr	r0, [pc, #28]	; (80067d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80067ba:	f7fe fcc1 	bl	8005140 <_PreparePacket>
 80067be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80067c0:	2212      	movs	r2, #18
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6838      	ldr	r0, [r7, #0]
 80067c6:	f7fe fdab 	bl	8005320 <_SendPacket>
  RECORD_END();
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f383 8811 	msr	BASEPRI, r3
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20017428 	.word	0x20017428

080067dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067e2:	f3ef 8311 	mrs	r3, BASEPRI
 80067e6:	f04f 0120 	mov.w	r1, #32
 80067ea:	f381 8811 	msr	BASEPRI, r1
 80067ee:	607b      	str	r3, [r7, #4]
 80067f0:	4807      	ldr	r0, [pc, #28]	; (8006810 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067f2:	f7fe fca5 	bl	8005140 <_PreparePacket>
 80067f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067f8:	2211      	movs	r2, #17
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6838      	ldr	r0, [r7, #0]
 80067fe:	f7fe fd8f 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f383 8811 	msr	BASEPRI, r3
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20017428 	.word	0x20017428

08006814 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800681c:	f3ef 8311 	mrs	r3, BASEPRI
 8006820:	f04f 0120 	mov.w	r1, #32
 8006824:	f381 8811 	msr	BASEPRI, r1
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	4819      	ldr	r0, [pc, #100]	; (8006890 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800682c:	f7fe fc88 	bl	8005140 <_PreparePacket>
 8006830:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006836:	4b17      	ldr	r3, [pc, #92]	; (8006894 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	61f9      	str	r1, [r7, #28]
 8006854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b7f      	cmp	r3, #127	; 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	61fa      	str	r2, [r7, #28]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006878:	2208      	movs	r2, #8
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f7fe fd4f 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f383 8811 	msr	BASEPRI, r3
}
 8006888:	bf00      	nop
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20017428 	.word	0x20017428
 8006894:	200173f8 	.word	0x200173f8

08006898 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068a0:	f3ef 8311 	mrs	r3, BASEPRI
 80068a4:	f04f 0120 	mov.w	r1, #32
 80068a8:	f381 8811 	msr	BASEPRI, r1
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	4819      	ldr	r0, [pc, #100]	; (8006914 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068b0:	f7fe fc46 	bl	8005140 <_PreparePacket>
 80068b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	e00b      	b.n	80068e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	1c59      	adds	r1, r3, #1
 80068d6:	61f9      	str	r1, [r7, #28]
 80068d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	09db      	lsrs	r3, r3, #7
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ea:	d8f0      	bhi.n	80068ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	61fa      	str	r2, [r7, #28]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80068fc:	2204      	movs	r2, #4
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	6938      	ldr	r0, [r7, #16]
 8006902:	f7fe fd0d 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f383 8811 	msr	BASEPRI, r3
}
 800690c:	bf00      	nop
 800690e:	3720      	adds	r7, #32
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20017428 	.word	0x20017428
 8006918:	200173f8 	.word	0x200173f8

0800691c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006924:	f3ef 8311 	mrs	r3, BASEPRI
 8006928:	f04f 0120 	mov.w	r1, #32
 800692c:	f381 8811 	msr	BASEPRI, r1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	4819      	ldr	r0, [pc, #100]	; (8006998 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006934:	f7fe fc04 	bl	8005140 <_PreparePacket>
 8006938:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800693e:	4b17      	ldr	r3, [pc, #92]	; (800699c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	e00b      	b.n	800696a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	1c59      	adds	r1, r3, #1
 800695a:	61f9      	str	r1, [r7, #28]
 800695c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	09db      	lsrs	r3, r3, #7
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b7f      	cmp	r3, #127	; 0x7f
 800696e:	d8f0      	bhi.n	8006952 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	61fa      	str	r2, [r7, #28]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006980:	2206      	movs	r2, #6
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	6938      	ldr	r0, [r7, #16]
 8006986:	f7fe fccb 	bl	8005320 <_SendPacket>
  RECORD_END();
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f383 8811 	msr	BASEPRI, r3
}
 8006990:	bf00      	nop
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20017428 	.word	0x20017428
 800699c:	200173f8 	.word	0x200173f8

080069a0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	1ad3      	subs	r3, r2, r3
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	200173f8 	.word	0x200173f8

080069c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08c      	sub	sp, #48	; 0x30
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069ca:	4b3b      	ldr	r3, [pc, #236]	; (8006ab8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d06d      	beq.n	8006aae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069d2:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069d8:	2300      	movs	r3, #0
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
 80069dc:	e008      	b.n	80069f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	3301      	adds	r3, #1
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d3f2      	bcc.n	80069de <SEGGER_SYSVIEW_SendModule+0x1e>
 80069f8:	e000      	b.n	80069fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d055      	beq.n	8006aae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a02:	f3ef 8311 	mrs	r3, BASEPRI
 8006a06:	f04f 0120 	mov.w	r1, #32
 8006a0a:	f381 8811 	msr	BASEPRI, r1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	482a      	ldr	r0, [pc, #168]	; (8006abc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a12:	f7fe fb95 	bl	8005140 <_PreparePacket>
 8006a16:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	623b      	str	r3, [r7, #32]
 8006a24:	e00b      	b.n	8006a3e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	09db      	lsrs	r3, r3, #7
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2b7f      	cmp	r3, #127	; 0x7f
 8006a42:	d8f0      	bhi.n	8006a26 <SEGGER_SYSVIEW_SendModule+0x66>
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	627a      	str	r2, [r7, #36]	; 0x24
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e00b      	b.n	8006a78 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	1c59      	adds	r1, r3, #1
 8006a68:	61f9      	str	r1, [r7, #28]
 8006a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	09db      	lsrs	r3, r3, #7
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7c:	d8f0      	bhi.n	8006a60 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	61fa      	str	r2, [r7, #28]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2280      	movs	r2, #128	; 0x80
 8006a94:	4619      	mov	r1, r3
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7fe fb02 	bl	80050a0 <_EncodeStr>
 8006a9c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a9e:	2216      	movs	r2, #22
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	6938      	ldr	r0, [r7, #16]
 8006aa4:	f7fe fc3c 	bl	8005320 <_SendPacket>
      RECORD_END();
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3730      	adds	r7, #48	; 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20017420 	.word	0x20017420
 8006abc:	20017428 	.word	0x20017428

08006ac0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00f      	beq.n	8006aee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f2      	bne.n	8006ad4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20017420 	.word	0x20017420

08006afc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b02:	f3ef 8311 	mrs	r3, BASEPRI
 8006b06:	f04f 0120 	mov.w	r1, #32
 8006b0a:	f381 8811 	msr	BASEPRI, r1
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	4817      	ldr	r0, [pc, #92]	; (8006b70 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b12:	f7fe fb15 	bl	8005140 <_PreparePacket>
 8006b16:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e00b      	b.n	8006b40 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	6179      	str	r1, [r7, #20]
 8006b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	09db      	lsrs	r3, r3, #7
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b7f      	cmp	r3, #127	; 0x7f
 8006b44:	d8f0      	bhi.n	8006b28 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	617a      	str	r2, [r7, #20]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b56:	221b      	movs	r2, #27
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f7fe fbe0 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f383 8811 	msr	BASEPRI, r3
}
 8006b66:	bf00      	nop
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20017428 	.word	0x20017428
 8006b74:	20017424 	.word	0x20017424

08006b78 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006b78:	b40f      	push	{r0, r1, r2, r3}
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	6938      	ldr	r0, [r7, #16]
 8006b8e:	f7fe fed9 	bl	8005944 <_VPrintTarget>
  va_end(ParamList);
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9c:	b004      	add	sp, #16
 8006b9e:	4770      	bx	lr

08006ba0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bac:	f04f 0120 	mov.w	r1, #32
 8006bb0:	f381 8811 	msr	BASEPRI, r1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	4827      	ldr	r0, [pc, #156]	; (8006c54 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006bb8:	f7fe fac2 	bl	8005140 <_PreparePacket>
 8006bbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bbe:	2280      	movs	r2, #128	; 0x80
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	6938      	ldr	r0, [r7, #16]
 8006bc4:	f7fe fa6c 	bl	80050a0 <_EncodeStr>
 8006bc8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	2301      	movs	r3, #1
 8006bd0:	623b      	str	r3, [r7, #32]
 8006bd2:	e00b      	b.n	8006bec <SEGGER_SYSVIEW_Warn+0x4c>
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	1c59      	adds	r1, r3, #1
 8006bdc:	6279      	str	r1, [r7, #36]	; 0x24
 8006bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	09db      	lsrs	r3, r3, #7
 8006bea:	623b      	str	r3, [r7, #32]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf0:	d8f0      	bhi.n	8006bd4 <SEGGER_SYSVIEW_Warn+0x34>
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	627a      	str	r2, [r7, #36]	; 0x24
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	e00b      	b.n	8006c24 <SEGGER_SYSVIEW_Warn+0x84>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	61f9      	str	r1, [r7, #28]
 8006c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	09db      	lsrs	r3, r3, #7
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b7f      	cmp	r3, #127	; 0x7f
 8006c28:	d8f0      	bhi.n	8006c0c <SEGGER_SYSVIEW_Warn+0x6c>
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	61fa      	str	r2, [r7, #28]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c3a:	221a      	movs	r2, #26
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	6938      	ldr	r0, [r7, #16]
 8006c40:	f7fe fb6e 	bl	8005320 <_SendPacket>
  RECORD_END();
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f383 8811 	msr	BASEPRI, r3
}
 8006c4a:	bf00      	nop
 8006c4c:	3728      	adds	r7, #40	; 0x28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20017428 	.word	0x20017428

08006c58 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c5e:	7e1b      	ldrb	r3, [r3, #24]
 8006c60:	4619      	mov	r1, r3
 8006c62:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006c64:	460b      	mov	r3, r1
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	440b      	add	r3, r1
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	336c      	adds	r3, #108	; 0x6c
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c74:	7e1b      	ldrb	r3, [r3, #24]
 8006c76:	4618      	mov	r0, r3
 8006c78:	490d      	ldr	r1, [pc, #52]	; (8006cb0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4403      	add	r3, r0
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	440b      	add	r3, r1
 8006c84:	3370      	adds	r3, #112	; 0x70
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d00b      	beq.n	8006ca4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c8e:	789b      	ldrb	r3, [r3, #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d107      	bne.n	8006ca4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006c9a:	f7fe fa5d 	bl	8005158 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006ca4:	4b01      	ldr	r3, [pc, #4]	; (8006cac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	200173f8 	.word	0x200173f8
 8006cb0:	20012f38 	.word	0x20012f38

08006cb4 <__libc_init_array>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4d0d      	ldr	r5, [pc, #52]	; (8006cec <__libc_init_array+0x38>)
 8006cb8:	4c0d      	ldr	r4, [pc, #52]	; (8006cf0 <__libc_init_array+0x3c>)
 8006cba:	1b64      	subs	r4, r4, r5
 8006cbc:	10a4      	asrs	r4, r4, #2
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	42a6      	cmp	r6, r4
 8006cc2:	d109      	bne.n	8006cd8 <__libc_init_array+0x24>
 8006cc4:	4d0b      	ldr	r5, [pc, #44]	; (8006cf4 <__libc_init_array+0x40>)
 8006cc6:	4c0c      	ldr	r4, [pc, #48]	; (8006cf8 <__libc_init_array+0x44>)
 8006cc8:	f000 fcc0 	bl	800764c <_init>
 8006ccc:	1b64      	subs	r4, r4, r5
 8006cce:	10a4      	asrs	r4, r4, #2
 8006cd0:	2600      	movs	r6, #0
 8006cd2:	42a6      	cmp	r6, r4
 8006cd4:	d105      	bne.n	8006ce2 <__libc_init_array+0x2e>
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cdc:	4798      	blx	r3
 8006cde:	3601      	adds	r6, #1
 8006ce0:	e7ee      	b.n	8006cc0 <__libc_init_array+0xc>
 8006ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce6:	4798      	blx	r3
 8006ce8:	3601      	adds	r6, #1
 8006cea:	e7f2      	b.n	8006cd2 <__libc_init_array+0x1e>
 8006cec:	08007810 	.word	0x08007810
 8006cf0:	08007810 	.word	0x08007810
 8006cf4:	08007810 	.word	0x08007810
 8006cf8:	08007814 	.word	0x08007814

08006cfc <memcmp>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	3901      	subs	r1, #1
 8006d00:	4402      	add	r2, r0
 8006d02:	4290      	cmp	r0, r2
 8006d04:	d101      	bne.n	8006d0a <memcmp+0xe>
 8006d06:	2000      	movs	r0, #0
 8006d08:	e005      	b.n	8006d16 <memcmp+0x1a>
 8006d0a:	7803      	ldrb	r3, [r0, #0]
 8006d0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d001      	beq.n	8006d18 <memcmp+0x1c>
 8006d14:	1b18      	subs	r0, r3, r4
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	3001      	adds	r0, #1
 8006d1a:	e7f2      	b.n	8006d02 <memcmp+0x6>

08006d1c <memcpy>:
 8006d1c:	440a      	add	r2, r1
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d24:	d100      	bne.n	8006d28 <memcpy+0xc>
 8006d26:	4770      	bx	lr
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d32:	4291      	cmp	r1, r2
 8006d34:	d1f9      	bne.n	8006d2a <memcpy+0xe>
 8006d36:	bd10      	pop	{r4, pc}

08006d38 <memset>:
 8006d38:	4402      	add	r2, r0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d100      	bne.n	8006d42 <memset+0xa>
 8006d40:	4770      	bx	lr
 8006d42:	f803 1b01 	strb.w	r1, [r3], #1
 8006d46:	e7f9      	b.n	8006d3c <memset+0x4>

08006d48 <sniprintf>:
 8006d48:	b40c      	push	{r2, r3}
 8006d4a:	b530      	push	{r4, r5, lr}
 8006d4c:	4b17      	ldr	r3, [pc, #92]	; (8006dac <sniprintf+0x64>)
 8006d4e:	1e0c      	subs	r4, r1, #0
 8006d50:	681d      	ldr	r5, [r3, #0]
 8006d52:	b09d      	sub	sp, #116	; 0x74
 8006d54:	da08      	bge.n	8006d68 <sniprintf+0x20>
 8006d56:	238b      	movs	r3, #139	; 0x8b
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5e:	b01d      	add	sp, #116	; 0x74
 8006d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d64:	b002      	add	sp, #8
 8006d66:	4770      	bx	lr
 8006d68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d70:	bf14      	ite	ne
 8006d72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d76:	4623      	moveq	r3, r4
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d80:	9002      	str	r0, [sp, #8]
 8006d82:	9006      	str	r0, [sp, #24]
 8006d84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d8a:	ab21      	add	r3, sp, #132	; 0x84
 8006d8c:	a902      	add	r1, sp, #8
 8006d8e:	4628      	mov	r0, r5
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	f000 f869 	bl	8006e68 <_svfiprintf_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	bfbc      	itt	lt
 8006d9a:	238b      	movlt	r3, #139	; 0x8b
 8006d9c:	602b      	strlt	r3, [r5, #0]
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	d0dd      	beq.n	8006d5e <sniprintf+0x16>
 8006da2:	9b02      	ldr	r3, [sp, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	e7d9      	b.n	8006d5e <sniprintf+0x16>
 8006daa:	bf00      	nop
 8006dac:	2000001c 	.word	0x2000001c

08006db0 <__ssputs_r>:
 8006db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	688e      	ldr	r6, [r1, #8]
 8006db6:	429e      	cmp	r6, r3
 8006db8:	4682      	mov	sl, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4690      	mov	r8, r2
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	d838      	bhi.n	8006e34 <__ssputs_r+0x84>
 8006dc2:	898a      	ldrh	r2, [r1, #12]
 8006dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dc8:	d032      	beq.n	8006e30 <__ssputs_r+0x80>
 8006dca:	6825      	ldr	r5, [r4, #0]
 8006dcc:	6909      	ldr	r1, [r1, #16]
 8006dce:	eba5 0901 	sub.w	r9, r5, r1
 8006dd2:	6965      	ldr	r5, [r4, #20]
 8006dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ddc:	3301      	adds	r3, #1
 8006dde:	444b      	add	r3, r9
 8006de0:	106d      	asrs	r5, r5, #1
 8006de2:	429d      	cmp	r5, r3
 8006de4:	bf38      	it	cc
 8006de6:	461d      	movcc	r5, r3
 8006de8:	0553      	lsls	r3, r2, #21
 8006dea:	d531      	bpl.n	8006e50 <__ssputs_r+0xa0>
 8006dec:	4629      	mov	r1, r5
 8006dee:	f000 fb55 	bl	800749c <_malloc_r>
 8006df2:	4606      	mov	r6, r0
 8006df4:	b950      	cbnz	r0, 8006e0c <__ssputs_r+0x5c>
 8006df6:	230c      	movs	r3, #12
 8006df8:	f8ca 3000 	str.w	r3, [sl]
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0c:	6921      	ldr	r1, [r4, #16]
 8006e0e:	464a      	mov	r2, r9
 8006e10:	f7ff ff84 	bl	8006d1c <memcpy>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	6126      	str	r6, [r4, #16]
 8006e22:	6165      	str	r5, [r4, #20]
 8006e24:	444e      	add	r6, r9
 8006e26:	eba5 0509 	sub.w	r5, r5, r9
 8006e2a:	6026      	str	r6, [r4, #0]
 8006e2c:	60a5      	str	r5, [r4, #8]
 8006e2e:	463e      	mov	r6, r7
 8006e30:	42be      	cmp	r6, r7
 8006e32:	d900      	bls.n	8006e36 <__ssputs_r+0x86>
 8006e34:	463e      	mov	r6, r7
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	f000 faa8 	bl	8007390 <memmove>
 8006e40:	68a3      	ldr	r3, [r4, #8]
 8006e42:	1b9b      	subs	r3, r3, r6
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4433      	add	r3, r6
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e7db      	b.n	8006e08 <__ssputs_r+0x58>
 8006e50:	462a      	mov	r2, r5
 8006e52:	f000 fb97 	bl	8007584 <_realloc_r>
 8006e56:	4606      	mov	r6, r0
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1e1      	bne.n	8006e20 <__ssputs_r+0x70>
 8006e5c:	6921      	ldr	r1, [r4, #16]
 8006e5e:	4650      	mov	r0, sl
 8006e60:	f000 fab0 	bl	80073c4 <_free_r>
 8006e64:	e7c7      	b.n	8006df6 <__ssputs_r+0x46>
	...

08006e68 <_svfiprintf_r>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	4698      	mov	r8, r3
 8006e6e:	898b      	ldrh	r3, [r1, #12]
 8006e70:	061b      	lsls	r3, r3, #24
 8006e72:	b09d      	sub	sp, #116	; 0x74
 8006e74:	4607      	mov	r7, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	4614      	mov	r4, r2
 8006e7a:	d50e      	bpl.n	8006e9a <_svfiprintf_r+0x32>
 8006e7c:	690b      	ldr	r3, [r1, #16]
 8006e7e:	b963      	cbnz	r3, 8006e9a <_svfiprintf_r+0x32>
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	f000 fb0b 	bl	800749c <_malloc_r>
 8006e86:	6028      	str	r0, [r5, #0]
 8006e88:	6128      	str	r0, [r5, #16]
 8006e8a:	b920      	cbnz	r0, 8006e96 <_svfiprintf_r+0x2e>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e0d1      	b.n	800703a <_svfiprintf_r+0x1d2>
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	616b      	str	r3, [r5, #20]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ea8:	2330      	movs	r3, #48	; 0x30
 8006eaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007054 <_svfiprintf_r+0x1ec>
 8006eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eb2:	f04f 0901 	mov.w	r9, #1
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	469a      	mov	sl, r3
 8006eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ebe:	b10a      	cbz	r2, 8006ec4 <_svfiprintf_r+0x5c>
 8006ec0:	2a25      	cmp	r2, #37	; 0x25
 8006ec2:	d1f9      	bne.n	8006eb8 <_svfiprintf_r+0x50>
 8006ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec8:	d00b      	beq.n	8006ee2 <_svfiprintf_r+0x7a>
 8006eca:	465b      	mov	r3, fp
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ff6d 	bl	8006db0 <__ssputs_r>
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f000 80aa 	beq.w	8007030 <_svfiprintf_r+0x1c8>
 8006edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ede:	445a      	add	r2, fp
 8006ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80a2 	beq.w	8007030 <_svfiprintf_r+0x1c8>
 8006eec:	2300      	movs	r3, #0
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef6:	f10a 0a01 	add.w	sl, sl, #1
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f02:	931a      	str	r3, [sp, #104]	; 0x68
 8006f04:	4654      	mov	r4, sl
 8006f06:	2205      	movs	r2, #5
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	4851      	ldr	r0, [pc, #324]	; (8007054 <_svfiprintf_r+0x1ec>)
 8006f0e:	f7f9 f9b7 	bl	8000280 <memchr>
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	b9d8      	cbnz	r0, 8006f4e <_svfiprintf_r+0xe6>
 8006f16:	06d0      	lsls	r0, r2, #27
 8006f18:	bf44      	itt	mi
 8006f1a:	2320      	movmi	r3, #32
 8006f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f20:	0711      	lsls	r1, r2, #28
 8006f22:	bf44      	itt	mi
 8006f24:	232b      	movmi	r3, #43	; 0x2b
 8006f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f30:	d015      	beq.n	8006f5e <_svfiprintf_r+0xf6>
 8006f32:	9a07      	ldr	r2, [sp, #28]
 8006f34:	4654      	mov	r4, sl
 8006f36:	2000      	movs	r0, #0
 8006f38:	f04f 0c0a 	mov.w	ip, #10
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f42:	3b30      	subs	r3, #48	; 0x30
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d94e      	bls.n	8006fe6 <_svfiprintf_r+0x17e>
 8006f48:	b1b0      	cbz	r0, 8006f78 <_svfiprintf_r+0x110>
 8006f4a:	9207      	str	r2, [sp, #28]
 8006f4c:	e014      	b.n	8006f78 <_svfiprintf_r+0x110>
 8006f4e:	eba0 0308 	sub.w	r3, r0, r8
 8006f52:	fa09 f303 	lsl.w	r3, r9, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	46a2      	mov	sl, r4
 8006f5c:	e7d2      	b.n	8006f04 <_svfiprintf_r+0x9c>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	1d19      	adds	r1, r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	9103      	str	r1, [sp, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bfbb      	ittet	lt
 8006f6a:	425b      	neglt	r3, r3
 8006f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f70:	9307      	strge	r3, [sp, #28]
 8006f72:	9307      	strlt	r3, [sp, #28]
 8006f74:	bfb8      	it	lt
 8006f76:	9204      	strlt	r2, [sp, #16]
 8006f78:	7823      	ldrb	r3, [r4, #0]
 8006f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f7c:	d10c      	bne.n	8006f98 <_svfiprintf_r+0x130>
 8006f7e:	7863      	ldrb	r3, [r4, #1]
 8006f80:	2b2a      	cmp	r3, #42	; 0x2a
 8006f82:	d135      	bne.n	8006ff0 <_svfiprintf_r+0x188>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	1d1a      	adds	r2, r3, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	9203      	str	r2, [sp, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bfb8      	it	lt
 8006f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f94:	3402      	adds	r4, #2
 8006f96:	9305      	str	r3, [sp, #20]
 8006f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007064 <_svfiprintf_r+0x1fc>
 8006f9c:	7821      	ldrb	r1, [r4, #0]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	f7f9 f96d 	bl	8000280 <memchr>
 8006fa6:	b140      	cbz	r0, 8006fba <_svfiprintf_r+0x152>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	eba0 000a 	sub.w	r0, r0, sl
 8006fae:	fa03 f000 	lsl.w	r0, r3, r0
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	4303      	orrs	r3, r0
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbe:	4826      	ldr	r0, [pc, #152]	; (8007058 <_svfiprintf_r+0x1f0>)
 8006fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fc4:	2206      	movs	r2, #6
 8006fc6:	f7f9 f95b 	bl	8000280 <memchr>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d038      	beq.n	8007040 <_svfiprintf_r+0x1d8>
 8006fce:	4b23      	ldr	r3, [pc, #140]	; (800705c <_svfiprintf_r+0x1f4>)
 8006fd0:	bb1b      	cbnz	r3, 800701a <_svfiprintf_r+0x1b2>
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	3307      	adds	r3, #7
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	3308      	adds	r3, #8
 8006fdc:	9303      	str	r3, [sp, #12]
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	4433      	add	r3, r6
 8006fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe4:	e767      	b.n	8006eb6 <_svfiprintf_r+0x4e>
 8006fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fea:	460c      	mov	r4, r1
 8006fec:	2001      	movs	r0, #1
 8006fee:	e7a5      	b.n	8006f3c <_svfiprintf_r+0xd4>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	9305      	str	r3, [sp, #20]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f04f 0c0a 	mov.w	ip, #10
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007002:	3a30      	subs	r2, #48	; 0x30
 8007004:	2a09      	cmp	r2, #9
 8007006:	d903      	bls.n	8007010 <_svfiprintf_r+0x1a8>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0c5      	beq.n	8006f98 <_svfiprintf_r+0x130>
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	e7c3      	b.n	8006f98 <_svfiprintf_r+0x130>
 8007010:	fb0c 2101 	mla	r1, ip, r1, r2
 8007014:	4604      	mov	r4, r0
 8007016:	2301      	movs	r3, #1
 8007018:	e7f0      	b.n	8006ffc <_svfiprintf_r+0x194>
 800701a:	ab03      	add	r3, sp, #12
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	462a      	mov	r2, r5
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <_svfiprintf_r+0x1f8>)
 8007022:	a904      	add	r1, sp, #16
 8007024:	4638      	mov	r0, r7
 8007026:	f3af 8000 	nop.w
 800702a:	1c42      	adds	r2, r0, #1
 800702c:	4606      	mov	r6, r0
 800702e:	d1d6      	bne.n	8006fde <_svfiprintf_r+0x176>
 8007030:	89ab      	ldrh	r3, [r5, #12]
 8007032:	065b      	lsls	r3, r3, #25
 8007034:	f53f af2c 	bmi.w	8006e90 <_svfiprintf_r+0x28>
 8007038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800703a:	b01d      	add	sp, #116	; 0x74
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	ab03      	add	r3, sp, #12
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	462a      	mov	r2, r5
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <_svfiprintf_r+0x1f8>)
 8007048:	a904      	add	r1, sp, #16
 800704a:	4638      	mov	r0, r7
 800704c:	f000 f87a 	bl	8007144 <_printf_i>
 8007050:	e7eb      	b.n	800702a <_svfiprintf_r+0x1c2>
 8007052:	bf00      	nop
 8007054:	080077d4 	.word	0x080077d4
 8007058:	080077de 	.word	0x080077de
 800705c:	00000000 	.word	0x00000000
 8007060:	08006db1 	.word	0x08006db1
 8007064:	080077da 	.word	0x080077da

08007068 <_printf_common>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	4616      	mov	r6, r2
 800706e:	4699      	mov	r9, r3
 8007070:	688a      	ldr	r2, [r1, #8]
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007078:	4293      	cmp	r3, r2
 800707a:	bfb8      	it	lt
 800707c:	4613      	movlt	r3, r2
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007084:	4607      	mov	r7, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b10a      	cbz	r2, 800708e <_printf_common+0x26>
 800708a:	3301      	adds	r3, #1
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	0699      	lsls	r1, r3, #26
 8007092:	bf42      	ittt	mi
 8007094:	6833      	ldrmi	r3, [r6, #0]
 8007096:	3302      	addmi	r3, #2
 8007098:	6033      	strmi	r3, [r6, #0]
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f015 0506 	ands.w	r5, r5, #6
 80070a0:	d106      	bne.n	80070b0 <_printf_common+0x48>
 80070a2:	f104 0a19 	add.w	sl, r4, #25
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	6832      	ldr	r2, [r6, #0]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc26      	bgt.n	80070fe <_printf_common+0x96>
 80070b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b4:	1e13      	subs	r3, r2, #0
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d42b      	bmi.n	8007118 <_printf_common+0xb0>
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d01e      	beq.n	800710c <_printf_common+0xa4>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	68e5      	ldr	r5, [r4, #12]
 80070d2:	6832      	ldr	r2, [r6, #0]
 80070d4:	f003 0306 	and.w	r3, r3, #6
 80070d8:	2b04      	cmp	r3, #4
 80070da:	bf08      	it	eq
 80070dc:	1aad      	subeq	r5, r5, r2
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	bf0c      	ite	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	2500      	movne	r5, #0
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bfc4      	itt	gt
 80070ee:	1a9b      	subgt	r3, r3, r2
 80070f0:	18ed      	addgt	r5, r5, r3
 80070f2:	2600      	movs	r6, #0
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xc8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xa8>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xac>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c6      	b.n	80070a6 <_printf_common+0x3e>
 8007118:	18e1      	adds	r1, r4, r3
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	2030      	movs	r0, #48	; 0x30
 800711e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007122:	4422      	add	r2, r4
 8007124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712c:	3302      	adds	r3, #2
 800712e:	e7c7      	b.n	80070c0 <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa4>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x8e>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	7e0f      	ldrb	r7, [r1, #24]
 800714a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800714c:	2f78      	cmp	r7, #120	; 0x78
 800714e:	4691      	mov	r9, r2
 8007150:	4680      	mov	r8, r0
 8007152:	460c      	mov	r4, r1
 8007154:	469a      	mov	sl, r3
 8007156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d8 	beq.w	8007316 <_printf_i+0x1d2>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80a3 	beq.w	80072b2 <_printf_i+0x16e>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a101      	add	r1, pc, #4	; (adr r1, 8007184 <_printf_i+0x40>)
 8007180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072fd 	.word	0x080072fd
 80071b4:	08007221 	.word	0x08007221
 80071b8:	080072df 	.word	0x080072df
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	0800731f 	.word	0x0800731f
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072e7 	.word	0x080072e7
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0a3      	b.n	8007338 <_printf_i+0x1f4>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	6829      	ldr	r1, [r5, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	f101 0304 	add.w	r3, r1, #4
 80071fa:	d50a      	bpl.n	8007212 <_printf_i+0xce>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	2e00      	cmp	r6, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xc8>
 8007204:	232d      	movs	r3, #45	; 0x2d
 8007206:	4276      	negs	r6, r6
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	485e      	ldr	r0, [pc, #376]	; (8007388 <_printf_i+0x244>)
 800720e:	230a      	movs	r3, #10
 8007210:	e019      	b.n	8007246 <_printf_i+0x102>
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f010 0f40 	tst.w	r0, #64	; 0x40
 800721a:	bf18      	it	ne
 800721c:	b236      	sxthne	r6, r6
 800721e:	e7ef      	b.n	8007200 <_printf_i+0xbc>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6029      	str	r1, [r5, #0]
 8007228:	0601      	lsls	r1, r0, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xec>
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	e002      	b.n	8007236 <_printf_i+0xf2>
 8007230:	0646      	lsls	r6, r0, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xe8>
 8007234:	881e      	ldrh	r6, [r3, #0]
 8007236:	4854      	ldr	r0, [pc, #336]	; (8007388 <_printf_i+0x244>)
 8007238:	2f6f      	cmp	r7, #111	; 0x6f
 800723a:	bf0c      	ite	eq
 800723c:	2308      	moveq	r3, #8
 800723e:	230a      	movne	r3, #10
 8007240:	2100      	movs	r1, #0
 8007242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007246:	6865      	ldr	r5, [r4, #4]
 8007248:	60a5      	str	r5, [r4, #8]
 800724a:	2d00      	cmp	r5, #0
 800724c:	bfa2      	ittt	ge
 800724e:	6821      	ldrge	r1, [r4, #0]
 8007250:	f021 0104 	bicge.w	r1, r1, #4
 8007254:	6021      	strge	r1, [r4, #0]
 8007256:	b90e      	cbnz	r6, 800725c <_printf_i+0x118>
 8007258:	2d00      	cmp	r5, #0
 800725a:	d04d      	beq.n	80072f8 <_printf_i+0x1b4>
 800725c:	4615      	mov	r5, r2
 800725e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007262:	fb03 6711 	mls	r7, r3, r1, r6
 8007266:	5dc7      	ldrb	r7, [r0, r7]
 8007268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800726c:	4637      	mov	r7, r6
 800726e:	42bb      	cmp	r3, r7
 8007270:	460e      	mov	r6, r1
 8007272:	d9f4      	bls.n	800725e <_printf_i+0x11a>
 8007274:	2b08      	cmp	r3, #8
 8007276:	d10b      	bne.n	8007290 <_printf_i+0x14c>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	07de      	lsls	r6, r3, #31
 800727c:	d508      	bpl.n	8007290 <_printf_i+0x14c>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4299      	cmp	r1, r3
 8007284:	bfde      	ittt	le
 8007286:	2330      	movle	r3, #48	; 0x30
 8007288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800728c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007290:	1b52      	subs	r2, r2, r5
 8007292:	6122      	str	r2, [r4, #16]
 8007294:	f8cd a000 	str.w	sl, [sp]
 8007298:	464b      	mov	r3, r9
 800729a:	aa03      	add	r2, sp, #12
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fee2 	bl	8007068 <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d14c      	bne.n	8007342 <_printf_i+0x1fe>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b004      	add	sp, #16
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	4835      	ldr	r0, [pc, #212]	; (8007388 <_printf_i+0x244>)
 80072b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b8:	6829      	ldr	r1, [r5, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c0:	6029      	str	r1, [r5, #0]
 80072c2:	061d      	lsls	r5, r3, #24
 80072c4:	d514      	bpl.n	80072f0 <_printf_i+0x1ac>
 80072c6:	07df      	lsls	r7, r3, #31
 80072c8:	bf44      	itt	mi
 80072ca:	f043 0320 	orrmi.w	r3, r3, #32
 80072ce:	6023      	strmi	r3, [r4, #0]
 80072d0:	b91e      	cbnz	r6, 80072da <_printf_i+0x196>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f023 0320 	bic.w	r3, r3, #32
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2310      	movs	r3, #16
 80072dc:	e7b0      	b.n	8007240 <_printf_i+0xfc>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f043 0320 	orr.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2378      	movs	r3, #120	; 0x78
 80072e8:	4828      	ldr	r0, [pc, #160]	; (800738c <_printf_i+0x248>)
 80072ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ee:	e7e3      	b.n	80072b8 <_printf_i+0x174>
 80072f0:	0659      	lsls	r1, r3, #25
 80072f2:	bf48      	it	mi
 80072f4:	b2b6      	uxthmi	r6, r6
 80072f6:	e7e6      	b.n	80072c6 <_printf_i+0x182>
 80072f8:	4615      	mov	r5, r2
 80072fa:	e7bb      	b.n	8007274 <_printf_i+0x130>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	6826      	ldr	r6, [r4, #0]
 8007300:	6961      	ldr	r1, [r4, #20]
 8007302:	1d18      	adds	r0, r3, #4
 8007304:	6028      	str	r0, [r5, #0]
 8007306:	0635      	lsls	r5, r6, #24
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	d501      	bpl.n	8007310 <_printf_i+0x1cc>
 800730c:	6019      	str	r1, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0x1d2>
 8007310:	0670      	lsls	r0, r6, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0x1c8>
 8007314:	8019      	strh	r1, [r3, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	4615      	mov	r5, r2
 800731c:	e7ba      	b.n	8007294 <_printf_i+0x150>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	602a      	str	r2, [r5, #0]
 8007324:	681d      	ldr	r5, [r3, #0]
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	2100      	movs	r1, #0
 800732a:	4628      	mov	r0, r5
 800732c:	f7f8 ffa8 	bl	8000280 <memchr>
 8007330:	b108      	cbz	r0, 8007336 <_printf_i+0x1f2>
 8007332:	1b40      	subs	r0, r0, r5
 8007334:	6060      	str	r0, [r4, #4]
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	e7a8      	b.n	8007294 <_printf_i+0x150>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	462a      	mov	r2, r5
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	47d0      	blx	sl
 800734c:	3001      	adds	r0, #1
 800734e:	d0ab      	beq.n	80072a8 <_printf_i+0x164>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	079b      	lsls	r3, r3, #30
 8007354:	d413      	bmi.n	800737e <_printf_i+0x23a>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	4298      	cmp	r0, r3
 800735c:	bfb8      	it	lt
 800735e:	4618      	movlt	r0, r3
 8007360:	e7a4      	b.n	80072ac <_printf_i+0x168>
 8007362:	2301      	movs	r3, #1
 8007364:	4632      	mov	r2, r6
 8007366:	4649      	mov	r1, r9
 8007368:	4640      	mov	r0, r8
 800736a:	47d0      	blx	sl
 800736c:	3001      	adds	r0, #1
 800736e:	d09b      	beq.n	80072a8 <_printf_i+0x164>
 8007370:	3501      	adds	r5, #1
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	1a5b      	subs	r3, r3, r1
 8007378:	42ab      	cmp	r3, r5
 800737a:	dcf2      	bgt.n	8007362 <_printf_i+0x21e>
 800737c:	e7eb      	b.n	8007356 <_printf_i+0x212>
 800737e:	2500      	movs	r5, #0
 8007380:	f104 0619 	add.w	r6, r4, #25
 8007384:	e7f5      	b.n	8007372 <_printf_i+0x22e>
 8007386:	bf00      	nop
 8007388:	080077e5 	.word	0x080077e5
 800738c:	080077f6 	.word	0x080077f6

08007390 <memmove>:
 8007390:	4288      	cmp	r0, r1
 8007392:	b510      	push	{r4, lr}
 8007394:	eb01 0402 	add.w	r4, r1, r2
 8007398:	d902      	bls.n	80073a0 <memmove+0x10>
 800739a:	4284      	cmp	r4, r0
 800739c:	4623      	mov	r3, r4
 800739e:	d807      	bhi.n	80073b0 <memmove+0x20>
 80073a0:	1e43      	subs	r3, r0, #1
 80073a2:	42a1      	cmp	r1, r4
 80073a4:	d008      	beq.n	80073b8 <memmove+0x28>
 80073a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ae:	e7f8      	b.n	80073a2 <memmove+0x12>
 80073b0:	4402      	add	r2, r0
 80073b2:	4601      	mov	r1, r0
 80073b4:	428a      	cmp	r2, r1
 80073b6:	d100      	bne.n	80073ba <memmove+0x2a>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073c2:	e7f7      	b.n	80073b4 <memmove+0x24>

080073c4 <_free_r>:
 80073c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073c6:	2900      	cmp	r1, #0
 80073c8:	d044      	beq.n	8007454 <_free_r+0x90>
 80073ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ce:	9001      	str	r0, [sp, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f1a1 0404 	sub.w	r4, r1, #4
 80073d6:	bfb8      	it	lt
 80073d8:	18e4      	addlt	r4, r4, r3
 80073da:	f000 f913 	bl	8007604 <__malloc_lock>
 80073de:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <_free_r+0x94>)
 80073e0:	9801      	ldr	r0, [sp, #4]
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	b933      	cbnz	r3, 80073f4 <_free_r+0x30>
 80073e6:	6063      	str	r3, [r4, #4]
 80073e8:	6014      	str	r4, [r2, #0]
 80073ea:	b003      	add	sp, #12
 80073ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073f0:	f000 b90e 	b.w	8007610 <__malloc_unlock>
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	d908      	bls.n	800740a <_free_r+0x46>
 80073f8:	6825      	ldr	r5, [r4, #0]
 80073fa:	1961      	adds	r1, r4, r5
 80073fc:	428b      	cmp	r3, r1
 80073fe:	bf01      	itttt	eq
 8007400:	6819      	ldreq	r1, [r3, #0]
 8007402:	685b      	ldreq	r3, [r3, #4]
 8007404:	1949      	addeq	r1, r1, r5
 8007406:	6021      	streq	r1, [r4, #0]
 8007408:	e7ed      	b.n	80073e6 <_free_r+0x22>
 800740a:	461a      	mov	r2, r3
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b10b      	cbz	r3, 8007414 <_free_r+0x50>
 8007410:	42a3      	cmp	r3, r4
 8007412:	d9fa      	bls.n	800740a <_free_r+0x46>
 8007414:	6811      	ldr	r1, [r2, #0]
 8007416:	1855      	adds	r5, r2, r1
 8007418:	42a5      	cmp	r5, r4
 800741a:	d10b      	bne.n	8007434 <_free_r+0x70>
 800741c:	6824      	ldr	r4, [r4, #0]
 800741e:	4421      	add	r1, r4
 8007420:	1854      	adds	r4, r2, r1
 8007422:	42a3      	cmp	r3, r4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	d1e0      	bne.n	80073ea <_free_r+0x26>
 8007428:	681c      	ldr	r4, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	6053      	str	r3, [r2, #4]
 800742e:	4421      	add	r1, r4
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	e7da      	b.n	80073ea <_free_r+0x26>
 8007434:	d902      	bls.n	800743c <_free_r+0x78>
 8007436:	230c      	movs	r3, #12
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	e7d6      	b.n	80073ea <_free_r+0x26>
 800743c:	6825      	ldr	r5, [r4, #0]
 800743e:	1961      	adds	r1, r4, r5
 8007440:	428b      	cmp	r3, r1
 8007442:	bf04      	itt	eq
 8007444:	6819      	ldreq	r1, [r3, #0]
 8007446:	685b      	ldreq	r3, [r3, #4]
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	bf04      	itt	eq
 800744c:	1949      	addeq	r1, r1, r5
 800744e:	6021      	streq	r1, [r4, #0]
 8007450:	6054      	str	r4, [r2, #4]
 8007452:	e7ca      	b.n	80073ea <_free_r+0x26>
 8007454:	b003      	add	sp, #12
 8007456:	bd30      	pop	{r4, r5, pc}
 8007458:	2001750c 	.word	0x2001750c

0800745c <sbrk_aligned>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4e0e      	ldr	r6, [pc, #56]	; (8007498 <sbrk_aligned+0x3c>)
 8007460:	460c      	mov	r4, r1
 8007462:	6831      	ldr	r1, [r6, #0]
 8007464:	4605      	mov	r5, r0
 8007466:	b911      	cbnz	r1, 800746e <sbrk_aligned+0x12>
 8007468:	f000 f8bc 	bl	80075e4 <_sbrk_r>
 800746c:	6030      	str	r0, [r6, #0]
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f8b7 	bl	80075e4 <_sbrk_r>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d00a      	beq.n	8007490 <sbrk_aligned+0x34>
 800747a:	1cc4      	adds	r4, r0, #3
 800747c:	f024 0403 	bic.w	r4, r4, #3
 8007480:	42a0      	cmp	r0, r4
 8007482:	d007      	beq.n	8007494 <sbrk_aligned+0x38>
 8007484:	1a21      	subs	r1, r4, r0
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f8ac 	bl	80075e4 <_sbrk_r>
 800748c:	3001      	adds	r0, #1
 800748e:	d101      	bne.n	8007494 <sbrk_aligned+0x38>
 8007490:	f04f 34ff 	mov.w	r4, #4294967295
 8007494:	4620      	mov	r0, r4
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	20017510 	.word	0x20017510

0800749c <_malloc_r>:
 800749c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a0:	1ccd      	adds	r5, r1, #3
 80074a2:	f025 0503 	bic.w	r5, r5, #3
 80074a6:	3508      	adds	r5, #8
 80074a8:	2d0c      	cmp	r5, #12
 80074aa:	bf38      	it	cc
 80074ac:	250c      	movcc	r5, #12
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	4607      	mov	r7, r0
 80074b2:	db01      	blt.n	80074b8 <_malloc_r+0x1c>
 80074b4:	42a9      	cmp	r1, r5
 80074b6:	d905      	bls.n	80074c4 <_malloc_r+0x28>
 80074b8:	230c      	movs	r3, #12
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	2600      	movs	r6, #0
 80074be:	4630      	mov	r0, r6
 80074c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c4:	4e2e      	ldr	r6, [pc, #184]	; (8007580 <_malloc_r+0xe4>)
 80074c6:	f000 f89d 	bl	8007604 <__malloc_lock>
 80074ca:	6833      	ldr	r3, [r6, #0]
 80074cc:	461c      	mov	r4, r3
 80074ce:	bb34      	cbnz	r4, 800751e <_malloc_r+0x82>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4638      	mov	r0, r7
 80074d4:	f7ff ffc2 	bl	800745c <sbrk_aligned>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	4604      	mov	r4, r0
 80074dc:	d14d      	bne.n	800757a <_malloc_r+0xde>
 80074de:	6834      	ldr	r4, [r6, #0]
 80074e0:	4626      	mov	r6, r4
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	d140      	bne.n	8007568 <_malloc_r+0xcc>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4631      	mov	r1, r6
 80074ea:	4638      	mov	r0, r7
 80074ec:	eb04 0803 	add.w	r8, r4, r3
 80074f0:	f000 f878 	bl	80075e4 <_sbrk_r>
 80074f4:	4580      	cmp	r8, r0
 80074f6:	d13a      	bne.n	800756e <_malloc_r+0xd2>
 80074f8:	6821      	ldr	r1, [r4, #0]
 80074fa:	3503      	adds	r5, #3
 80074fc:	1a6d      	subs	r5, r5, r1
 80074fe:	f025 0503 	bic.w	r5, r5, #3
 8007502:	3508      	adds	r5, #8
 8007504:	2d0c      	cmp	r5, #12
 8007506:	bf38      	it	cc
 8007508:	250c      	movcc	r5, #12
 800750a:	4629      	mov	r1, r5
 800750c:	4638      	mov	r0, r7
 800750e:	f7ff ffa5 	bl	800745c <sbrk_aligned>
 8007512:	3001      	adds	r0, #1
 8007514:	d02b      	beq.n	800756e <_malloc_r+0xd2>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	442b      	add	r3, r5
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	e00e      	b.n	800753c <_malloc_r+0xa0>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	1b52      	subs	r2, r2, r5
 8007522:	d41e      	bmi.n	8007562 <_malloc_r+0xc6>
 8007524:	2a0b      	cmp	r2, #11
 8007526:	d916      	bls.n	8007556 <_malloc_r+0xba>
 8007528:	1961      	adds	r1, r4, r5
 800752a:	42a3      	cmp	r3, r4
 800752c:	6025      	str	r5, [r4, #0]
 800752e:	bf18      	it	ne
 8007530:	6059      	strne	r1, [r3, #4]
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	bf08      	it	eq
 8007536:	6031      	streq	r1, [r6, #0]
 8007538:	5162      	str	r2, [r4, r5]
 800753a:	604b      	str	r3, [r1, #4]
 800753c:	4638      	mov	r0, r7
 800753e:	f104 060b 	add.w	r6, r4, #11
 8007542:	f000 f865 	bl	8007610 <__malloc_unlock>
 8007546:	f026 0607 	bic.w	r6, r6, #7
 800754a:	1d23      	adds	r3, r4, #4
 800754c:	1af2      	subs	r2, r6, r3
 800754e:	d0b6      	beq.n	80074be <_malloc_r+0x22>
 8007550:	1b9b      	subs	r3, r3, r6
 8007552:	50a3      	str	r3, [r4, r2]
 8007554:	e7b3      	b.n	80074be <_malloc_r+0x22>
 8007556:	6862      	ldr	r2, [r4, #4]
 8007558:	42a3      	cmp	r3, r4
 800755a:	bf0c      	ite	eq
 800755c:	6032      	streq	r2, [r6, #0]
 800755e:	605a      	strne	r2, [r3, #4]
 8007560:	e7ec      	b.n	800753c <_malloc_r+0xa0>
 8007562:	4623      	mov	r3, r4
 8007564:	6864      	ldr	r4, [r4, #4]
 8007566:	e7b2      	b.n	80074ce <_malloc_r+0x32>
 8007568:	4634      	mov	r4, r6
 800756a:	6876      	ldr	r6, [r6, #4]
 800756c:	e7b9      	b.n	80074e2 <_malloc_r+0x46>
 800756e:	230c      	movs	r3, #12
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	4638      	mov	r0, r7
 8007574:	f000 f84c 	bl	8007610 <__malloc_unlock>
 8007578:	e7a1      	b.n	80074be <_malloc_r+0x22>
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	e7de      	b.n	800753c <_malloc_r+0xa0>
 800757e:	bf00      	nop
 8007580:	2001750c 	.word	0x2001750c

08007584 <_realloc_r>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	4680      	mov	r8, r0
 800758a:	4614      	mov	r4, r2
 800758c:	460e      	mov	r6, r1
 800758e:	b921      	cbnz	r1, 800759a <_realloc_r+0x16>
 8007590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007594:	4611      	mov	r1, r2
 8007596:	f7ff bf81 	b.w	800749c <_malloc_r>
 800759a:	b92a      	cbnz	r2, 80075a8 <_realloc_r+0x24>
 800759c:	f7ff ff12 	bl	80073c4 <_free_r>
 80075a0:	4625      	mov	r5, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	f000 f838 	bl	800761c <_malloc_usable_size_r>
 80075ac:	4284      	cmp	r4, r0
 80075ae:	4607      	mov	r7, r0
 80075b0:	d802      	bhi.n	80075b8 <_realloc_r+0x34>
 80075b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075b6:	d812      	bhi.n	80075de <_realloc_r+0x5a>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4640      	mov	r0, r8
 80075bc:	f7ff ff6e 	bl	800749c <_malloc_r>
 80075c0:	4605      	mov	r5, r0
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0ed      	beq.n	80075a2 <_realloc_r+0x1e>
 80075c6:	42bc      	cmp	r4, r7
 80075c8:	4622      	mov	r2, r4
 80075ca:	4631      	mov	r1, r6
 80075cc:	bf28      	it	cs
 80075ce:	463a      	movcs	r2, r7
 80075d0:	f7ff fba4 	bl	8006d1c <memcpy>
 80075d4:	4631      	mov	r1, r6
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff fef4 	bl	80073c4 <_free_r>
 80075dc:	e7e1      	b.n	80075a2 <_realloc_r+0x1e>
 80075de:	4635      	mov	r5, r6
 80075e0:	e7df      	b.n	80075a2 <_realloc_r+0x1e>
	...

080075e4 <_sbrk_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d06      	ldr	r5, [pc, #24]	; (8007600 <_sbrk_r+0x1c>)
 80075e8:	2300      	movs	r3, #0
 80075ea:	4604      	mov	r4, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	f000 f81e 	bl	8007630 <_sbrk>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_sbrk_r+0x1a>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_sbrk_r+0x1a>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	20017514 	.word	0x20017514

08007604 <__malloc_lock>:
 8007604:	4801      	ldr	r0, [pc, #4]	; (800760c <__malloc_lock+0x8>)
 8007606:	f000 b811 	b.w	800762c <__retarget_lock_acquire_recursive>
 800760a:	bf00      	nop
 800760c:	20017518 	.word	0x20017518

08007610 <__malloc_unlock>:
 8007610:	4801      	ldr	r0, [pc, #4]	; (8007618 <__malloc_unlock+0x8>)
 8007612:	f000 b80c 	b.w	800762e <__retarget_lock_release_recursive>
 8007616:	bf00      	nop
 8007618:	20017518 	.word	0x20017518

0800761c <_malloc_usable_size_r>:
 800761c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007620:	1f18      	subs	r0, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfbc      	itt	lt
 8007626:	580b      	ldrlt	r3, [r1, r0]
 8007628:	18c0      	addlt	r0, r0, r3
 800762a:	4770      	bx	lr

0800762c <__retarget_lock_acquire_recursive>:
 800762c:	4770      	bx	lr

0800762e <__retarget_lock_release_recursive>:
 800762e:	4770      	bx	lr

08007630 <_sbrk>:
 8007630:	4a04      	ldr	r2, [pc, #16]	; (8007644 <_sbrk+0x14>)
 8007632:	6811      	ldr	r1, [r2, #0]
 8007634:	4603      	mov	r3, r0
 8007636:	b909      	cbnz	r1, 800763c <_sbrk+0xc>
 8007638:	4903      	ldr	r1, [pc, #12]	; (8007648 <_sbrk+0x18>)
 800763a:	6011      	str	r1, [r2, #0]
 800763c:	6810      	ldr	r0, [r2, #0]
 800763e:	4403      	add	r3, r0
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	4770      	bx	lr
 8007644:	2001751c 	.word	0x2001751c
 8007648:	20017520 	.word	0x20017520

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
